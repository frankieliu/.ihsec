applyEnterFun( [g_form]  ) => t / nil

"Calls doneProc, passes it the points you entered, resets the enterfunction, and calls initProc. "


praBlockPlace( d_cv  g_honorInit  x_runMode  f_wireLengthWeight f_RoutingArea  x_softBlockLevel  [f_aspLow]  [f_aspHigh]  [f_maxXdim]  [f_maxYdim]  ) => t/nil

"Places IO and blocks for a cell-based design. For a fixed die design, use the first six parameters. Use all ten parameters for a variable die design. praBlockPlace honors instance orientation constraints and valid orientations of cell masters."


praGEBlockPlace( d_cv  g_honorInit  x_runMode  f_wireLengthWeight f_RoutingArea  x_softBlockLevel  ) => t/nil

"Places the contents of blocks for Gate Ensemble. praGEBlockPlace honors instance orientation constraints and valid orientations of cell masters."


praOptimizeIO( d_cv  t_mode  f_space  f_var  ) => t/nil

"Places IO cells or IO pins in a cell-based design. praOptimizeIO cannot place a design containing a mixture of IO cells and IO pins; the design can contain only one or the other."


techBindTechFile( g_ID  [t_techLibName  [t_techfileName [updateDev]]]  ) => t/nil

"Attaches the specified Design Framework II library or cellview to the specified technology file by creating techLib and techFile properties. The l_techfile argument is a list containing a design data identifier for the Design Framework II library in which the technology file resides and techfile.cds, which is the name of the binary technology file. To get the design data identifier for a Design Framework library, use the ddGetObj function. If the library, cellview, or technology file does not exist, this function returns nil."


techCloseTechFile( d_techFileID   ) => t/nil

"Changes the status of the technology file to closed and decrements the close count. The technology file is not purged from virtual memory until the system needs to use the memory. Internally, the system maintains a count of the number of times you open and close a specific technology file. The count increments when you open and decrements when you close. When the close count is 0 and the system needs more virtual memory, it purges the technology file from virtual memory. If the technology file does not exist, this function returns nil."


techCopyTechFile( d_techFileID  t_newTechLibName t_path [g_deleteOriginal]   ) => d_newTechFileID/nil

"Copies a technology file to a new location and optionally deletes the original. This function is especially useful for separating technology data out of libraries that contain both design data and technology data. If the technology file does not exist, this function returns nil."


techDeleteTechFile( d_techFileID   ) => t/nil

"Deletes a technology file. This function is useful for deleting redundant technology data from design libraries that have been updated to share one technology library. If the technology file does not exist, this function returns nil."


techGetDeviceTechFile( d_cellviewID  ) => d_techFileID/nil

"Returns the database identifier for the technology file bound to the specified device."


techGetOpenTechFiles(  ) => l_techfiles/nil

"Returns a list of the database identifiers of the technology files that are open."


techGetTechFile( g_libID | d_cellviewID  ) => d_techFileID/nil

"Returns the database identifier of the technology file attached to the specified Design Framework II library or cellview. If the cellview does not identify a specific technology file, this function returns the database identifier for the technology file bound to the library of the cellview. A library must identify a technology file. If the library or cellview does not exist, this function returns nil."


techGetTechFileDdId( d_techFileId  ) => g_ddtechFileId/nil

"Returns the design data identifier for the technology file identified by the specified techFileId. This function is a wrapper for the ddGetObj function specifically designed to return the design data identifier of a technology file. If the technology file does not exist, this function returns nil."


techGetTechLibName(  ) => N/A

"Returns the value of the techLib property set for the specified library or cellview. This property is one of two that attach a library or cellview to a technology file."


techGetTimeStamp( d_techFileID  ) => x_timeStamp/nil

"Returns the time stamp of the technology file loaded into virtual memory. The time stamp is updated every time you modify the technology file in virtual memory. The time stamp is an integer representing the number of seconds elapsed since 00:00:00 GMT, January 1, 1970. If the technology file does not exist, this function returns nil."


techOpenDefaultTechFile(  ) => d_techFileID/nil

"Loads the default binary technology file in virtual memory in read mode and returns the database identifier. The default technology file resides at   <install_dir>/tools/dfII/samples/techfile/default.cds  If the default technology file is not at the expected location, this function returns nil."


techOpenTechFile( t_libName  t_fileName [t_mode]   ) => d_techFileID/nil

"Loads a binary technology file in virtual memory with a specified mode and returns the database identifier of the file. If you do not specify a mode, or if you specify r mode, the file can only be read. If you specify w mode, the contents of the disk file are deleted, or truncated, and an empty technology file is loaded into virtual memory. If you specify a mode, the technology file is loaded in append mode, which means that you can edit the contents of the file. If the library or file does not exist, this function returns nil."


techPurgeTechFile( d_techFileID   ) => t/nil

"Deletes the file from virtual memory if the close count for the file is 0. Internally, the system maintains a count of the number of times you open and close a specific technology file. The count increments when you open and decrements when you close. When the close count is 0 and the system needs more virtual memory, it automatically purges the technology file to free the memory. This function lets you manually purge the technology file. If the technology file does not exist or the close count is greater than 0, this function returns nil."


techRefreshTechFile( d_techFileID   ) => t/nil

"Deletes the technology file loaded in virtual memory and reloads the binary file stored on disk. The edit mode (append, read, or write) of the file remains the same. If you refresh a technology file open in append mode, any changes you made and did not save are lost. If you refresh a technology file open in write mode, the empty disk file is loaded into virtual memory. If the technology file does not exist, this function returns nil."


techReopenTechFile( d_techFileID  t_mode   ) => t/nil

"Changes the mode of a technology file that has been opened. Use this function to upgrade the mode from r (read only) to a (append). If the technology file does not exist, or if the technology file is already open in append or write mode, this function returns nil."


techSaveTechFile( d_techFileID  ) => t/nil

"Saves the specified technology file from virtual memory to the disk file from which it was opened. If the technology file identifier is invalid, or the system is not able to write to the directory containing the disk file, this function returns nil."


techSetEvaluate( g_value  ) => t/nil

"Sets an internal flag that indicates whether the tcDumpTechFile and techGet functions evaluate expressions or read the expression as a string. The system automatically sets this internal flag while it dumps a technology file so that expressions and controls are preserved. This function lets you manually set the flag. "


techSetTechFileName( g_ID t_techfileName   ) => t/nil

"Updates the techFile property of the specified library or cellview. This property is one of two that attach a library or cellview to a technology file."


techSetTechLibName( g_ID t_libName   ) => t/nil

"Updates the techLib property of the specified library or cellview. This property is one of two that attach a library or cellview to a technology file."


techSetTimeStamp( d_techFileID   ) => t/nil

"Updates the internal time stamp of the technology file to the current time. The time stamp is an integer representing the number of seconds elapsed since 00:00:00 GMT, January 1, 1970. "


techTruncateTechFile( d_techFileID   ) => t/nil

"Deletes the contents of the technology file stored on disk. If the technology file does not exist, this function returns nil."


techVerifyTechFileId( d_ID   ) => t/nil

"Indicates whether the specified database identifier is for a technology file. If the identifier is invalid or is not for a technology file, this function returns nil."


dagAddActionToObject( l_action w_object  ) => t_actionName / nil

"Adds the action to the specified dag node or class. However, if the action is already in the list, it is not replaced. For an existing action, use dagDeleteActionFromObject to delete the action and then call dagAddActionToObject."


dagCreateClass( t_className  ) => w_class / nil

"Creates a dagClass and returns it. If a class by this name already exists, it is overwritten."


dagCreateNode( t_nodeName w_class  ) => w_node / nil

"Creates a dagNode and returns it."


dagDeleteActionFromObject( t_actionName w_object   ) => t / nil

"Deletes the action named t_actionName from the specified class or node. If a node"


dagDestroyNode( w_node  ) => t / nil

"Destroys a dagNode. All descendant nodes and arcs of this node are also destroyed, as well as the arcs linking this node to its parents."


dagDisplayTool( [w_dagTool] [g_runPlacer]  ) => t / nil

"Redisplays a dagTool. You can use this function if you want to re-display all of the objects in the graph rather than calling dagRefreshObject for each one."


dagGetCurrentObject(  ) => w_object / nil

"Often, when writing action procedures or SKILL objects, you need to know the node for which the action was selected. dagGetCurrentObject does this. It takes no arguments and returns the current node, or nil."


dagGetCurrentTool(  ) => w_dagTool / nil

"Returns the current dagTool, and nil if there is not a current dagTool. Note that the current dagTool is different from the current window. The current tool might not be the current window."


dagLinkParentToChild( w_parent w_child   ) => w_arc / nil

"Creates a dagArc that links the parent node to the child node. It returns the arc it creates. If an error occurs, it returns nil."


dagNumToTool( x_toolNumber  ) => w_dagTool / nil

"Returns the dagtool that matches the window number specified by x_toolNumber."


dagOpenTool( x_backGroundColor l_bBox w_startingObject t_name t_help  ) => w_dagTool / nil

"Creates a dagTool object and opens a window in which to display the graph starting from the specified starting node."


dagPopTool( w_dagTool  ) => t / nil

"Pops the tool stack (specified by the w_dagTool argument)."


dagPushTool( w_dagTool w_newStartingNode  ) => t / nil

"Pushes a new starting object (specified by the w_newStartingNode argument) onto the stack of the tool (specified by w_dagTool)."


dagRefreshObject( w_dagNode  ) => t / nil

"Redraws the node (specified by w_dagNode) in all the tools it is currentlydisplayed in."


dagSetActionStatus( t_actionName w_dagObject g_status   ) => t / nil

"Sets the status of the specified action in the action list of the class or node. An action that has been turned off is grayed out in the pop-up menu and not available through its action accelerator, if any."


dagSetCurrentTool( w_dagTool  ) => t / nil

"Sets the current dagTool to the one specified by the w_dagTool argument."


dagSetExpandedActionStatus( t_actionName w_dagObject g_status  ) => t / nil

"Sets the status of the specified action in the expanded-action list of a node. Setting the status to nil makes the action name appear gray in the pop-up menu and makes the action accelerator unavailable. Once a dagNode has been placed into a tool, the actions from the dagClass are concatenated to make a full list of actions for this node. This is known as the expanded-action list."


dagSetFont( t_XFontName  ) => t / nil

"Modifies the font used in text mode in any dag tool."


dagUnlinkParentFromChild( w_arc  ) => t / nil

"Unlinks a parent node from a child node. It takes, as its only argument, the dagArc that connects the parent to the child. The arc is destroyed; however, neither the parent node nor the child node is destroyed. This can be useful if you want to change the parent of a node."


dataFilter( t_monteExprName ( {?sigma x_sigma  | ?upper x_upper ?lower x_lower} ?filterBy s_filterBy )  ) => t/nil

"Eliminates bad data points (outliers) from a Monte Carlo data set."


dataTypes(  ) => l_dataTypes/nil

"Returns the list of data types that are used in an analysis previously specified with selectResult."


dbAddFigToNet(  ) => N/A

"The dbSetq equivalent of figure~>net = d_net."


dbAddObjectToGroup( d_group d_object  ) => d_groupMem / nil

"Adds a database object to a group."


dbAllCellViews( g_lib t_cellName [d_contextCellView] )  	=> l_viewName / nil   dbAllCellViews( nil t_cellName d_contextCellView  ) => l_viewName / nil

"Lists all the view names of a cell."


dbCVHasInheritedSig( d_cellViewid  ) => t/nil

"Given a cellview id in cellViewId, this function checks if there is any inherited signal in the given cellview."


dbCVHasInheritedTerm( d_cellViewId  ) => t/nil

"Given a cellview id in cellViewId, this function checks whether there is any inherited terminal in the given cellview."


dbCheck( [d_cellView | nil]  ) => t / nil

"Checks for data corruption."


dbCheckRecursion( d_cellViewId  ) => t / nil

"Checks for occurrence of the given top cellview in the hierarchy of the instHeader masters or any other recursion inside the instHeader master"


dbClose( d_cellView  ) => t / nil

"Closes a cellview."


dbCompactCellView( d_cellView [t_libName t_cellName t_viewName [t_version [d_contextCellView]]]  ) => t / nil

"Saves a cellview in a compacted format."


dbCompressPointArray( l_pointArray x_isClosed [f_DBUPerUU]  ) => l_newPointArray

"Compresses colinear points in a list of points."


dbCompressionPlot( o_wave x_harmonic x_extrapolationPoint    [?compression x_compression]  ) => t/nil

"Plots the nth compression point plot. The x_compression argument is optional and defaults to 1, for 1dB compression, if omitted."


dbComputeBBox( d_cellViewId  ) => t/nil

"Recomputes the given cellview"


dbComputeBBoxNoNLP( d_cellViewId  ) => l_bBox/nil

"Computes the given cellview"


dbConcatTransform( l_list1 l_list2  ) => l_list_new

"Merges two transformations into a new transformation."


dbConvertArcToLine( d_arc x_nSides  ) => d_line / nil

"Converts an arc to a line. A line is defined as a number of connecting segments."


dbConvertDonutToPolygon( d_donut x_nSides  ) => d_polygon / nil

"Converts a donut to a polygon."


dbConvertEllipseToPolygon( d_ellipse x_nSides  ) => d_polygon / nil

"Converts an ellipse to a polygon."


dbConvertLineToPath( d_line x_width [t_pathStyle]  ) => d_path / nil

"Converts a line to a path."


dbConvertPathToPolygon( d_path  ) => d_polygon / nil

"Converts a path to a polygon with the same number of points as the path."


dbCopyCellView( d_srcCVId t_libName t_cellName t_viewName [t_version [g_contextId [b_overwrite]]]  ) => d_cellViewId / nil

"Copies a cellview to a destination cellview."


dbCopyFig( d_fig d_cellView [l_transform]  ) => d_fig / nil

"Copies and transforms a figure and places it in a cellview."


dbCopyProp( g_object1 g_object2  ) => t / nil

"Copies all the properties of one database object to another database object."


dbCopySingleProp( d_srcPropId g_dstObjId  ) => d_dstPropId

"Copies a single property to a destination object."


dbCreateArc( d_cellView tx_layer l_ellipse_bBox l_arc_bBox )  	=> d_arc / nil   dbCreateArc( d_cellView (tx_layer [t_purpose] ) 	l_ellipse_bBox l_arc_bBox  ) => d_arc / nil

"Creates an arc."


dbCreateConn( d_net d_inst d_term  ) => d_instTerm / nil

"Identical to dbCreateInstTerm, except the net d_net defines a valid net to be connected to the instance terminal of a master terminal d_term."


dbCreateConnByName( d_net d_inst t_name  ) => d_instTerm / nil

"Similar to dbCreateConn, except the master terminal is defined by t_name instead of being specified by the master terminal"


dbCreateConnByNewName( d_net d_inst t_name  ) => d_instTerm / nil

"Similar to dbCreateConnByName, except t_name can refer to a master terminal to be created in the master cellview of instance d_inst."


dbCreateDonut( d_cellView tx_layer l_point x_outR x_holeR )  	=> d_donut / nil   dbCreateDonut( d_cellView (tx_layer [t_purpose] )l_point  	x_outR x_holeR  ) => d_donut / nil

"Creates a donut (two concentric circles)."


dbCreateDot( d_cellView tx_layer l_point )  	=> d_dot / nil   dbCreateDot( d_cellView (tx_layer [t_purpose] ) l_point  ) => d_dot / nil

"Creates a dot."


dbCreateEllipse( d_cellView tx_layer l_bBox )  	=> d_ellipse / nil   dbCreateEllipse( d_cellView (tx_layer [t_purpose] ) l_bBox  ) => d_ellipse / nil

"Creates an ellipse."


dbCreateEnumProp( g_object t_name t_value l_string  ) => d_prop / nil

"Creates an enumerated property for an object."


dbCreateGroup( d_cellView t_name l_groupType  ) => d_group / nil

"Creates a group in a cellview."


dbCreateHierProp( g_object t_name  ) => d_prop / nil

"Creates a hierarchical property for an object."


dbCreateInst( d_cellView d_master t_name l_point t_orient [x_numInst]  ) => d_inst / nil

"Creates an instance (of cellview d_master) in the cellview d_cellView with an origin and orientation specified by l_point and t_orient."


dbCreateInstByMasterName( d_cellView t_libName t_cellName t_viewName t_instName l_origin t_orient [x_numInst]  ) => d_inst / nil

"Creates an instance (of cellview - t_libName/t_cellName/t_viewName) in the cellview d_cellView with an origin and orientation specified by l_point and t_orient."


dbCreateInstPin( d_net d_instTerm d_pin  ) => d_instPin / nil

"Creates an instance pin for the instance terminal d_instTerm and the master pin d_pin."


dbCreateInstPinByName( d_net d_instTerm t_name  ) => d_instPin / nil

"Similar to dbCreateInstPin, but the master pin is defined by its name instead of the dbObject of the pin."


dbCreateInstTerm( d_net d_inst d_term  ) => d_instTerm / nil

"Creates an instance terminal on the instance d_inst for the master terminal d_term."


dbCreateLabel( d_cellView tx_layer l_point t_label t_just  	t_orient t_font x_height )  	=> d_label / nil   dbCreateLabel( d_cellView (tx_layer [t_purpose] ) l_point  	t_label t_just t_orient t_font x_height  ) => d_label / nil

"Creates a graphic text-string label."


dbCreateLib( t_libName [t_libPath]  ) => ddId_libId / nil

"Creates a library named t_libName."


dbCreateLine( d_cellView tx_layer l_points )  	=> d_line / nil   dbCreateLine( d_cellView (tx_layer [t_purpose] ) l_points  ) => d_line / nil

"Creates a line."


dbCreateNet( d_cellView t_name d_parentNet )  	=> d_net / nil   dbCreateNet( d_cellView t_name [nil]  ) => d_net / nil

"Creates a new net in a cellview. If the net already exists, returns nil."


dbCreateParamInst(  ) => N/A

"Creates a parameterized cell instance (of cellview t_libName/t_cellName/t_viewName) in the cellview d_cellView with an origin and orientation specified by l_point and t_orient."


dbCreatePath( d_cellView tx_layer l_points x_width  	[t_pathStyle] ) 	=> d_path / nil   dbCreatePath( d_cellView (tx_layer [t_purpose] ) l_points  	x_width [t_pathStyle]  ) => d_path / nil

"Creates a path."


dbCreatePin( d_net d_fig [t_name]  ) => d_pin / nil

"Creates a pin for the net d_net with a figure d_fig."


dbCreatePolygon( d_cellView tx_layer l_points )  	=> d_polygon / nil   dbCreatePolygon( d_cellView (tx_layer [t_purpose] )  	l_points  ) => d_polygon / nil

"Creates a polygon."


dbCreateProp( g_object t_name t_propType g_value  ) => d_prop / nil

"Creates a scalar property for an object."


dbCreateRangeProp( g_object t_name t_propType g_value g_lBound g_uBound  ) => d_prop / nil

"Creates a range property for an object."


dbCreateRect( d_cellView tx_layer l_bBox )  	=> d_rect / nil   dbCreateRect( d_cellView (tx_layer [t_purpose] ) l_bBox  ) => d_rect / nil

"Creates a rectangle."


dbCreateSigNetExpr( d_sigId t_netExpression  ) => t/nil

"Given an inherited net expression in netExpression and a signal id in sigId, this function attaches the inherited net expression to the given signal and adds the signal to the set of signals having inherited net expressions."


dbCreateSimpleMosaic( d_cellView d_masterCellView t_name l_point t_orient x_rows x_cols x_rowSpacing x_colSpacing  ) => d_mosaic / nil

"Creates a simple mosaic in the cellview d_cellView from the master d_masterCellView."


dbCreateStrongGroup( l_pinList [s_groupConnection]  ) => t/nil

"Creates a new strong group containing the pins in l_pinList. The pins are removed from their current strong groups and added to the new strong group."


dbCreateTerm( d_net t_name t_direction  ) => d_term / nil

"Creates a terminal for a net."


dbCreateTermNetExpr(  ) => N/A

"Given an inherited net expression in netExpression and a term id, in termId, this function attaches the inherited net expression to the given terminal and adds the terminal to the set of terminals having inherited net expressions."


dbCreateTextDisplay( d_associateId d_ownerId tx_layer  	l_displayFlags l_point t_just t_orient t_font x_height  	[g_isDrafted [g_isOverbar [g_isVisable [g_isNameVisible  	[g_isValueVisible [t_attrOrParamName]]]]]] )  	=> d_textDisplay / nil   dbCreateTextDisplay( d_associateId d_ownerId (tx_layer  	[t_purpose] ) l_displayFlags l_point t_just t_orient  	t_font x_height [g_isDrafted [g_isOverbar [g_isVisable  	[g_isNameVisible [g_isValueVisible [t_attrOrParamName  	[g_isParamAssoc]]]]]]]  ) => d_textDisplay / nil

"Creates a text display object."


dbCreateUniqueNamedNet( d_cellView t_prefix x_numBits  ) => d_net / nil

"Creates a new net with a unique name."


dbDefineProc(  ) => N/A

"Changes the cellview specified by the d_cellView to be a parameterized cell. The specified file name should be the name of a file containing unencrypted Skill code defining procedure pcGenCell. The cellview should have a hierarchical property named parameters, which should be a hierarchical property list containing the default values for the parameters."


dbDeleteAllNet( d_cellView  ) => t / nil

"Deletes all nets from a cellview."


dbDeleteGroupByName( d_cellView t_name  ) => t / nil

"Deletes a group and its members from a cellview."


dbDeleteObject( d_object  ) => t / nil

"Deletes one of the following objects: shapes, nets, terminals, instance terminals, pins, instance pins, mosaics, instances, mosaic instances, properties, groups, and group members. Any other object type produces an error."


dbDeleteObjectFromGroup( d_group d_object  ) => t / nil

"Deletes an object from a group."


dbDeletePropByName( g_object t_name  ) => t / nil

"Deletes a property from an object."


dbDeleteSigNetExpr( d_sigId  ) => t/nil

"Given a signal id in sigId, this function deletes any existing inherited net expression associated with this signal and removes it from the set of inherited signals."


dbDeleteTermNetExpr( d_termId  ) => t/nil

"Given a terminal id in termId, this function deletes any existing inherited net expression associated with this terminal and removes it from the set of inherited terminals."


dbExpandToMemNameExpr( t_bundleName  ) => l_memNameExpr

"Expands a bundle name to a list of member-name-expression strings."


dbExternallyConnectPins( l_pinList  ) => t/nil

"Defines the pins in pinList as being externally connected to the other pins on the same terminal. The pins in pinList are strongly connected to each other, and externally connected to the other pins in pinList. This is a grouping operation. The pins are removed from their current strong groups and grouped together in a new strong group. If the pins in pinList belong to different terminals, each terminal is handled separately."


dbFindAnyInstByName( d_cellView t_name  ) => d_inst / nil

"Retrieves an instance or mosaic."


dbFindMemInstByName( d_cellView t_name  ) => (d_inst x_index) / nil

"Retrieves an instance or mosaic and returns its member index."


dbFindMosaicByName( d_cellViewId t_name ) => d_mosaicId/nil

"This function returns a mosaic Id if a mosaic with the given name is found in the cellview specified. Otherwise, nil is returned."


dbFindNetByName( d_cellView t_name  ) => d_net / nil

"Retrieves a net in a cellview."


dbFindOpenCellView( g_libId t_cellName t_viewName [t_version]  ) => d_cellViewId / nil

"Finds an opened cellview."


dbFindSigByAlias( d_cellView t_name  ) => d_sig / nil

"Finds a signal in a cellview by an alias."


dbFindSigByName( d_cellView t_name  ) => d_sig / nil

"Finds a signal in a cellview."


dbFindTermByName( d_cellView t_name  ) => d_term / nil

"Finds a terminal in a cellview."


dbFlattenInst( d_instId x_levels [g_flattenPCells] [g_preservePins]  ) => t/nil

"Flattens instance d_instId up through x_levels of hierarchy."


dbFullPath( d_cellView  ) => t_fullPath / nil

"Returns the full path of a cellview."


dbGetAnyInstSwitchMaster( d_anyInst t_viewList  ) => d_cellView / nil

"Switches into a different view of a master cell instance and opens the corresponding cellview."


dbGetAssociateTextDisplay( d_associateId d_ownerId  ) => d_textDisplay / nil

"Checks if a text display object exists for a given associate and owner."


dbGetCellViewDdId( d_dbCellViewId  ) => ddId_cellViewId / nil

"Returns a ddId associated with the cellViewId. This ddId contains the path to the library, cell, view, and file name."


dbGetCellViewInheritedSig( d_cellViewId  ) => l_sigId/nil

"Retrieves from the given cellview all signals to which inherited net expressions are attached."


dbGetCellViewInheritedTerm( d_cellViewId  ) => l_termId/nil

"Retrieves from the given cellview all terminals to which inherited net expressions are attached."


dbGetInstNameNumInst( t_name  ) => x_numInst / nil

"Retrieves the number of instances of an instance or mosaic"


dbGetMaxHierDepth(  ) => x_maxHierDepth

"Returns the dbcMaxHierDepth constant in SKILL."


dbGetMemName( t_name x_index  ) => t_memName

"Retrieves the name of the x_index member from t_name."


dbGetMemNetSig( ( d_net x_index ) )  	=> d_sig / nil   dbGetMemNetSig( d_net x_index  ) => d_sig / nil

"Retrieves the signal carried by bit number x_index of net d_net."


dbGetMemNetSigName( d_net x_index )  	=> t_name / nil   dbGetMemNetSigName( ( d_net x_index )  ) => t_name / nil

"Similar to dbGetMemNetSig, except it returns the name of the signal instead of the signal object."


dbGetNameNumBit( t_name  ) => x_numBit

"Parses a string and returns the number of bits in the net, terminal, or instance named."


dbGetNeighbor( d_cvId l_bBox t_direction [t_layer]  	[x_depth] ) 	=> d_figId / nil   dbGetNeighbor( d_cvId l_bBox t_direction  	[(t_layer [t_purpose])] [x_depth]  ) => d_figId / nil

"Returns the closest neighboring object in the specified direction of the given layer-purpose pair."


dbGetNeighborList( d_cellView l_area t_direction [t_layer]  	[lx_depth] )  	=> (l_instlist)   dbGetNeighborList( d_cellView l_area t_direction  	[( t_layer [t_purpose] )] [lx_depth]  ) => (l_instlist)

"Lists neighboring objects in the specified direction of the given layer-purpose pair."


dbGetOpenCellViews(  ) => (d_cv d_cv d_cv ...) / nil

"Returns all opened cellviews in virtual memory. Returns nil if no cellview is opened."


dbGetOverlaps( d_cellView l_bBox [xt_layer] [lx_level] )  	=> ld_fig   dbGetOverlaps( d_cellView l_bBox [xt_layer [xt_purpose]]  	[lx_level]  ) => ld_fig

"Returns a list of all the objects (such as, shapes, instances, and mosaics) in a cellview whose bounding boxes overlap the area specified by l_bBox. The overlap includes bounding boxes that are enclosed by, butt against, or intersect with l_bBox."


dbGetPinConnection( d_pin1 d_pin2  ) => dbcExternallyConnected/dbcWeaklyConnected/ 	dbcStronglyConnected/nil

"Given two pins, it returns a symbol representing the connectivity between two pins. The return value is one of the following:"


dbGetPropByName( g_object1 g_object2  ) => t / nil

"Copies all the properties of one database object to another database object."


dbGetSigNameMemNets( d_cellView t_sigName  ) => ( (t_netName x_index) ...) / nil

"Lists the member nets within the cellview that contain the signal."


dbGetSigNetExpr( d_sigId  ) => t_netExpression/nil

"Given a signal id in sigId, this function retrieves any inherited net expression found attached to the signal."


dbGetStrongGroups( d_object  ) => ~>name

"Returns the strong groups associated with the given database object, d_object. d_object can be a pin, a net, or a terminal. Each strong group is returned as a list of pins."


dbGetTermNetExpr( d_termId  ) => t_netExpression/nil

"Given a terminal id in termId, this function retrieves any inherited net expression found attached to the terminal."


dbGetTrueOverlaps( d_cellView l_bBox  [tx_layer | t | nil [lx_level]] )  => ld_fig | nil   dbGetTrueOverlaps( d_cellView l_bBox  	[tx_layer [tx_purpose [lx_level]]]  ) => ld_fig | nil

"Returns a list of all objects in a cellview that overlap the area specified by the specified bounding box."


dbHasExternalConnections( d_connectivityObject  ) => t/nil

"Reports if the given net or terminal has one or more pins that are externally connected. dbHasExternalConnections(connectivityObject) is equivalent to dbHasMustConnections(connectivityObject)."


dbHasMustConnections(  ) => N/A

".Reports ports if the given net or terminal has one or more pins that are must connected. dbHasMustConnections(anObject) is equivalent to dbHasExternalConnections(connectivityObject)."


dbIsAnyInstBaseNameUsed( d_cellView t_name  ) => t / nil

"Check if the name is used as instance basename in the cellview."


dbIsNetNameDescend( d_cellView  ) => t / nil

"Checks if the net name descend mode is set or not."


dbIsSameMaster( d_anyInst1 d_anyInst2  ) => t / nil

"Determines if two instances or mosaics are instantiated from the same cellview master."


dbIsSigInherited( d_sigId  ) => t/nil

"Given a signal id in sigId, this function checks if there is an inherited net expression attached to it."


dbIsSigNameGlobal( d_cellView t_name  ) => t / nil

"Tests if the signal t_name is a global signal."


dbIsTermInherited( d_termId  ) => t/nil

"Given a term id in termid, this function checks whether there is an inherited net expression attached to the given terminal."


dbIsValidSigNetExpr( t_netExpression  ) => t/nil

"Given an inherited net expression in the netExpression associated with a signal, this function checks whether its syntax is valid. This function does as much local checking as possible, but it does not detect whether the given default net name is global, nor whether the evaluation of the property results in a valid CDBA net name."


dbIsValidTermNetExpr( t_netExpression  ) => t/nil

"Given an inherited net expression in netExpression associated with a terminal, this function checks whether its syntax is valid. This function does as much local checking as possible, but it does not detect whether the given default net name is global nor whether the evaluation of the property results in a valid CDBA net name."


dbMakeNet( d_cellView t_name d_parentNet )  	=> d_net / nil   dbMakeNet( d_cellView t_name [nil]  ) => d_net / nil

"Creates a new net in a cellview. If the net already exists, it returns the dbObject of the net."


dbMergeNet( d_netId1 d_netId2  ) => dnetId1/nil

"Merges one netId2 into netId1. The pins, terminals, connections, figures, properties, and signals of the merging net (netId2) are merged into the surviving net (netId1), and member nets of netId2"


dbMergeProp( d_srcPropId g_dstObjId  ) => d_dstPropId

"Merges a property with a destination object without overwriting the property if it already exists."


dbMergeSingleProp( d_srcPropId g_dstObjId  ) => d_dstPropId

"Merges a property with a destination object without overwriting the property if it already exists."


dbMoveFig( d_fig d_cellView [l_transform]  ) => d_fig / nil

"Moves and transforms a figure and places it in a cellview."


dbMoveGroupMember( d_groupMem1 [d_groupMem2]  ) => t / nil

"Moves group member d_groupMem1 immediately after group member d_groupMem2."


dbOpenAutoSavedCellView( t_libName t_cellName lt_viewName [t_version]  ) => d_cellView / nil

"Reads the auto-saved file."


dbOpenCellViewByType( (gt_lib | nil) t_cellName lt_viewName [t_viewTypeName [t_mode [d_contextCellView]]]  ) => d_cellView / nil

"Opens a cellview."


dbOpenHier( d_cellView x_numLevels  ) => t

"Opens and binds masters of instances that constitute a design hierarchy."


dbOpenPanicCellView( gt_lib t_cellName t_viewName [t_version [t_mode [d_contextCellView]]]  ) => d_cellView / nil

"Opens the panic file for a cellview."


dbProduceMemName( t_name  ) => list(<memName> ... <memName>) / nil

"Returns a list of the member names for the given name."


dbProduceOverlap( d_cellView l_bBox [lx_level [tx_layer]] ) 	=> ld_shape / nil   dbProduceOverlap( d_cellView l_bBox  	[lx_level [tx_layer [t_purpose]]]  ) => ld_shape / nil

"Returns a list of all the shapes in a cellview whose bounding boxes overlap the area specified by l_bbox. This function interface is simpler than dbGetOverlaps if you are only interested in finding the overlapping shapes."


dbProduceOverlapInst( d_cellView l_bBox [lx_level]  ) => ld_inst / nil

"Returns a list of all the instances in a cellview that overlap the area specified by l_bBox. This function interface is simpler than dbGetOverlaps if you are only interested in finding instances."


dbPurge( d_cellView  ) => t / nil

"Forces a cellview to close and removes it from virtual memory."


dbRegPostSaveTrigger( S_triggerFunc [x_priority]  ) => t/nil

"Allows users to register a trigger function that is to be called after dbSave. If dbSave fails, this trigger will not be launched. This trigger will be called only after saving the db cellviews. The post save trigger will be called with the db cellview Id."


dbRegPurgeTrigger( S_triggerFunc [x_priority]  ) => t / nil

"Registers a user-defined trigger function."


dbReopen( d_cellView t_mode  ) => t / nil

"Changes the mode on an open cellview from read to append."


dbReplaceEnumProp( g_object t_name t_value l_string  ) => d_prop / nil

"Replaces an enumerated property for an object."


dbReplaceHierProp( g_object t_name  ) => d_prop / nil

"Replaces a hierarchical property for an object."


dbReplaceProp( g_object t_name t_propType g_value  ) => d_prop / nil

"Replaces a scalar property for an object."


dbReplacePropList( d_object l_params  ) => t / nil

"Replaces a list of properties of a given object with the specified list of properties."


dbReplaceRangeProp( g_object t_name t_propType g_value g_lBound g_uBound  ) => d_prop / nil

"Replaces a range property for an object."


dbReplaceSigNetExpr( d_sigId t_netExpression  ) => t/nil

"Given a signal id in sigId, this function replaces any existing inherited net expression already associated with the signal. If none exists, then the given netExpression is attached to the given signal and adds the signal to the set of signals having inherited net expressions."


dbReplaceTermNetExpr( d_termId t_netExpression  ) => t/nil

"Given a terminal id in termId, this function replaces any existing inherited net expression already associated with the terminal. If none exists, then the given netExpression is attached to the given terminal and adds the terminal to the set of terminals having inherited net expressions."


dbSave( d_cellView [d_destCellView]  	) => t / nil   dbSave( d_cellView [t_CellandView [d_contextCellView]]  	) => t / nil   dbSave( d_cellView [list(t_cell t_view) [d_contextCellView]]  	) => t / nil   dbSave( d_cellView [list(t_cell (t_view1 [t_view2 ] ... ))  	[d_contextCellView]] 	) => t / nil   dbSave( d_cellView [t_libName t_cellName t_viewName  	[t_version [d_contextCellView]]]  	 ) => t / nil

"Saves the results of a modified cellview that has been opened for write or append mode."


dbSearchPropByName( d_object t_name  ) => propId / nil

"Searches for the specified property. The function uses the following search rules:"


dbSetAutoSave( g_isAutoSaveSet [x_saveInterval]  ) => t / nil

"Enables or disables the automatic save feature."


dbSetInstHeaderMasterName( d_instHeader t_libName t_cellName t_viewName  ) => t / nil

"Changes the instance header"


dbSetNetNameDescend( d_cellView g_mode  ) => t / nil

"Sets a mode, descending or accending, which determines the direction of the net name vector expression."


dbSubFigFromNet(  ) => N/A

"The dbSetq equivalent of figure~>net = nil."


dbTransformBBox( l_point l_list  ) => l_bBox_new

"Transforms a bounding box."


dbTransformPoint( l_point l_list  ) => l_point / nil

"Transforms a coordinate pair."


dbUndefineProc(  ) => N/A

"Changes the parameterized cell  specified by the d_cellView to be a reqular cellview."


dbUnregPostSaveTrigger( S_triggerFunc  ) => t/nil

"Unregisters the post save trigger function from dbSave."


dbUnregPurgeTrigger( S_triggerFunc  ) => t / nil

"Unregisters a user-defined trigger function."


dbWriteSkill( d_cvId t_fileName t_mode t_release [g_conn] [g_ref]  ) => t / nil

"Creates a file that contains all the SKILL commands needed to recreate a cellview, so that the design can be recreated in the current or previous release by loading the file in the current or previous release, respectively."


debugQuit(  ) => nil

"Exits one level of the SKILL debugger."


debugStatus(  ) => nil

"Prints the functions and variables being traced, functions that have breakpoints set, and the functions being counted."


defCapDepends( s_context l_dependsList  ) => t

"Specifies which contexts depend on which other contexts."


defCapPrefixes( s_context l_prefixList  ) => t

"Specifies which prefixes are acceptable for a context"


defInitProc( t_contextName s_procName  ) => t

"Registers a function that the system calls immediately after autoloading a context."


defMathConstants( s_id ) => s_id

"Associates a set of predefined math constants as properties of the given symbol."


defUserInitProc( t_contextName s_procName  ) => (( t_contextName s_procName ))

"Registers a user-defined function that the system calls immediately after autoloading a context."


desVar( t_desVar1 f_value1 - [t_desVarN f_valueN] ) => undefined/nil

"Sets the values of design variables used in your design. You can set the values for as many design variables as you want."


envCyclicStringToIndex( t_tool[.Partition] t_varName t_cyclicString  ) => x_itemIndex

"Returns the index of the string for the given cyclic variable. This order is determined by the order of choices specified in the tool"


envGetAvailableTools(  ) => l_availableTools

"Allows users to know what tools are available to be loaded."


envGetDefVal( t_tool[.Partition] t_varName [s_varType]  ) => g_data

"Retrieves the registered default value for a variable. The tool will be faulted in if it is not already faulted in. "


envGetLoadedTools(  ) => l_loadedTools

"Allows users to know what tools have currently been loaded."


envGetModifiedTools(  ) => l_modToolList / nil

"Returns a list of all tools with modified variables."


envGetVal( t_tool[.Partition] t_varName [s_varType]  ) => g_data

"Retrieves the value for a variable. The tool will be faulted in if it is not already faulted in. "


envGetVarType( t_tool[.Partition] t_varName  ) => s_varType

"Returns the type of the variable specified. This query will cause the tool to be loaded, if it has not already been loaded. "


envIsToolModified( t_toolName  ) => t / nil

"Specifies if any of the variables for a specified tool have been modified."


envIsVal( t_tool[.Partition] t_varName [g_faultIn]  ) => t / nil

"Allows users to know if a particular variable has been loaded and exists for the given tool[.partition]."


envLoadFile( ?envFile t_fileName   ) => t / nil

"Specifies that a set of environment variables is to be loaded from a specified file. This function is equivalent to calling envLoadVals() with the ?tool argument set to ALL. All values loaded will be marked as modified."


envLoadVals( ?envFile t_fileName  [?tool t_toolName]   ) => t / nil

"Specifies that a set of environment variables is to be loaded from a specified file."


envOption( s_envOption1 g_value1 - [ s_envOptionN g_valueN ]  ) => undefined/nil

"Sets environment options."


envRegLoadDumpTrigger(  ) => N/A




envRegSetTrigger(  ) => N/A




envSetVal( t_tool[.Partition] t_varName s_varType  ) => g_newVal

"Sets a value in the setup database. The tool will be faulted in if it is not already faulted in. If a set trigger function is registered for this variable (see the  envRegSetTrigger function), it will be called after the set is done. This set trigger will be called with the variable that was set and the old and new values. "


envStoreEnv( [?envFile t_fileName]  [?tool t_toolName]  [?toolStatus t_toolStatus] [?fileStatus t_fileStatus]  ) => t / nil

" "


aedEditCDF( [?libName t_libraryName  [?cellName t_cellName] [?cdfType t_cdfType]   ) => g_dataId / nil

"Opens the CDF Editor to the library, cell, and CDF type specified by libName, cellName, and cdfType."


syActivateConstraint( d_constObjId  ) => t/nil

"Activates the specified alignment, separation, magnetic, wire-jog, or wire-width constraint."


syCompactView( d_inputCVId l_outputCVName [g_hierP] [t_logFileName] [g_appendMode]  ) => d_outputCVId/nil 

"Compacts symbolic objects to the smallest possible area while maintaining user-specified design rules and constraints. "


syCreateAlignmentConstraint( t_direction l_objectLists [?unrelaxable]  ) => d_constObjId/nil

"Instructs the compactor to align the edges of objects, the centerlines of objects, or layers within objects either horizontally or vertically. Each group of objects with edges to be aligned is called an alignment group."


syCreateFence( d_inputCVId l_layerPurposePair l_points g_rectOrNot  ) => d_fenceObjectId/nil

"Creates a fence. A fence is an area in which movement of objects during compaction is restricted. Objects enclosed by a hard fence are not compacted relative to each other but are compacted as an entity to objects outside the hard fence. Objects enclosed by a soft fence are compacted relative to each other and then are compacted as an entity to objects outside the soft fence."


syCreateJogConstraint( d_dbWireId l_point  ) => d_constObjId/nil

"Creates a point where the compactor can jog the wire during compaction."


syCreateMagneticConstraint( t_direction l_object1 l_object2 t_magneticType  ) => d_constObjId/nil

"Creates a magnetic constraint between two objects or layers within objects. You can set a magnetic constraint to pull two objects (or layers within objects) together or to push them apart during compaction. "


syCreatePathWidthConstraint(  ) => N/A

"This function has been replaced by the syCreateWireWidthConstraint function."


syCreateSeparationConstraint( t_direction l_object1 l_object2 l_minMaxSeparation [?unrelaxable] [?ignoreDRC]  ) => d_constObjId/nil

"Instructs the compactor to separate objects or layers within objects by a specified distance. You can separate two objects, an object and one edge of the cellview boundary, or two edges of the cellview boundary. "


syCreateWireWidthConstraint( d_dbWireId n_finalWidth  ) => d_constObjId/nil

"Creates a width constraint on the specified wire (path). The compactor will force the wire to be of this width. If a constraint is already present, this function overrides it. The syCreateWireWidthConstraint function is a replacement for the syCreatePathWidthConstraint function.."


syDRC( d_inputCVId d_runDir  ) => t/nil

"Checks for layer-to-layer spacing errors in the cellview and stores error data for subsequent error viewing. "


syDeactivateConstraint( d_constObjId  ) => t/nil

"Deactivates the specified alignment, separation, magnetic, wire-jog, or wire-width constraint."


syDeleteConstraint( d_constObjId  ) => t/nil

"Deletes the specified alignment, separation, magnetic, wire-jog, or wire-width constraint."


syERC( d_inputCVId d_runDir  ) => t/nil

"Checks for electrical rule errors in the cellview and stores error data for subsequent error viewing. "


syExtractView( d_inputCVId l_outputCVName [g_hierP] [t_logFileName] [g_appendMode]  ) => d_outputCVId/nil

"Checks input data and net connectivity of the input cellview and creates an output cellview with the errors (if any) highlighted."


syFrameView( d_srcCVId l_destCellView n_mergeFactor [g_fillCenter] [t_logFile] [g_appendMode]  ) => d_outputCVId/nil

"Creates a protection frame, or abstraction of a cellview, for placement at the next level of hierarchy to improve efficiency of the  compactor. The function fills areas between and merges geometries on the same layer to form either a single polygon or multiple polygons, depending on your specifications. In addition, you can specify for the function to fill an area in the center of the cellview that is the maximum design rule from the cell boundary and merge this area with the geometries formed by the first fill-and-merge operation."


syGeBackground(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Job Monitor menu command."


syGetAlignmentConstraint( d_cvId  [?object d_objId] [?direction s_direction]  ) => (d_constraintId ... )/nil

"Returns a list of database object IDs of alignment constraints in a given direction. If you specify ?object, the function returns alignment constraints on only that object; otherwise, the function returns all alignment constraints in the cellview. You can use the returned database object IDs as arguments for syReadAlignmentConstraint() to get detailed information about a constraint."


syGetAutoJog( d_CVId   ) => t/nil

"Returns the value set by sySetAutoJog."


syGetBottomAbutted( d_CVId  ) => t/nil

"Returns the value set by sySetBottomAbutted."


syGetDimensions( d_inputCVId  ) => l_dimensions/nil

"Returns the width, height, and area of the cellview."


syGetEnv( t_name  ) => g_value/nil

"Returns the value currently assigned to the compactor environment variable supplied in the t_name argument. "


syGetFixLowLeftBoundary( d_CVId  ) => t/nil

"Returns the value set by sySetFixLowLeftBoundary."


syGetForceChildCellCompact( d_CVId  ) => t/nil

"Returns the value set by sySetForceChildCellCompact."


syGetGeoOptions( d_CVId  ) => (x_stopLevel g_smashDevice t_mode)

"Returns the stop level, smash device flag, and conversion options set by sySetGeoOptions."


syGetHardCell( d_inputCVId  ) => t/nil

"Returns the value set by sySetHardCell."


syGetInitialDirection( d_CVId  ) => X/Y 

"Returns the initial direction of compaction for the cellview d_CVId set by sySetInitialDirection."


syGetLeftAbutted( d_CVId  ) => t/nil

"Returns the value set by sySetLeftAbutted."


syGetMagneticConstraint( d_cvId  [?object d_objId] [?direction s_direction]  ) => (d_constraintId ... )/nil

"Returns a list of database object IDs of magnetic constraints in a given direction. If ?object is specified, only magnetic constraints on the given object are returned; otherwise, all magnetic constraints in the given cellview are returned. You can use the returned object IDs as arguments for syReadMagneticConstraint() to get detailed information about a constraint."


syGetMaxAutoJogs( d_CVId  ) => n_value/nil

"Returns the value set by sySetMaxAutoJogs. "


syGetMaxIterations( d_CVId  ) => g_value

"Returns the value set by sySetMaxIterations."


syGetPFrame( d_CVId  ) => t_viewName/nil

"Returns the value set by sySetPFrame."


syGetPeelbackDistance( d_CVId  ) => n_distance

"Returns the value set by sySetPeelbackDistance."


syGetPostProcess( d_CVId  ) => t_WlmEnum/nil

"Returns the process set by sySetPostProcess. "


syGetPreserveCellRow( d_CVId  ) => t/nil

"Returns the value set by sySetPreserveCellRow."


syGetPreserveWireWidth( d_CVId  ) => t/nil

"Returns the value set by sySetPreserveWireWidth."


syGetRightAbutted( d_CVId  ) => t/nil

"Returns the value set by sySetRightAbutted."


syGetSeparationConstraint( d_cvId  [?object d_objId] [?direction s_direction]  ) => (d_constraintId ... )/nil

"Returns a list of database object IDs of separation constraints in the given direction. If you specify ?object, the function returns separation constraints on only that object; otherwise the function returns all separation constraints in the cellview. You can use the returned IDs as arguments for syReadSeparationConstraint() to get detailed information about each constraint."


syGetTopAbutted( d_CVId  ) => t/nil

"Returns the value set by sySetTopAbutted."


syGetUseChildBdy( d_CVId  ) => t/nil

"Returns the value set by sySetUseChildBdy."


syGetUserConstraint( d_cvId  [?object d_objId] [?direction s_direction]  ) => ((s_type (d_constraintId ...)) ... )/nil

"Returns a list of the database object IDs of all wire-width, wire-jog, alignment, magnetic, and separation constraints in the given direction. If ?object is specified, only constraints on that object are returned; otherwise, all constraints in the specified cellview are returned. You can use these database object IDs to delete, activate, or deactivate the constraints or to obtain detailed information about the constraints using the appropriate syReadConstraint( ) function for the constraint type."


syGetWireJogConstraint( d_cvId  [?object d_objId] [?direction s_direction]  ) => (d_jogId ... )/nil

"Returns a list of the database object IDs of wire-jog constraints in the direction you specify. If you specify ?object, the function returns wire-jog constraints on only that object; otherwise, the function returns all wire-jog constraints in the cellview. You can use the returned database object IDs as arguments for syReadWireJogConstraint() to get detailed information about the constraints."


syGetWireWidthConstraint( d_cvId  [?object d_objId] [?direction s_direction]  ) => (d_constraintId ... )/nil

"Returns a list of database object IDs of wire-width constraints in the given direction. If you specify ?object, the function returns wire-width constraints on only this object; otherwise the function returns all wire-width constraints in the cellview. You can use the returned database object IDs as arguments for syReadWireWidthConstraint() to get detailed information about each constraint."


syGetXAnchorBoundary( d_CVId  ) => t/nil

"Returns the value set by sySetXAnchorBoundary."


syGetXPinGrid( d_CVId  ) => f_gridValue/nil

"Returns the value set by sySetXPinGrid."


syGetXPinGridOffset( d_CVId   ) => f_gridOffsetValue/nil

"Returns the value set by sySetXPinGridOffset."


syGetYAnchorBoundary( d_CVId  ) => t/nil

"Returns the value set by sySetYAnchorBoundary."


syGetYPinGrid( d_CVId  ) => f_gridValue/nil

"Returns the value set by sySetYPinGrid."


syGetYPinGridOffset( d_CVId   ) => f_gridOffsetValue/nil

"Returns the value set by sySetYPinGridOffset."


syMenuAlignCreate(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Alignment - Create menu command."


syMenuAlignEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Alignment - Edit menu command."


syMenuAutoJog(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Inhibit Auto Jog menu command."


syMenuCompact(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Compact menu command."


syMenuCompareCellView(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Compare Cell Views menu command."


syMenuConstrGrp(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Constraint Groups menu command."


syMenuConvertToGeometric(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Convert to Geometric menu command."


syMenuCritPath(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Critical Path menu command."


syMenuCrossProbe(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Show - Cross Probe - Add menu command."


syMenuExplain(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Show - Symbolic Errors and the Virtuoso XL compactor Show - Data Errors menu commands."


syMenuExtract(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Extract menu command."


syMenuFenceCreate(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Fence - Create menu command."


syMenuFenceEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Fence - Edit menu command."


syMenuFrame(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Create Protection Frame menu command."


syMenuHardCell(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Hard Cell menu command."


syMenuJogCreate(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Wire Jog - Create menu command."


syMenuJogEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Wire Jog - Edit menu command."


syMenuMagCreate(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Magnetic - Create menu command."


syMenuMagEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Magnetic - Edit menu command."


syMenuObjEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Object Constraints menu command."


syMenuOverconst(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Overconstraints menu command."


syMenuReInitProbe(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Show - Cross Probe - Reinitialize menu command."


syMenuRecompact(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Recompact menu command."


syMenuReferenceCell(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Reference - Reference Cell menu command."


syMenuReferenceEdge(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Reference - Reference Edge menu command."


syMenuSepCreate(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Separation - Create menu command."


syMenuSepEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Separation - Edit menu command."


syMenuShowCellSize( t ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Cell Dimensions menu command."


syMenuShowFixIO(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Relaxed Fixed IO menu command."


syMenuShowPG(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Relaxed Pin Grid menu command."


syMenuShowRelaxed(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Relaxed Constraints menu command."


syMenuSwitchView(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Show - Switch View menu command."


syMenuWWidthCreate(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Wire Width - Create menu command."


syMenuWWidthEdit(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor and the Virtuoso XL compactor Constraints - Wire Width - Edit menu command."


syReadAlignmentConstraint( d_constraint  ) => (l_attribList)

"Returns a list of the attributes of a given alignment constraint. You can extract information from the list with the assoc() function."


syReadMagneticConstraint( d_constraint  ) => (l_attribList)

"Returns a list of the attributes of a given magnetic constraint. You can extract information from the list with the assoc( ) function."


syReadSeparationConstraint( d_constraint  ) => (l_attribList)

"Returns a list of the attributes of a given separation constraint. You can extract information from the list with the assoc() function."


syReadWireJogConstraint( d_constraint  ) => (l_attribList)

"Returns a list of the attributes of a wire-jog constraint. You can extract information from the list with the assoc() function."


syReadWireWidthConstraint( d_constraintId  ) => (l_attribList)

"Returns a list of wire-width constraint attributes. You can extract information from the list with the assoc() function."


syRefCellConstraint( d_srcCvId d_destCvId  ) => t/nil

"Matches pins, wells, and cell heights or widths for two cells by setting constraints on the destination cell. The constraints are set so that the cell dimensions and the pin and well locations on all four edges of the cell boundary match those of the source cell after compaction. "


syRefEdgeConstraint( l_srcEdge l_destEdge  ) => t/nil

"Matches pins, well, and cell heights or widths on two cells by setting constraints on one of the cells (the slave cell) so that the spacing between the pins, wells, and both corners of the cell will match that of the other cell (the master cell) after compaction. "


syRemoveProbes(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Show - Cross Probe - Delete menu command."


sySetAutoJog( d_CVId  g_yesOrNo  ) => t/nil

"Allows or inhibits automatic jog insertion for the specified cellview. "


sySetAutoJogByLayer( d_cvId g_layer g_yesOrNo  ) => t/nil

"Allows or inhibits automatic jog insertion for the wires on the specified layer."


sySetAutoJogByNet( d_netId  g_yesOrNo  ) => t/nil

"Allows or inhibits automatic jog insertion for the specified net. "


sySetAutoJogByWire( d_wireId  g_yesOrNo  ) => t/nil

"Allows or inhibits automatic jog insertion for the specified wire. "


sySetBottomAbutted( d_CVId g_yesOrNo  ) => t/nil

"Sets the bottom edge of the cell for abutment."


sySetEnv( t_name  g_value  ) => t/nil

"Sets the compactor environment variable supplied in the t_name argument to the value supplied in the g_value argument. "


sySetFixLowLeftBoundary( d_CVId  g_value  ) => t/nil

"Specifies whether to use the lower-left corner coordinates of the source cellview as the lower-left corner coordinates of the compacted cellview. Otherwise, the compactor moves the lower-left corner of the compacted cellview to (0,0)."


sySetForceChildCellCompact( d_CVId  g_value  ) => t/nil

"Specifies whether the compactor should compact all child cells during hierarchical compaction. During hierarchical compaction, the compactor normally compacts only those child cells not previously compacted."


sySetGeoOptions( d_CVId x_stopLevel  g_smashDevice  t_mode  ) => t/nil

"Sets the stop level, smash device flag, and conversion options for sySymToPoly."


sySetHardCell( d_inputCVId  g_yesOrNo  ) => t/nil 

"Controls whether hierarchical compaction compacts a specified cell and its subcells."


sySetInitialDirection( d_CVId  t_XOrY  ) => t/nil 

"Sets the initial direction of compaction."


sySetLeftAbutted( d_CVId g_yesOrNo  ) => t/nil

"Sets the left edge of the cell for abutment."


sySetMaxAutoJogs( d_CVId  n_value  ) => t/nil

"Sets the maximum number of jogs that the compactor can add automatically to any one wire. "


sySetMaxIterations( d_CVId  n_maxIter [n_minChange]  ) => t/nil

"Sets the maximum number of iterations executed by the compactor. Optionally sets the percentage of area the cellview must decrease with each iteration to continue compaction. Compaction stops when either termination criterion is met."


sySetPFrame( d_CVId  t_viewName  ) => t/nil

"Sets the view name for the protection frames to be used for all child cells of a cellview to be compacted."


sySetPeelbackDistance( d_CVId  n_distance  ) => t/nil

"Sets the maximum length of an unconnected segment you want deleted. Any unconnected wire segment with a length less than or equal to n_distance is deleted. "


sySetPostProcess( d_CVId  t_WlmEnum  ) => t/nil

"Specifies whether the compactor should minimize total wire length during compaction. If you turn off wire-length minimization, you can change the default compaction direction. "


sySetPreserveCellRow( d_CVId g_yesOrNo  ) => t/nil

"Specifies whether the compactor must preserve the structure of cell rows."


sySetPreservePathWidth(  ) => N/A

"This function has been replaced by the sySetPreserveWireWidth function."


sySetPreserveWireWidth( d_CVId g_yesOrNo  ) => t/nil

"Specifies whether the compactor must preserve the wire (path) width specified when the wire was drawn. The sySetPreserveWireWidth function is a replacement for the sySetPreservePathWidth function."


sySetRightAbutted( d_CVId g_yesOrNo  ) => t/nil

"Sets the right edge of the cell for abutment."


sySetTopAbutted( d_CVId g_yesOrNo  ) => t/nil

"Sets the top edge of the cell for abutment."


sySetUseChildBdy( d_CVId  g_yesOrNo  ) => t/nil

"Specifies whether the boundaries of all child cells with boundaries are used as abstractions during compaction."


sySetXAnchorBoundary( d_CVId  g_yesOrNo  ) => t/nil

"Specifies whether the compactor can move the pin locations on horizontal cell boundary edges."


sySetXPinGrid( d_CVId  f_gridValue  ) => t/nil

"Sets the X spacing of the grid used for placement of pins. The compactor places pins so that the lower-left corner of each pin region (that is, connection region) has an X coordinate that is an exact multiple of the value f_gridValue."


sySetXPinGridOffset( d_CVId  f_gridOffsetValue  ) => t/nil

"Sets the offset for the horizontal spacing of the grid used for placement of pins. To set the subsequent spacing, use sySetXPinGrid."


sySetYAnchorBoundary( d_CVId  g_yesOrNo  ) => t/nil

"Specifies whether the compactor can move the pin locations on vertical cell boundary edges."


sySetYFirst( d_CVId  g_yesOrNo  ) => t/nil

"Specifies whether the compactor compacts the specified cellview in the Y direction first or in the X direction first."


sySetYPinGrid( d_CVId  f_gridValue  ) => t/nil

"Sets the Y spacing of the grid you want used for placement of pins. The compactor places pins such that the lower-left corner of each pin region (that is, connection region) has a Y coordinate that is an exact multiple of the value f_gridValue."


sySetYPinGridOffset( d_CVId  f_gridOffsetValue  ) => t/nil

"Sets the offset for the vertical spacing of the grid used for placement of pins. To set the subsequent spacing, use sySetYPinGrid."


sySymToGeo( d_inputCVId l_outputCVName  ) => d_outputCVId/nil

"Converts a symbolic layout to a polygon layout. The sySymToGeo function is a replacement for the sySymToPolygon function."


sySymToPolygon(  ) => N/A

"This function has been replaced by the sySymToGeo function."


syUserAllDel( d_CVId  ) => t/nil

"Deletes all user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire width, and wire jog constraints."


syUserAllOff( d_CVId  ) => t/nil

"Deactivates all user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllOn( d_CVId  ) => t/nil

"Activates all user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllXDel( d_CVId  ) => t/nil

"Deletes all horizontal user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllXOff( d_CVId  ) => t/nil

"Deactivates all horizontal user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllXOn( d_CVId  ) => t/nil

"Activates all horizontal user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllYDel( d_CVId  ) => t/nil

"Deletes all vertical user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllYOff( d_CVId  ) => t/nil

"Deactivates all vertical user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


syUserAllYOn( d_CVId  ) => t/nil

"Activates all vertical user constraints in the specified cellview. These constraints include alignment, separation, magnetic, wire-width, and wire-jog constraints."


symckClearDisplay(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Clear Display and Status and Post Compact - Symbolic ERC - Clear Display and Status menu commands."


symckDRCSetUp(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Set Up menu command."


symckDisplayOptions(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Display Options and Post Compact - Symbolic ERC - Display Options menu commands."


symckERCSetUp(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic ERC - Set Up menu command."


symckExplain(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Explain and Post Compact - Symbolic ERC - Explain menu commands."


symckFitCurrent(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Fit Current Error and Post Compact - Symbolic ERC - Fit Current Error menu commands."


symckFitNext(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Fit Next Error and Post Compact - Symbolic ERC - Fit Next Error menu commands."


symckFitVisible(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Fit Visible Errors and Post Compact - Symbolic ERC - Fit Visible Errors menu commands."


symckReset(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Reset Errors and Post Compact - Symbolic ERC - Reset Errors menu commands."


symckRunDRC(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Run DRC menu command."


symckRunERC(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic ERC - Run ERC menu command."


symckStatus(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Error Status and Post Compact - Symbolic ERC - Error Status menu commands."


symckView(  ) => N/A

"This function is equivalent to the Virtuoso layout editor compactor Post Compact - Symbolic DRC - Select Error Types and Post Compact - Symbolic ERC - Select Error Types menu commands."


prnDetailRouteCompacted( d_cv  lt_options  ) => t/nil

"Detail routes a design, based on parameters you specify."


prnDetailUnroute( d_cv  ) => t/nil

"Removes all detail routing from all channels, but preserves all global routing information. The channel cellviews remain in the design library."


prnExplodeChannels( d_cv  ) => t/nil

"Moves the routing data from each of the channel cellviews up into the design cellview. This is a necessary prerequisite to symbolic compaction."


prnSetCRT( x_layers x_multiBoundary  ) => t/nil

"Controls the routing area used by the Cell Ensemble triple-layer metal (TLM) router. Set this function before you detail route a TLM design with prnDetailRouteCompacted to get the best routing results based on channel profiles."


prnStripChan(  ) => N/A

"Prepares a design for use in a higher level design; removes the outer channels and their wiring and IO pins that are no longer needed, and adds pins at the top level as necessary to connect to the core cells."


prnUnrouteChannel( d_chanInst   ) => t/nil

"Removes all detail routing starting from the specified channel and all adjacent channels upward through the channel hierarchy, while preserving all global routing information. To reroute the design, use the prnDetailRouteCompacted function."


dlAddArc( w_dlist  x_penNumber  l_point1  l_point2  n_startAngle  n_sweepAngle [s_tagSymbol]  ) => t / nil

"Adds an arc to the display list."


dlAddBox( w_dlist  x_penNumber  l_point1  l_point2  [s_tagSymbol]  ) => t / nil

"Adds a box to the display list."


dlAddCircle( w_dlist  x_penNumber  l_point x_radius  [s_tagSymbol]  ) => t / nil

"Adds a circle to the display list."


dlAddDonut( w_dlist  x_penNumber  l_point  x_innerRadius  x_outerRadius [s_tagSymbol]  ) => t / nil

"Adds a donut to the display list."


dlAddEventObject( w_dlist  l_point1  l_point2  t_procName  t_procArgs [t_highlightMode] [g_doesGraphics] [s_tagSymbol]  ) => t / nil

"Adds an EventObject to the display list. EventObjects are SKILL procedures called whenever the user presses a mouse button or a keyboard key. If the s_doesGraphics argument is t, the EventObject is called whenever the display list is drawn."


dlAddPath( w_dlist  x_penNumber  x_pathWidth  t_pathEndType  l_pointsList [s_tagSymbol]  ) => t / nil

"Adds a path to the display list."


dlAddPoint( w_dlist  x_penNumber  l_point  [s_tagSymbol]  ) => t / nil

"Adds a point to the display list."


dlAddPolygon( w_dlist  x_penNumber  l_pointsList [s_tagSymbol]  ) => t / nil

"Adds a polygon to the display list."


dlAddRasterText( w_dlist  x_penNumber  l_point  t_text  t_fontName  [t_verticalJustify]  [t_horizontalJustify] [s_tagSymbol]  ) => t / nil

"Adds a text string to the display list."


dlAddSegment( w_dlist  x_penNumber  l_point1  l_point2  [s_tagSymbol]  ) => t / nil

"Adds a line segment to the display list."


dlAddSkillObject( w_dlist  x_penNumber  l_point1  l_point2  t_procName  t_procArgs [s_tagSymbol]  ) => t / nil

"Adds a SkillObject to the display list. SkillObjects are SKILL procedures called whenever the object should be drawn."


dlAddStrokeText( w_dlist  x_penNumber  l_point  t_text  t_justification  t_fontName  x_height  [t_orientation] [g_drafting] [s_tagSymbol]  ) => t / nil

"Adds a stroke text string to the display list."


dlAttachDlistToWidget( w_displayList  x_widgetId  ) => x_widgetId / nil

"Attaches a display list to a widget."


dlAttachDlistToWindow( w_displayList  w_windowId   ) => t / nil

"Attaches a display list to the window defined by w_windowId. This function can be used to preview a display list."


dlClearDisplayList( w_displayList  ) => t / nil

"Removes all the objects from a display list."


dlCloseWidget( x_widgetId   ) => t / nil

"Closes (destroys) a widget."


dlConfigureButton( x_button x_xPosition x_yPosition x_width x_height  ) => t / nil

"Moves a button to another location. Both the x and y position are specified in X Window System coordinates, where 0:0 is the upper left corner of the screen."


dlDetachDlistFromWidget( w_displayList  x_widgetId  ) => t / nil

"Detaches a display list from a widget."


dlDetachDlistFromWindow( w_displayList  w_windowId   ) => t / nil

"Detaches a display list (w_displayList) from the window defined by w_windowId."


dlDisplay( w_displayList   ) => t / nil

"Redraws the display list (w_displayList) in all the windows and buttons it is currently attached to."


dlDlistToIcon( w_displayList  x_width  x_height  [x_backColorIndex]   ) => l_iconId / nil

"Converts a displayList to an icon."


dlDrawArc( l_point1  l_point2  f_startAngle  f_sweepAngle  ) => t / nil

"Draws an arc to the screen from within a SkillObject procedure."


dlDrawBox( l_point1  l_point2   ) => t / nil

"Draws a box to the screen from within a SkillObject procedure."


dlDrawCircle( l_point  x_radius   ) => t / nil

"Draws a circle to the screen from within a SkillObject procedure."


dlDrawDonut( l_point  x_innerRadius  x_outerRadius  ) => t / nil

"Draws a donut to the screen from within a SkillObject procedure."


dlDrawPath( x_pathWidth  t_pathEndType  l_pointsList  ) => t / nil

"Draws a path to the screen from within a SkillObject procedure. A path is specified by a center line and a width."


dlDrawPoint( l_point   ) => t / nil

"Draws a point to the screen from within a SkillObject procedure."


dlDrawPolygon( l_pointsList  ) => t / nil

"Draws a polygon to the screen from within a SkillObject procedure."


dlDrawRasterText( l_point  t_text  t_fontName  [t_verticalJustify]  [t_horizontalJustify]  ) => t / nil

"Draws a text string to the screen from within a SkillObject. The text is drawn using an X Window System font."


dlDrawSegment( l_point1  l_point2   ) => t / nil

"Draws a line segment to the screen from within a SkillObject procedure."


dlDrawStrokeText( l_point  t_text  t_justification  t_fontName  x_height  t_orientation  ) => t / nil

"Draws a stroke text string to the screen from within a SkillObject procedure. The height (and therefore scale) can be specified."


dlEnableItem( w_dlist  x_penNumber  s_symbolTag  g_enableOrDisable   ) => t / nil

"Allows you to turn on or off shapes within a display list that match the provided symbol. All shapes on pen x_penNumber are searched and checked to see if the symbolTag matches."


dlFitDlistOnDraw( w_displayList x_widgetId g_doFit   ) => t / nil

"Specifies whether a display list should automatically fit within the specified widget."


dlMakeDisplayList(  ) => w_displayList / nil 

"Creates an empty display list you can add objects to."


dlMakeDlistButton( x_parentWidgetId x_xPosition x_yPosition x_width x_height w_displayList t_pressCallback [x_backgroundColor]  ) => t / nil

"Creates a button to display a display list in. The display list button is a rectangular region with a widget or window in which a display list is drawn and which dispatches a callback whenever the left mouse button is pressed within it."


dlMakePenTable( [x_maxPens]   ) => w_penTable / nil

"Creates a pen table a display list can use."


dlMakeStipple( t_StippleString   ) => x_stippleId / nil

"Creates a stipple pattern from the supplied string."


dlMakeWidget( [x_backgroundColor]  [l_point1] [l_point2]  ) => x_widgetId / nil

"Creates a general purpose window (or widget). Uses of this widget can be for fixed menus or graphic display panels. Both points are specified in X Window System coordinates, where 0:0 is the upper-left corner of the screen."


dlMapWidget( x_widgetId   ) => t / nil

"Puts a widget back on the screen after a call to dlUnMapWidget. This function also applies to buttons."


dlMoveButton( x_button x_xPosition x_yPosition  ) => t / nil

"Moves a button to another location. Both the x and y position are specified in X Window System coordinates, where 0:0 is the upper-left corner of the screen."


dlResizeButton( x_button x_width x_height  ) => t / nil

"Resizes a button."


dlSaveDlist( w_displayList  t_fileName  t_dlistName  ) => t / nil

"Saves the display list."


dlSetClearOnDraw( w_dlist x_widgetId g_draw  ) => t/nil

"Specifies whether the area the display list is drawn in is cleared before the display list is drawn."


dlSetCurrentPen( x_penNumber  ) => t / nil

"Sets the specified pen number to the current pen. Changes the pen number objects are drawn with from within a SkillObject procedure. This function should only be called from within a SkillObject procedure."


dlSetDlistPosition( w_displayList x_widgetId x_xOffset x_yOffset   ) => t / nil

"Specifies the scale factor to map from display list coordinates to screen coordinates. The offsets only have effect if auto-fitting was turned off (via dfIIFitDlistOnDraw)."


dlSetDlistScale( w_displayList x_widgetId f_scale   ) => t / nil

"Specifies the scale factor to map from display list coordinates to screen coordinates. This scale factor only has effect if auto-fitting was turned off (using dfIIFitDlistOnDraw)."


dlSetPenColor( x_penNumber  x_colorIndex  [w_penTable]  ) => t / nil

"Changes the specified pen to the specified color index from the pen table."


dlSetPenFillStyle( x_penNumber  t_fillStyle  [w_penTable]   ) => t / nil

"Sets the fill style of a pen."


dlSetPenStipple( x_penNumber  x_stippleId  [w_penTable]   ) => t / nil

"Sets the stipple pattern for a pen."


dlSetPenTable( w_displayList  w_penTableOrDisplayList   ) => t / nil

"Sets the pen table a display list will use."


dlSetWidgetName( x_widgetId  t_name  ) => t / nil

"Sets the text displayed by the window manager banner."


dlUnMapWidget( x_widgetId   ) => t / nil

"Removes the widget from the screen, but does not destroy it. This function also applies to buttons."


hiAbout( w_windowId  ) => t /nil

"Displays the application"


hiAbsolutePan( [w_window]  [n_%x]  [n_%y]   ) => t / nil

"Scrolls a window in any direction by specifying the amount to pan as a percentage of the window size."


hiAddCyclicChoice( r_form  s_cyclicField  g_newChoice   ) => t / nil

"Adds newChoice to the end of the list of choices in the cyclic field in the form."


hiAddField( r_form  g_fieldDescription  [i_fieldAttachment]  ) => t / nil

"Adds a field to a form. The form must already exist, and the field must have been created with one of the field creation routines."


hiAddFields( r_form  l_fieldDescriptions  [l_fieldAttachments]  ) => t / nil

"Adds fields to a form. The form must already exist, and the fields must have been created with one of the field creation routines."


hiAddFixedMenu( [?window w_window]  ?fixedMenu r_fixMenu  [?menuSide s_menuSide]   ) => t / nil

"Adds or replaces a fixed menu on a window."


hiAddMenuItem( r_hiMenu  r_menuItem  ) => t / nil

"Adds the menuItem to the end of all instances of the specified hiMenu."


hiAppendInputCmd( w_window  t_cmd   ) => t / nil

"Appends a command to the input area of an encapsulation window."


hiChangeBannerLabel( w_windowId  t_bannerLabel  x_labelPosition   ) => t / nil

"Overwrites or adds a banner label in a window."


hiChangeFormCallback( r_form g_newCallback  ) => t

"Changes the doneAction and/or the cancelAction of the specified form to the SKILL callback procedure defined by newCallback. newCallback can be a symbol, a string, or a list of two symbols/strings. The first callback will be taken as the doneAction. The second callback will be taken as the cancelAction. After this routine is called, if the OK or Apply button of the form is pressed, the doneAction is executed, and if the Cancel button is pressed, the cancelAction is executed."


hiChangeFormTitle( r_form  t_newTitle  ) => t / nil

"Changes the window manager title of the specified form to newTitle. "


hiCloseWindow( w_windowId   ) => t / nil

"Closes and deletes a window."


hiCreate2DMenu( s_menuHandle t_menuName l_menuItems  ) => r_hiMenu

"Returns an internal data structure describing a two dimensional menu object. Once this menu is created, you can display it with hiDisplayMenu."


hiCreateAppForm( ?name s_name  ?fields l_fieldEntries  [?attachmentList l_fieldAttachments] [?tabOrderIsAddOrder g_tabOrderIsAddOrder] [?formTitle t_formTitle]  [?callback g_callback] [?unmapAfterCB g_unmapAfterCB]  [?formType s_formType]  [?dialogStyle s_dialogStyle] [?buttonLayout g_buttonLayout]  [?buttonDisabled s_buttonDisabled] [?help g_help]  [?initialSize g_initialSize] [?minSize g_minSize [?maxSize g_maxSize [?dontBlock g_dontBlock] [?fieldFocus s_fieldFocus]  ) => r_form

"Returns the SKILL representation of a form with the specified field entries, setting it to the specified name. All standard forms, from simple forms to property lists, are generated using hiCreateAppForm, with varying field entries. Use this function rather than hiCreateForm, which does not provide as much functionality."


hiCreateBBoxField( ?name s_fieldName  [prompt t_fieldPrompt]  [?value l_currentValue] [?help g_fieldHelp]  [?defValue l_defaultValue]  [?font t_font]  [?callback t_callback]  [?modifyCallback t_modifyCallback] [?editable g_editable]  [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates a bounding box field for a form. "


hiCreateBooleanButton( ?name s_fieldName  ?buttonText t_buttonText [?callback t_callback] [?value g_booleanValue] [?defValue g_defaultValue] [?help g_fieldHelp]  [?font t_font]  [?enabled g_enabled]  ) => r_fieldHandle

"For efficiency, boolean buttons should always be used in preference to single toggle buttons. "


hiCreateButton( ?name s_fieldName  ?buttonText t_buttonText  ?callback t_callback  [?buttonIcon l_buttonIcon]  [?help g_fieldHelp]  [?font t_font]  [?enabled g_enabled]  ) => r_fieldHandle

"Creates a standalone push button for a form or two-dimensional menu. The button must have an associated callback procedure to be executed when the button is selected. A button only field differs from a button box field in that there is no prompt associated with this button. "


hiCreateButtonBoxField( ?name s_fieldName  ?choices l_buttonText  ?callback l_callbackList  ?prompt t_fieldPrompt [?help g_fieldHelp]  [?font t_font]  [?enabled g_enabled]  ) => r_fieldHandle

"Creates a button box field for a form. A button box field contains individual buttons to be displayed in one row. Each button in the button box will have an associated callback procedure that is executed when that button is selected. A prompt is displayed on this row as well. "


hiCreateColorArray(  ) => a_iconColorArray

"Returns a 27-element color array that can be used in a call to hiStringToIcon. The first 26 items correspond to the letters in the alphabet; the 27th item corresponds to `."


hiCreateCyclicField( ?name s_fieldName  ?choices l_enumerations  ?prompt t_fieldPrompt  [?value g_currentValue]  [?defValue g_defaultValue]  [?callback t_callback]  [?help g_fieldHelp]  [?font t_font] [?enabled g_enabled]  ) => r_fieldHandle

"Creates a cyclic field for a form. A cyclic field contains a list of string or iconic enumerations. Only one item may be chosen at a time. Using the mouse, the user displays all cyclic choices in pulldown menu form. Once the user has brought up this cyclic choice menu, a selection may be made from it. "


hiCreateFloatField( ?name s_fieldName  [?value f_currentValue] [?acceptNil g_acceptNil] [?prompt t_fieldPrompt]  [?defValue f_defaultValue]  [?help g_fieldHelp]  [?font t_font]  [?callback t_callback]  [?modifyCallback t_modifyCallback] [?range l_fieldRange]  [?format t_fieldFormat]  [?editable g_editable]  [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates a float field for a form. A float field is a field which accepts floating-point input only. A format string can be specified which will automatically be imposed on any user input. An optional range can be specified and enforced for this field as well."


hiCreateForm( s_formHandle  t_formName  g_formAction  l_fieldEntries  t_formHelp [g_unmapAfterCB]   ) => r_form

"hiCreateForm is now just a wrapper function to hiCreateAppForm. Forms, from simple forms to property lists, are generated using hiCreate{App}Form, with varying field entries."


hiCreateFrameField( ?name s_fieldName  [?labelText t_labelText] [?enabled g_enabled]  ) => r_fieldHandle

"Creates a frame field for a two-dimensional form. A frame field is a border that surrounds a group of related fields so they are easier to see."


hiCreateHorizontalFixedMenu( s_menuHandle  l_menuItems  x_rows  x_cols   ) => r_hiMenu

"Returns an internal data structure that describes a horizontal fixed menu object. The fixed menu is created as a grid of row x column dimensions, and contains menu item objects created by hiCreateMenuItem. An additional Done item is added as the last item. Selecting this Done menu item will remove the fixed menu from the screen."


hiCreateIntField( ?name s_fieldName  [?prompt t_fieldPrompt]  [?value x_currentValue] [?acceptNil g_acceptNil] [?help g_fieldHelp]  [?defValue x_defaultValue]  [?font t_font]  [?callback t_callback]  [?modifyCallback t_modifyCallback] [?format t_fieldFormat]  [?range l_fieldRange]  [?editable g_editable]  [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates an integer field entry for a form. An int field is a field that accepts integer input only. A format string can be specified which will automatically be imposed on any user input. An optional range can be specified and enforced for this field as well."


hiCreateLabel( ?name s_fieldName  ?labelText t_labelText  [?justification s_justification]  [?font t_font]  [?enabled g_enabled] [?help g_fieldHelp]  ) => r_fieldHandle

"Creates a standalone label entry for a form or two-dimensional menu. A labelOnly field contains a descriptive label. This field can provide additional features to a form or two-dimensional menu."


hiCreateLayerCyclicField( d_techFileId  t_fieldPrompt  t_callback  l_layers  [l_LPpair]  ) => r_fieldHandle

"Creates a cyclic field entry containing iconic representations of specified layers for a form. "


hiCreateListBoxField( ?name s_fieldName [?prompt t_prompt] ?choices l_listItems [?value l_selectedItem]  [?defValue l_defSelectedItem]  [?callback t_callback] [?changeCB t_changeCB] [?numRows x_numRows] [?multipleSelect g_multipleSelect] [?doubleClickCB t_doubleClickCB] [?CBOnReselect g_CBOnReselect] [?keepHistory g_keepHistory] [?enabled g_enabled] [?help g_fieldHelp]  ) => r_fieldHandle

"Creates a list box field for a form. "


hiCreateListField( ?name s_fieldName  [?value l_currentValue] [?help g_fieldHelp]  [?prompt t_fieldPrompt]  [?defValue l_defaultValue]  [?font t_font]  [?callback t_callback]  [?modifyCallback t_modifyCallback] [?editable g_editable] [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates a list field entry for a form. A list field accepts a valid SKILL expression as input. SKILL"


hiCreateMLTextField( ?name s_fieldName  [?prompt t_prompt]  [?value t_value]  [?defValue t_defaultValue]  [?font t_font]  [?hasVerticalScrollbar g_hasVerticalScrollbar] [?hasHorizontalScrollbar g_hasHorizontalScrollbar] [?enableWordWrap g_enableWordWrap] [?editable g_editable] [?enabled g_enabled] [?callback t_callback] [?changeCB t_changeCB] [?nextField g_nextField]   ) => r_fieldHandle

"Creates a multiline text field entry for a form. Any input typed into this field will be converted to a single string accessible through SKILL. "


hiCreateMenu( s_menuHandle  t_menuTitle  l_menuItems   ) => r_hiMenu

"Returns the SKILL representation of a popup menu. Once this menu is created, you can display it with hiDisplayMenu or associate it with a window using hiSetWindowMenu. "


hiCreateMenuItem( ?name s_itemHandle  ?itemText t_menuItemText  [?itemIcon l_menuIcon]  [?callback t_itemCallback] [?disable g_disabled]   ) => r_hiMenuItem

"Creates a menu item that is used in the argument list to create any menu (except two-dimensional menus and simple menus)."


hiCreateOptionsForm( s_formHandle  t_formName  l_fieldEntries  t_help   ) => r_form

"Generates a form with the specified field entries, setting it to formHandle. "


hiCreatePointField( ?name s_fieldName  [?value l_currentValue] [?help g_fieldHelp]  [?prompt t_fieldPrompt]  [?defValue l_defaultValue]  [?font t_font]  [?callback t_callback]  [?modifyCallback t_modifyCallback] [?editable g_editable] [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates a point field entry for a form."


hiCreatePointListField( ?name s_fieldName  [?value l_currentValue] [?help g_fieldHelp]  [?prompt t_fieldPrompt]  [?defValue l_defaultValue]  [?font t_font]  [?callback t_callback]  [?modifyCallback t_modifyCallback] [?editable g_editable] [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates a point list field entry for a form. "


hiCreatePulldownMenu( s_menuHandle  g_menuTitle  l_menuItems   ) => r_hiMenu

"Returns the SKILL description of a pulldown menu. It creates a menu that contains text, icon, or slider menuItems. The menuHandle is the SKILL symbol set to the created menu."


hiCreateRadioField( ?name s_fieldName  ?choices l_radioList  [?help g_fieldHelp]  [?prompt t_fieldPrompt]  [?value t_currentSelection]  [?defValue t_defaultSelection]  [?itemsPerRow x_itemsPerRow]  [?font t_font] [?enabled g_enabled] [?callback l_radioListCallbacks]   ) => r_fieldHandle

"Creates a radio field for a form. "


hiCreateReportField( ?name s_name [?title t_title] [?titleAlignment g_titleAlignment] [?value g_value] [?help g_fieldHelp] [?headers g_headers] [?callback g_callback] [?nextField g_nextField] [?selectMode s_selectMode]  ) => r_fieldHandle

"Creates a report field. The report field is used to display information in a complex format. You can select items in a report field; you cannot edit the fields."


hiCreateScaleField( ?name s_fieldName  [?prompt t_prompt}  [?value x_currentValue] [?callback t_callback]  [?isContinuous g_isContinuous] [?range l_range] [?defValue x_defaultValue] [?help g_fieldHelp]  [?font t_font]  [?enabled g_enabled]  ) => r_fieldHandle

"Creates a scale field for a form. "


hiCreateScrollRegion( ?name s_name [?fields l_fieldEntries] [?attachmentList l_fieldAttachments] [?tabOrderIsAddOrder g_tabOrderIsAddOrder] [?labelText t_labelText]  [?borderWidth x_borderWidth] [?scrollBars g_scrollBars] [?rightMargin x_rightMargin] [?bottomMargin x_bottomMargin] [?help g_help]    ) => r_fieldHandle

"Creates a scroll region field, which can be scrolled and can contain any type of field. A scroll region field is like a sub-form within a form."


hiCreateSeparatorField( ?name s_fieldName  ) => r_fieldHandle

"Creates a separator field for a form. "


hiCreateSeparatorMenuItem( ?name s_itemHandle  ) => r_hiSeparatorMenuItem

"Creates a menu separator-a horizontal line that separates menu items. This menu item is used in the l_menuItems argument of the hiCreateMenu and hiCreatePulldownMenu functions. You can use the separator menu item in more than one menu or in multiple locations in the same menu."


hiCreateSimpleMenu( s_menuHandle  t_menuTitle  l_menuItems  l_menuItemCallbacks   ) => r_hiMenu

"Returns the SKILL description of a simple menu, in that it is a single level menu containing only text menu items, and none of its menu entries invoke a submenu. Once this menu is created, you can display it with hiDisplayMenu or associate it with a window using hiSetWindowMenu."


hiCreateSliderMenuItem( ?name s_itemHandle  ?itemText t_menuItemText  ?subMenu r_pulldownMenu  [?itemIcon l_menuIcon] [?disable g_disabled]  ) => r_hiSliderItem

"Creates a slider menu item that is used in the argument list to create a menu (all menus except simple, fixed or 2D menus). Slider menu items bring up submenus when selected. They can contain text (menuItemText) or icon (menuIcon) information."


hiCreateStringField( ?name s_fieldName  [?prompt t_fieldPrompt]  [?value t_currentValue] [?help g_fieldHelp]  [?defValue t_defaultValue]  [?font t_font]  [?callback t_callback] [?modifyCallback t_modifyCallback] [?format t_fieldFormat]  [?editable g_editable] [?enabled g_enabled] [?nextField g_nextField]  ) => r_fieldHandle

"Creates a string field entry for a form. Any input typed into this field is surrounded by double quotation marks before being passed to SKILL to interpret. "


hiCreateToggleField( ?name s_fieldName  ?choices l_toggleList  [?help g_fieldHelp]  [?numSelect x_numSelectable]  [?prompt t_fieldPrompt]  [?value l_currentValues]  [?defValue l_defaultValues] [?itemsPerRow x_itemsPerRow]  [?font t_font]  [?enabled g_enabled] [?callback l_toggleListCallbacks]   ) => r_fieldHandle

"Creates a toggle field entry for a form. "


hiCreateVerticalFixedMenu( s_menuHandle  l_menuItems  x_rows  x_cols   ) => r_hiMenu

"Returns an internal data structure that describes a vertical fixed menu object. The fixed menu is created as a grid of row x column dimensions, and contains menu item objects created by hiCreateMenuItem. An additional Done item is added as the last menu item. Selecting this Done menu item will remove the fixed menu from the screen. "


hiCreateWindow( g_boxSpec  t_widgetType  t_applicationType  [t_help] [g_scrollbars] [g_form]  [l_iconPosition]  ) => w_windowId / nil

"Creates but does not display a window. "


hiDeiconifyWindow( w_windowId   ) => t / nil

"Converts an icon to a window. "


hiDeleteBannerLabel( w_windowId  x_labelPosition   ) => t / nil

"Deletes a label in the banner of a window."


hiDeleteBannerMenu( w_windowId  x_menuPosition   ) => t / nil

"Deletes a menu from the banner of a window."


hiDeleteBannerMenus( w_windowId   ) => t / nil

"Deletes all menus from the banner of a window."


hiDeleteField( r_form  s_field   ) => t / nil

"Deletes a field from a form. "


hiDeleteFields( r_form  l_fields   ) => t / nil

"Deletes a field from a form."


hiDeleteForm( r_form   ) => t / nil

"Deletes the form specified and any fields the form contains. "


hiDeleteMenu( r_hiMenu   ) => t / nil

"Destroys the menu given by hiMenu, which must be a valid data structure. Individual menu items contained in this menu are also destroyed. ."


hiDeleteMenuItem( r_hiMenu  s_itemHandle  ) => t / nil

"Deletes the menuItem from all instances of the specified hiMenu. "


hiDeleteStatusBanner( w_windowId   ) => t / nil

"Deletes the status banner of a window."


hiDeltaPan( [w_window]  [n_deltax]  [n_deltay]   ) => t / nil

"Pans the view of a design in any direction by specifying the displacements in user units. "


hiDisableMenuItem( r_hiMenu  s_itemHandle [w_windowId]   ) => t / nil

"Grays out menu items (itemHandle) on pull-down, pop-up, or fixed menus (hiMenu), making them unselectable. "


hiDisableTailViewfile( w_windowId   ) => t / nil

"Turns off the ability to repeatedly read from the end of a file."


hiDisplayAppDBox( ?name s_dboxHandle  [?dboxBanner t_dboxBanner]  [?dboxText t_dboxText] [?callback t_callback]  [?dialogType x_dialogType] [?dialogStyle s_dialogStyle]  [?buttonLayout s_buttonLayout] [?defaultButton x_defaultButton] [?location l_location] [?help t_help]  ) => t / nil

"Creates and displays a dialog box. The dialog box is destroyed when it is removed from the screen."


hiDisplayEdgeMenu( r_hiMenu  [l_menuLocation] [x_width] [x_height]   ) => t / nil

"Displays an Edge-style popup or fixed menu, created from the menutrans program. "


hiDisplayFixedMenu( r_hiMenu  g_menuLocation [x_width] [x_height]   ) => t / nil

"Displays the specified fixed menu in the default root window (screen) for the application. They appear on a side of the screen, to be shared among Cadence application windows contained within the screen. This function will display both Opus-style (created from hiCreateHorizontalFixedMenu or hiCreateVerticalFixedMenu) and Edge-style fixed menus (created from the menutrans program). "


hiDisplayForm( r_form  [l_location]   ) => t / nil

"Displays a form. Do not use hiDisplayForm for displaying options forms. You can also use this function to bring a form to the top of the screen if the form is covered by other windows. "


hiDisplayListBox( s_listBoxHandle  t_listBoxTitle  l_listItems  t_help  ) => t / nil

"Creates and displays a list box. The list box will display a list of strings. The user can select exactly one of these strings by clicking over the item with the left mouse button. The list box remains on the screen until the user selects OK or Cancel. The list box is destroyed when it is removed from the screen"


hiDisplayMenu( r_hiMenu  [l_position]   ) => t / nil

"Displays a menu created by hiCreateMenu, hiCreateSimpleMenu, or hiCreate2DMenu. For non-2D menus, the menu is always displayed at the current cursor"


hiDisplayModalDBox( s_dBoxHandle  t_dBoxBannerText  t_dBoxMsg  t_dBoxHelp  t_confirmAction [l_location] [x_dboxType]  ) => t / nil

"hiDisplayAppDBox( ) is the recommended dialog box interface. Please use that function instead of this one."


hiDisplayModelessDBox( s_dBoxHandle  t_dBoxBannerText  t_dBoxMsg  t_dBoxHelp  t_confirmAction [l_location] [x_dboxType]   ) => t / nil

" hiDisplayAppDBox( ) is the recommended dialog box interface. Please use that function instead of this one and set ?dialogStyle to "


hiDisplaySysModalDBox( s_dBoxHandle  t_dBoxBannerText  t_dBoxMsg  t_dBoxHelp  t_confirmAction [l_location] [x_dboxType]   ) => t / nil

" hiDisplayAppDBox( ) is the recommended dialog box interface. Please use that function instead of this one and set ?dialogStyle to "


hiDisplayWindow( w_windowId   ) => t / nil

"Displays the window created by hiCreateWindow."


hiDisplayWindowMenu( w_windowId   ) => t / nil

"Displays the popup menu associated with the given windowId, which must be a valid data structure returned by a call to hiOpenWindow or hiCreateWindow. "


hiEdgeFixedMenuDone( r_hiMenu   ) => t / nil

"Removes the specified Edge-style fixed menu from the screen. "


hiEditPropList( g_object  [t_title]  [g_modifiable]   ) => t / nil

"Invokes the property list editor for the given g_object. "


hiEnableMenuItem( r_hiMenu  s_itemHandle [w_windowId]   ) => t / nil

"Makes unselectable menu items (itemHandle) in pull-down, pop-up, or fixed menus (hiMenu) selectable (ungrays them). "


hiEnableTailViewfile( w_windowId   ) => t / nil

"Turns on the ability to repeatedly read from the end of a file and update the viewfile window. This will continually update the viewfile window with text that is appended to the end of the file being viewed. This only works when appending to a file. If the file is modified in another way (such as edited using an editor), the results are unpredictable. This function is equivalent to the Unix command tail_f and works the same way."


hiEncap( [g_boxSpec] [t_cmd] [t_title]  ) => w_window / nil

"Invokes an encapsulation session by creating and displaying an encapsulation window."


hiEndLog(  ) => t / nil

"Stops writing the transaction log to the file previously specified by hiStartLog."


hiFixedMenuDown( r_hiMenu   ) => t / nil

"Removes the specified fixed menu from the screen. This function should only be used for Edge-style fixed menus; it is automatically placed as the callback for the Done menu item on Opus-style fixed menus."


hiFocusToCIW( [w_windowId]   ) => t / nil

"Temporarily refocuses the input window to the CIW until a return is entered. "


hiFocusToCursor( g_cursorFocus   ) => t

"Sets the window focus mechanism."


hiFocusToEncap( w_encap  [w_window]   ) => t / nil

"Temporarily focuses the keyboard input to an encapsulation window."


hiFormApply( r_form   ) => t

"Performs the same action as would be performed by selecting the Apply button on the form. "


hiFormCancel( r_form   ) => t

"Performs the same action as would be performed by selecting the Cancel button on the form. "


hiFormDone( r_form   ) => t

"Performs the same action as would be performed by selecting the OK button on the form. This function is identical to the hiFormFinish function. "


hiFormFinish(  ) => N/A

"Equivalent to pressing the OK button on a form. This function is identical to the  hiFormDone function."


hiFormUnmap( r_form   ) => t / nil

"Unmaps the form from the screen before a callback is completed. "


hiGenTextIndex( w_windowId  t_text  x_fromIndex   ) => x_index / nil

"Returns the character position that is the next occurrence of the text string relative to a specified position in the file."


hiGetAbsWindowScreenBBox( w_windowId  [g_includeWMOffsets]  ) => l_bBox

"Returns the absolute screen coordinates of a window, assuming 0:0 is the lower-left corner of the screen. "


hiGetAppType( w_windowId   ) => t_applicationType / nil

"Returns the application type of a window. "


hiGetAttention( [x_loudness]  ) => t / nil

"Rings the bell in the keyboard or terminal."


hiGetBBoxResource( t_resourceName [t_resourceClass]   ) => l_bBoxSpec

"Returns the bounding box specification defined in the .Xdefaults file for the specified resource. "


hiGetBannerMenus( w_windowId   ) => l_menuSymbols / nil

"Creates a list of menus that are in the menu banner of a window."


hiGetBeepVolume(  ) => x_loudness

"Retrieves the loudness of the beep."


hiGetBindKey( [t_application_type]  [t_key]   ) => t_skill_cmd / nil

"Returns the SKILL command string bound to a key or mouse button for an application."


hiGetBindKeyInheritAlias( t_application_type   ) => l_application / nil

"Returns a list of application names that inherit the bindkeys from t_application_type."


hiGetBindKeyInheritRoot( t_application_type   ) => t_application / nil

"Returns the application name from which t_application_type inherits its bindkeys."


hiGetBindKeyPrefixList(  ) => l_application

"Returns a list of registered applications. This list is used to build the menu for the Cyclic button on the Bind Keys form."


hiGetCIWindow(  ) => w_windowId

"Retrieves the window identity of the CIW."


hiGetCommandPoint( [w_windowId]   ) => pointList / nil

"Gets the location where the cursor was the last time a mouse button or keyboard key was pressed, but only until the cursor leaves that window. "


hiGetCurrentField( r_form  ) => s_fieldName / nil

"Returns the symbol name of the field that currently has input focus. The type of field that can be returned by this function is determined by the ?fieldFocus setting on the form at the time of form instantiation."


hiGetCurrentForm(  ) => r_form

"Returns the last active form, that is, the form that the cursor was last in."


hiGetCurrentIndex( w_windowId   ) => x_index / nil

"Returns the current cursor index position of text relative to 0:0."


hiGetCurrentWindow(  ) => w_windowId / nil

"Returns the ID of the current window. getCurrentWindow is an alias for hiGetCurrentWindow and is defined for compatibility with earlier versions of the software."


hiGetCursor( w_windowId  ) => x_cursor

"Identifies the type of cursor that is currently set for the specified window."


hiGetEncapSkillCmd( w_window   ) => t_skillCmd

"Returns the SKILL function associated with a window."


hiGetFieldInfo( r_2DFormOr2DMenu  s_field   ) => l_dimensions / nil

"Returns the dimensions of any form field or 2D menu item. Do not use the return value of hiGetFieldInfo to restore a field to its original location. Instead, use the values you specified originally."


hiGetFieldOverlaps( r_formHandle  ) => t/nil

"Generates warnings if the form specified contains any fields whose bounding boxes overlap with other fields, or any fields in which the bounding box for the prompt portion of the field overlaps with the main portion of the field. The function generates an initial warning that overlaps were found, then additional warnings for each overlap. Returns nil if the form is uninstantiated; t otherwise."


hiGetFont( t_fontType   ) => t_font / nil

"Returns the name of the font associated with the specified type font."


hiGetGeometryResource( t_resourceName [t_resourceClass]  ) => l_resource

"Gets geometry resources from the X resource database. "


hiGetHelp( w_windowId  ) => t_help

"Retrieves the help string that is defined for the window."


hiGetIconName( w_windowId   ) => t_iconName / nil

"Retrieves the icon name of a window."


hiGetLayerCyclicValue( d_techFileId r_form   ) => d_layerId / nil

"Returns the layer object associated with the current value of the layer cyclic field. "


hiGetMaxScreenCoords(  ) => l_coord_pair

"Retrieves the screen coordinates of the upper-right corner on the display screen. The lower-left corner of the screen always has screen coordinates 0:0. "


hiGetNumMenus( w_windowId   ) => x_numMenus

"Counts the menus in the menu bar of a window."


hiGetPoint( w_windowId   ) => pointList / nil

"Retrieves the xy position for the current location of the cursor within the boundaries of the window. It returns the xy position even if the cursor is in another window or form that is covering the specified window, as long as the cursor is within the boundaries of the specified window."


hiGetStringResource( t_resourceName [t_resourceClass]  ) => g_resource / nil

"Gets resources from the resource database of the X Window System."


hiGetTextClass( w_windowId   ) => x_class / nil

"Returns the value of the current active text class. If hiSetTextClass() has not been set, the current active text class will be 0. Also, a few other functions may reset the active text class back to 0 or possibly another value. Otherwise the currently active text class will be the one set by the last call to hiSetTextClass()."


hiGetTextFieldFit( x_rows x_columns t_font g_hasVerticalScrollbar g_hasHorizontalScrollbar  ) => l_dimensions

"Computes and returns the pixel size needed for a multiline text field entry for a form. The value returned is based on the specified font and character extents. "


hiGetTextSelByLoc( w_windowId [x_class]  ) => l_locationPair / nil

"Returns a list of starting and ending location pairs of all selected text strings in the specified class."


hiGetTextSelection( w_windowId [x_class]  ) => l_text / nil

"Retrieves the currently selected text strings from within a specified class."


hiGetTextWidth( t_fontName t_text   ) => x_width/-1

"Returns the width in pixels of a text string in a specified font. "


hiGetTopListItem( o_listbox  ) => x_position / nil

"Returns the top item position of a listbox field."


hiGetUndoLimit(  ) => n_undoLimit

"Returns the maximum number of hiUndo commands it is possible to perform."


hiGetViewBBox( [w_window]   ) => l_bBox

"Returns the bounding box displayed in a window."


hiGetWMOffsets(  ) => l_offsets

"Returns a list of offsets (dimensions) of the window manager border placed around each window. "


hiGetWidgetType( w_windowId   ) => t_widgetType / nil

"Returns the widget type of a window. "


hiGetWindowFixedMenu( [w_window]  ) => r_fixMenu / nil

"Identifies the fixed menu on a window."


hiGetWindowIconifyState( w_windowId   ) => l_iconPosition / nil

"Returns the icon position of an iconified window. "


hiGetWindowList(  ) => lw_windowId

"Returns a list of all window IDs that have been created and not closed. "


hiGetWindowMenu( w_windowId   ) => s_hiMenu / nil

"Returns the symbol of the menu associated with the specified window. This menu was associated with a window by using hiSetWindowMenu."


hiGetWindowName( w_windowId   ) => t_windowName / nil

"Gathers the text in the window manager frame of a window."


hiGetWindowState( w_windowId  ) => s_state / nil

"Identifies the display state of a window."


hiHelp( s_objType S_objName  [g_objDetail] [g_moreDetail]  ) => t/nil

"Constructs a help symbol from its arguments, invokes the OpenBook API to display the help document associated with that help symbol, and if that fails, extracts a help response from the help response file, and evaluates the help response. hiHelp is the main service routine for the online help system."


hiHighlightField( g_form  s_field  g_highlightType   ) => t / nil

"Highlights a type-in field depending on the value of highlightType. "


hiIconifyWindow( w_windowId   ) => t / nil

"Converts a window into its icon. "


hiIgnoreProp( s_objType  t_propName   ) => t / nil

"Does not display the specified property of a given object type in the Property List Editor form. "


hiInFormApply( r_form  ) => t / nil

"Checks whether the Apply button on a mapped form is selected."


hiInheritBindKey( t_application_type  t_from_app_type   ) => t / nil

"Causes a registered application to inherit bindkeys from another application."


hiInsertBannerMenu( w_windowId  g_menu  x_menuPosition   ) => t / nil

"Inserts a menu into the banner of the window."


hiInsertMenuItem( r_hiMenu  r_menuItem g_position   ) => t / nil

"Inserts the menuItem into a specified position of all instances of hiMenu."


hiInstantiateForm( r_form   ) => t / nil

"Instantiates the C structure of a form from SKILL. "


hiIs2DMenu( g_menu   ) => t / nil

"Determines whether the specified argument is a valid 2D menu. "


hiIsForm( g_FormOrMenu   ) => t / nil

"Checks whether a form or menu is a valid one."


hiIsFormDisplayed( r_form   ) => t / nil

"Checks whether a form is displayed."


hiIsIcon( g_icon   ) => t / nil

"Determines whether the specified argument is a valid icon. "


hiIsInFieldCancel(  ) => r_formHandle/nil

"Query this function during a field or form callback to determine if the form is currently being cancelled (the callback may be initiated by the cancel operation). If the form is being cancelled, the form handle is returned; otherwise nil is returned."


hiIsInstantiated( r_formOrMenu   ) => t / nil

"Returns t if a form has been displayed at least once or a menu has been placed in a window."


hiIsMenu( g_menu   ) => t / nil

"Determines whether the specified argument is a valid menu."


hiIsMenuItemEnabled( r_hiMenu s_itemHandle [w_windowId]  ) => t / nil

"Determines whether a menu item is enabled. "


hiIsMenuSlotFilled( w_windowId  x_position  ) => t / nil

"Checks a menu position in the banner of a window for the existence of a menu."


hiIsScrollRegion( g_item  ) => t/nil

"Returns t if the item is a scroll region field, nil if it is not a scroll region field."


hiIsWidgetType( t_widgetType   ) => t / nil

"Determines if a widget type is valid or not."


hiIsWindowSpecifier( g_winspec  ) => g_winspec / nil

"Validates a window specifier, which is passed as the ?bBox argument to the hiOpenWindow function and as the g_boxSpec argument to the hiCreateWindow function."


hiLayerMatchCyclicStr( l_choices t_layer   ) => l_layerValue

"Returns the layer cyclic value associated with the specified t_layer. "


hiLayerStringToLPP( d_techFileId t_layer   ) => d_layerId / nil

"Returns the layer object in the specified d_techFileID associated with the specified t_layer. "


hiListBoxCancel( o_listBox   ) => t / nil

"Performs the same action as the Cancel button on the listbox."


hiListBoxDone( o_listBox   ) => t / nil

"Performs the same action as the OK button on the listbox."


hiListView( [t_viewName] [w_window]  ) => l_viewList / nil

"Lists the saved viewing parameters for a given view, for all saved views if viewName is not specified. "


hiLowerWindow( w_windowId   ) => t / nil

"Lowers a window to the bottom of the list of visible windows. "


hiMakerHelp( t_docName  t_tagName [quiet]  ) => t / nil

"Opens a FrameViewer document to the page containing a hypertext tag name. "


hiMapWindow( w_windowId   ) => t / nil

"Displays a window on screen. "


hiMatchColor( l_RGBcolor   ) => x_colormapIndex

"Returns the colormap index of the layer color (currently in the colormap) that most closely matches the specified RGB triplet. The index returned by hiMatchColor( ) can change with each invocation of Cadence software and should not be hard coded into any SKILL program."


hiMatchColorByName( t_colorName   ) => x_colormapIndex

"Returns the colormap index of the layer color (currently in the colormap) that most closely matches the color name supplied."


hiModalDBoxHelp( t_helpString  [t_dboxName]  ) => t / nil

"Displays a message in a modal dialog box. "


hiModelessDBoxHelp( t_helpString  [t_dboxName]  ) => t / nil

"Displays a message in a modeless dialog box. "


hiMoveField( r_2DFormOr2DMenu  s_field  l_location   ) => t / nil

"Moves the specified field to a new location. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments."


hiMoveFixedMenu( [?window w_window]  [?menuSide s_menuSide]   ) => t / nil

"Moves the fixed menu to the opposite side of the window."


hiMoveInsBarToEnd( r_form s_field  ) => t / nil

"Places the cursor (insertion point) at the end of a text field, scrolling the field so the cursor is visible."


hiMoveWindow( w_windowId  l_point   ) => t / nil

"Moves the lower left corner of a window to a new screen location. "


hiNextWinView( w_window   ) => t / nil

"Undoes hiPrevWinView."


hiOffsetField( r_2DFormOr2DMenu  s_field  l_offsets   ) => t / nil

"Offsets one field from its current position. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments."


hiOffsetFields( r_2DFormOr2DMenu  l_fields l_offsets   ) => t / nil

"Offsets several fields from their current positions. All fields are offset by the same distance (l_offsets); they move as a block. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments."


hiOpenWindow( [?bBox l_boxSpec]  [?type t_widgetType]  [?appType t_applicationType]  [?menus l_menus]  [?labels l_labels]  [?help t_helpString]  [?scroll g_scrollbars] [?form g_form] [?closeProc s_closeProc] [?iconPosition l_iconPosition]  ) => w_windowId / nil

"Creates and displays a window. "


hiPan( [w_window]  [l_point]   ) => t / nil

"Scrolls a window so that the display is centered on a point. "


hiPickWindow(  ) => w_windowId / nil

"Allows selecting a window without changing the current window. When this function is called, the pointer is grabbed and not released until either the mouse button or the Escape key are pressed. Any other keyboard event is ignored and the mouse click is not passed on to anything else."


hiPrevWinView( w_window   ) => t / nil

"Restores a window to the view displayed before the last zoom or pan command."


hiQueryFont( t_fontName   ) => l_fontAttributes

"Returns the values of the attributes of t_fontName. "


hiRaiseWindow( w_windowId   ) => t / nil

"Raises a window to the top of the list of visible windows. "


hiReattachField( g_formOrScrollRegion s_field l_positionalInfo i_fieldAttachment  ) => N/A

"Reattaches a field in a two-dimensional form or scroll region that has field attachments. This function places the field according to the new position and attachment information. This function can be used only with forms or scroll regions that already have field attachments. For forms or scroll regions that do not have field attachments, use the hiMoveField, hiResizeField, hiOffsetField, and hiOffsetFields functions."


hiRedo(  ) => t / nil

"Undoes the last hiUndo, assuming no other database modifications have occurred."


hiRedraw( [w_window]   ) => t / nil

"Redraws the content of a window. "


hiRefreshTextWindow(  ) => N/A

"Redraws all the selections and refreshes the viewfile window."


hiRegCloseProc( w_windowId  s_closeProc   ) => t

"Registers the procedure to be performed when a specified window is closed."


hiRegTimer( t_callbackString x_tenthsofSeconds  ) => t / nil

"Registers a SKILL function string that is executed after the specified time."


hiRegisterBindKeyPrefix( t_application_type [t_widgetType]  ) => t / nil

"Registers the application bindkey prefix that you do not want or need to register with the Design Editor application."


hiRemoveFixedMenu( [w_window]   ) => t / nil

"Removes the current fixed menu from a window. To delete fixed menus, first use hiRemoveFixedMenu to remove the fixed menu from the window, and then use hiDeleteMenu to destroy the fixed menu."


hiRepeat(  ) => t / nil

"Re-executes the last command processed by the CIW."


hiReplaceAllBannerMenus( w_windowId  l_menulist  ) => t / nil

"Replaces all banner menus in a window with new menus."


hiReplayFile( s_fileName   ) => t / nil

"Replays a log file. Use this function only for testing or debugging. In general, use the functions load or loadi instead of hiReplayFile. hiReplayFile is intended to be run only from a Command Interpreter Window."


hiResizeField( r_2DForm  s_field  l_resizeDescription   ) => t / nil

"Changes the width, height, or promptBox width of a specified field. This function cannot be used for fields that have field attachments. Use hiReattachField for fields with field attachments."


hiResizeWindow( w_windowId  l_bBox   ) => t / nil

"Resizes a window to the size of a bounding box. "


hiRestoreView( t_viewName  [w_window]   ) => t / nil

"Restores a window to the view specified by viewName."


hiSaveAsViewfile( [w_windowId]  [t_fileName]   ) => t / nil

"Saves the contents of the current window to the specified name."


hiSaveView( t_viewName  [w_window]   ) => t / nil

"Saves the current viewing parameters for a window."


hiSaveViewfile( [w_windowId]  [t_fileName]  [g_donotOverwrite]  ) => t / nil

"Saves the contents of the viewfile window to a file on disk."


hiScrollWindowBottom( w_windowId   ) => t / nil

"Scrolls the window to the bottom position of the viewable window."


hiScrollWindowDown( w_windowId   ) => t / nil

"Scrolls the window down one screenful of text at a time."


hiScrollWindowLeft( w_windowId   ) => t / nil

"Scrolls the window left one screenful of text at a time."


hiScrollWindowRight( w_windowId   ) => t / nil

"Scrolls the window right one screenful of text at a time."


hiScrollWindowToCurrentIndex( w_windowId   ) => t / nil

"Scrolls the window to the current cursor index position in the viewable window."


hiScrollWindowToIndex( w_windowId  x_index   ) => t / nil

"Scrolls the window to the index position in the specified window and forces the text at the given position to be displayed."


hiScrollWindowTop( w_windowId   ) => t / nil

"Scrolls the window to the top position of the viewable window."


hiScrollWindowUp( w_windowId   ) => t / nil

"Scrolls the window up one screenful of text at a time."


hiSelectTextByLoc( w_windowId  l_locationPair [x_class]  ) => t / nil

"Highlights a list of strings specified as a list of starting and ending location pairs."


hiSetBeepVolume( [x_loudness]  ) => t

"Sets the loudness of the beep."


hiSetBindKey( [t_application_type]  [t_key]  [t_skill_cmd]   ) => t / nil

"Binds a SKILL command string to a keyboard key or a mouse sequence for an application."


hiSetBindKeys( t_application_type  l_bindKeyList   ) => t / nil

"Sets multiple bindkeys for an application at one time. For more information about restrictions, see hiSetBindKey()."


hiSetButtonLabel( g_Button g_Label  ) => t / nil

"Changes a button"


hiSetCallbackStatus( r_form  g_booleanStatus   ) => t / nil

"Overrides the removal (unmapping) of a form when the form"


hiSetCurrentField( g_form  s_fieldName [g_limitSearch]  ) => t / nil

"Makes the specified type-in field the current field (sets input focus to the field). If the field is not visible, hiSetCurrentField scrolls the form or scroll region field so the field becomes visible."


hiSetCurrentIndex( w_windowId  x_index   ) => t / nil

"Sets the current cursor index position of the text in a window."


hiSetCurrentWindow( w_windowId   ) => t / nil

"Sets the current window to be the window you specify."


hiSetCursor( w_windowId x_cursor  ) => t / nil

"Sets the cursor you specify for the window."


hiSetEncapHistory( w_window  t_msg [g_redraw]   ) => t / nil

"Copies a message into the next available insertion position in an encapsulation output window."


hiSetEncapPrompt( w_window  t_prompt   ) => t / nil

"Sets the prompt for an encapsulation window."


hiSetEncapSkillCmd( w_windowId t_skillCmd   ) => t / nil

"Registers the SKILL function that wraps or embraces the input command line entered during the current encapsulation session."


hiSetFieldEditable( r_field  g_editable   ) => t / nil

"Sets the specified field editable or noneditable, in all forms where it appears. "


hiSetFieldEnabled( g_field g_enabled  ) => t / nil

"Enables or disables a form field. A disabled field is greyed-out. This function updates all instances of the field. You can use hiSetFieldEnabled with all types of fields except scroll region fields and separator fields."


hiSetFilter( [s_filter]  ) => t / nil

"Sets the output message filter for the CIW with the option specified by s_filter. If no option is specified, a form appears allowing you to specify the display options you want. "


hiSetFilterOptions( inputMenuCommands inputPrompts outputProgramResults outputMenuCommands outputUser messageErrors messageWarnings  ) => t / nil

"Sets the output message filter for the CIW with the specified options. "


hiSetFixedMenuSize( w_windowId   ) => t / nil

"Sets the window position and size of an Edge-style fixed menu that has been created in Opus. "


hiSetFont( [t_fontType] [t_fontName]  ) => t / nil

"Sets the font type to use the specified font t_fontName. "


hiSetFormBlock( r_form [g_blockUpdates] [g_unmanage]  ) => t / nil

"Prevents time-consuming multiple updates to a form during multiple changes (such as adding, deleting, moving, or resizing elements). You can also blank out the form during extensive changes. Updates are blocked until you call hiSetFormBlock( r_form nil) or hiUpdateFormBlock( r_form)."


hiSetFormButtonEnabled( r_form s_buttonSym g_enabled  ) => t / nil

"Enables or disables a button on a form. To enable or disable fields on a form, use the hiSetFieldEnabled function."


hiSetFormHighlights( g_form  g_highlightType  ) => t / nil

"Highlights all type-in fields for form, depending on the value of highlightType."


hiSetFormMinMaxSize( r_form g_minSize g_maxSize  ) => t / nil

"Sets the minimum or maximum size of the form. The size excludes the window manager"


hiSetFormPosition( l_location  ) => t / nil

"Sets the default initial location for forms displayed without an explicit location argument. "


hiSetFormToDefaults( r_form   ) => t / nil

"Sets each field in the form to its default value. "


hiSetIconName( w_windowId  t_iconName   ) => t / nil

"Sets the icon name of a window. "


hiSetLayerCyclicValue( d_techFileId l_lpp r_form   ) => t / nil

"Sets the current value of the layer cyclic field. "


hiSetListItemCenter( o_listBoxField x_position  ) => t/nil

"Brings the specified list box item into view in the center of the list box, if possible.  Takes a list box field of a form as the first argument and the numeric position of the item you want to bring into view as the second argument."


hiSetListItemVisible( o_listBoxField x_position  ) => t/nil

"Brings the specified list box item into view in the list box. Takes a list box field of a form as the first argument and the numeric position of the item you want to bring into view as the second argument. If the numeric position specified is 0 or less than 0, the last item in the list is scrolled into view."


hiSetMenuItemCallback( r_hiMenu  s_itemHandle  t_callback   ) => t / nil

"Changes the callback associated with all instances of a specified menu item."


hiSetMenuItemText( r_hiMenu  s_itemHandle  t_itemText   ) => t / nil

"Changes the item text associated with all instances of a specified menu item."


hiSetSplashBackground( t_XPMfileName  ) => t /nil

"Sets the background for the application"


hiSetSplashDefaultBackground(  ) => t /nil

"Sets the splash screen background to the default background."


hiSetSplashFamily( t_string  ) => t /nil

"Sets the product family name on the application"


hiSetSplashIcon( t_XPMfileName  ) => t /nil

"Sets the new icon for the application"


hiSetSplashLicense( t_string  ) => t /nil

"Sets the license information in the application"


hiSetSplashProduct( t_string  ) => t /nil

"Sets the product name on the application"


hiSetTextClass( w_windowId  x_class  ) => t / nil

"Sets the active selection (highlight) text class in a window."


hiSetTextHighlightColor( x_class l_foreground l_background   ) => t / nil

"Sets the foreground and background highlight colors of a class to the specified RGB value."


hiSetTextSelectAll( w_windowId  t_text [x_class]  ) => t / nil

"Highlights all occurrences of a specified string and resets the cursor to the top of the file."


hiSetTextSelection( w_windowId  t_text [x_class]  ) => t / nil

"Highlights the next occurrence of a specified string relative to the current cursor position. If no matching string is found between the current cursor position and the end of the file, it wraps around to the beginning of the file and continues the search."


hiSetTopListItem( r_listBoxField x-itemPosition  ) => t / nil

"Sets the first visible item in a list box field to the specified position (x_itemPosition). A position value of 1 indicates the first item, a position value of 2 indicates the second item, and so on. A value of 0 (zero) specifies the last item in the list. "


hiSetUndoLimit( n_undoLimit  ) => t / nil

"Sets the maximum number of hiUndo commands that can be performed in sequence. "


hiSetViewfile( w_windowId  t_fileName   ) => t / nil

"Reads a file and displays its contents in a viewfile window that has already been created."


hiSetWindowAtts( [?window w_windowId]  [?appType t_applicationType]  [?help t_help]  [?scroll g_scrollbars]  ) => t / nil

"Changes the application type, help string, or scroll bar attributes of a window. You must have registered the new application type before using this function."


hiSetWindowIcon( w_windowId  l_icon   ) => t / nil

"Sets the icon of a window. "


hiSetWindowMenu( g_menu  w_windowId   ) => t / nil

"Associates the given menu with the specified windowId. You can also use hiSetMenu, to get the same results. "


hiSetWindowName( w_windowId  t_label   ) => t / nil

"Sets the text in the window manager frame of a window. "


hiShowBindKeys( [g_appTypeOrWindow]  ) => t / nil

"Displays the bindkeys for an application type or window in a Viewfile window."


hiShowBindKeysByAppType( [t_application_type]  ) => t / nil

"Displays the bindkey for an application in a Viewfile window."


hiShowBindKeysByWindow( [w_window1] [w_window2]  ) => t / nil

"Displays the bindkeys for a window in a Viewfile window."


hiShowListBox( ?name s_listBoxHandle  ?choices lt_listItems  ?callback s_callback  [?title t_listBoxTitle]  [?multipleSelect g_multiSelect] [?value lt_selectedItem] [?appData g_appData] [?applyButton g_applyButton]  ) => t / nil

"Creates and displays a list box. The list box displays a list of strings. The list box can be created so that one item is selectable or multiple items are selectable. While the list box is displayed on the screen, the user may change the items in the list box, or change the item(s) selected. The list box remains on the screen until the user selects OK or Cancel. The list box is destroyed when it is removed from the screen."


hiStartGenTextIndex( w_windowId  t_text   ) => x_index / nil

"Searches the specified text string from the beginning of the file and returns the first character position of the matching text."


hiStartLog( t_filename  ) => t / nil

"Writes a transaction log to a file."


hiStoreFormLocation( s_formName  l_location   ) => t

"Stores a form"


hiStringToIcon( a_colorArray  t_iconString  x_width  x_height   ) => l_hiIcon / nil

"Returns an internal icon description that can be used in calls to hiCreatePulldownMenu, hiCreateMenuItem, hiCreateSliderMenuItem, hiCreateButton, hiCreateCyclicField, and hiAddCyclicChoice."


hiSwitchWindowType( w_windowId  t_widgetType t_appType t_help [g_scroll]   ) => t / nil

"Switches the widget type of a window from text to graphics or from graphics to text. "


hiTextDisplayString( w_windowId  t_text g_erase [g_dontScrollTop]  ) => t / nil

"Displays a text string in a window."


hiTextWidth( t_fontName t_string  ) => x_width / nil

"Determines the width, in pixels, of a text string if it were displayed in the font you specify. Returns nil if the font is not valid."


hiToggleEnterForm( [g_form]  ) => t / nil

"Displays or removes the options form of the enterfunction in the current window. "


hiUndo(  ) => t / nil

"Undoes the last user command that modified the database and that has not been undone by a previous hiUndo. "


hiUnmapWindow( w_windowId   ) => t / nil

"Removes a window from the screen without closing it or destroying it. "


hiUnregCloseProc( w_windowId  s_closeProc  ) => t / nil

"Unregisters the closing procedure for a window."


hiUnselectText( w_windowId t_text [x_class]  ) => t / nil

"Unhighlights the next occurrence of selected text in the viewfile relative to the cursor position."


hiUnselectTextAll(  ) => N/A




hiUnselectTextByLoc( w_windowId l_locationPair [x_class]  ) => t / nil

"Unhighlights selected text specified as a list of starting and ending location pairs in the given window."


hiUnselectTextClass( w_windowId x_class  ) => t / nil

"Unhighlights all occurrences of selected text belonging to the specified class."


hiUpdateFormBlock( r_form  ) => t / nil

"Used to reset a form if you have blocked multiple updates with the hiSetFormBlock function. Calling hiUpdateFormBlock( r_form) is equivalent to calling hiSetFormBlock( r_form nil)."


hiVectorPan( [w_window]  [l_refPt]  [l_destPt]   ) => t / nil

"Scrolls the view of the design in any direction by specifying two points in user units. "


hiZoomAbsoluteScale( [w_window]  [n_scale]   ) => t / nil

"Zooms in or out with an absolute scale. "


hiZoomIn( [w_window]  [l_bBox]   ) => t / nil

"Zooms in to a design. "


hiZoomOut( [w_window]  [l_bBox]   ) => t / nil

"Zoom out of a design."


hiZoomRelativeScale( [w_window]  [n_scale]   ) => t / nil

"Zooms in or out with a scale relative to the current window."


leAttachFig( d_figId1  d_figId2  ) => t/nil

"Attaches d_figId1 to d_figId2 by making d_figId1 a child of d_figId2. If d_figId1 is already attached to another object, it is detached from it. If d_figId2 is not specified, d_figId1 is detached from any object it is currently attached to without attaching it to anything else."


leChopShape( d_shapeId  l_points  g_closed  [g_remove]  [x_sides]  ) => l_newShapes/nil

"Cuts the shape d_shapeId using the chop shape l_points. "


leClearAllRuler( d_cellViewId  ) => t/nil

"This procedure removes all rulers currently attached to cellview d_cellViewId."


leConvertShapeToPolygon( d_shapeId  [x_sides]  ) => d_polygonId/nil

"Converts shape d_shapeId to an equivalent polygon. If it is a conic, the polygon has the specified number of sides."


leCreateAutoInstPin( d_cellViewId  l_point  t_termName t_termDir  ) => d_pinShapeId/nil

"Creates a pin shape in cellview d_cellViewId. "


leCreateAutoPin( d_cellViewId  l_point  t_termName t_termDir  ) => d_pinShapeId/nil

"Creates a pin shape in cellview d_cellViewId. "


leCreateContact( d_cellViewId  t_contact  l_origin  t_orient  n_width  n_length x_rows  x_cols  n_xPitch  n_yPitch  t_xBias  t_yBias  ) => d_instId/nil

"Creates t_contact type of instances in cellview d_cellViewId with the specified attributes. The specified contact must be defined in the library of d_cellViewId."


leCreatePath( d_cellViewId  l_layerPurposePair l_points  n_width  [t_pathStyle]  [n_offset]  [t_justification]  ) => d_pathId/nil

"Creates a path in cellview d_cellViewId on the specified layer with point list l_points and width n_width."


leCreatePin( d_cellViewId  l_layerPurposePair t_shape  l_points  t_termName  t_termDir  l_accessDir  ) => d_pinShapeId/nil

"Creates a pin shape in cellview d_cellViewId on the specified layer. "


leCreateRuler( d_cellViewId  l_points   ) => t/nil

"Creates a ruler in cellview d_cellViewId with vertices at the coordinates listed in l_points. "


leDefineExternalPins(  ) => t/nil

"Starts the Define External Pins enter function in the current window. The Define External Pins enter function provides a user interface for defining one or more pins on a net as being externally connected outside of a device."


leDefineInternalPins(  ) => t/nil

"Starts the Define Internal Pins enter function in the current window. The Define Internal Pins enter function provides a user interface for defining one or more pins on a net as being internally connected within a device."


leDefineWeaklyConnectedPins(  ) => t/nil

"Starts the Define Weak Pins enter function in the current window. The Define Weak Pins enter function provides a user interface for defining one or more pins on a net as being weakly connected within a device."


leDeiconifyLSW(  ) => t/nil

"Deiconifies the Layer Selection Window (LSW). It can be used if the LSW has been iconified. If the LSW is already displayed, this function has no effect. "


leDescend( w_windowId  d_instId  [x_row]  [x_column]  ) => w_windowId/nil

"Descends through the hierarchy to open the master of instance d_instId. leDescend attempts to open the cellview in the same mode as the current cellview, but if an editable version is not available, leDescend opens the master in read-only mode."


leEditDesignProperties( [d_cellviewId]  ) => t/nil

"Opens the Edit Cellview Properties form, which lets you change the design properties in the cellview d_cellViewId. If d_cellViewId is not specified, the cellview in the current window is used."


leEditInPlace( w_windowId  l_hierlist   ) => t/nil

"Descends through the hierarchy to edit a cell in place."


leEnvLoad(  ) => t/nil

"Loads the layout editor environment variables from the .cdsenv files. This file must be in your home directory. The variables are read into memory, but the windows are not updated with the new values. When new windows are created, they assume the new values."


leFlattenInst( d_instId  x_levels  [g_flattenPCells] [g_preservePins]  ) => t/nil

"Flattens instance d_instId up through x_levels of hierarchy. "


leGetContactDefaultParam( d_cellViewId  ) => l_params/nil

"Returns a list of default parameters associated with a contact as defined in the technology file using symContactDevice. The list contains the following items: width, length, rows, columns, xPitch, yPitch, xBias, and yBias."


leGetContactNameArray( d_techFileId  ) => l_contactNames/nil

"Returns a list of names of all defined contacts in the specified technology file."


leGetContactParam( d_instId  ) => l_params/nil

"Returns a list of the parameters associated with a contact instance. The list contains the following items: width, length, rows, columns, xPitch, yPitch, xBias, and yBias."


leGetContactRule( d_cellViewId  ) => l_contactRules/nil

"Returns a list of the contact rules in the supermaster cellview of the contact. The list contains the following items: viaLayer, layer1, layer2, encByLayer1, encByLayer2, layer1ImpLayer, layerImpEnc, layer2ImpLayer, and layer2ImpEnc."


leGetEntryLayer( [d_techFileId]  ) => l_layerPurposePair/nil

"Returns the entry layer for technology file d_techFileId as a list containing the layer name and layer purpose. If d_techFileId is not specified, the current technology file is used."


leGetLSWBBox( [g_includesBorder]  ) => bBox/nil

"Returns the bounding box of the Layer Selection Window (LSW). The bounding box is set by either leSetLSWBBox(), Opus.LSWGeometry, or by moving the LSW window."


leGetRefPoint( d_cellViewId  ) => l_point/nil

"Returns the reference point of cellview d_cellViewId. The reference point must be active. "


leGetValidLayerList( [d_techFileId]  ) => l_layerIdList/nil

"Returns a list of the valid entry layers for technology file d_techFileId. A layout view must be open for leGetValidLayerList to return the list of valid entry layers."


leHiAddShapeToNet( [w_windowId]  ) => t/nil

"Opens the Add Shape To Net form, which lets you associate a shape with a net. If w_windowId is not specified, the current window is used."


leHiAttach( [w_windowId]  ) => t/nil

"Attaches a selected object in the specified window to another object in the window. The attached object is called the child object, and the object it is attached to is called the parent object. When you move, copy, or delete the parent, the child is also moved, copied, or deleted. If w_windowId is not specified, the current window is used."


leHiChop( [w_windowId]  ) => t/nil

"Opens the Chop form, which lets you remove parts of objects or break objects into multiple objects. If w_windowId is not specified, the current window is used."


leHiClearRuler( [w_windowId]  ) => t/nil

"Clears the rulers that stay in the window when the Keep Ruler option is selected using leHiCreateRuler. If w_windowId is not specified, the current window is used."


leHiConvertShapeToPolygon( [w_windowId]  ) => t/nil

"Converts a selected object in the specified window to a polygon. Converts rectangles, paths, donuts, circles, and ellipses using the number of conic sides specified using leHiEditEditorOptions. If w_windowId is not specified, the current window is used."


leHiCopy( [w_windowId]  ) => t/nil

"Opens the Copy form, which lets you copy selected objects in the specified window. If w_windowId is not specified, the current window is used."


leHiCreateBend( [w_windowId]  ) => t/nil

"Opens the Create Transmission Line Bend form, which lets you create a transmission line bend in the specified window. If w_windowId is not specified, the current window is used."


leHiCreateCircle( [w_windowId]  ) => t/nil

"Creates a circle in the specified window. You are prompted to point to a location for the center of the circle and the outer edge of the circle. If w_windowId is not specified, the current window is used. "


leHiCreateContact( [w_windowId]  ) => t/nil

"Opens the Create Contact form, which lets you create a contact in the specified window. If w_windowId is not specified, the current window is used."


leHiCreateDonut( [w_windowId]  ) => t/nil

"Creates a donut in the specified window. You are prompted to point to a location for the center of the donut, the inner edge of the donut, and the outer edge of the donut. If w_windowId is not specified, the current window is used."


leHiCreateEllipse( [w_windowId]  ) => t/nil

"Creates an ellipse in the specified window. You are prompted to point to the corners of the bounding box for the ellipse. If w_windowId is not specified, the current window is used. "


leHiCreateInst( [w_windowId]  ) => t/nil

"Opens the Create Instance form, which lets you create an instance in the specified window. If w_windowId is not specified, the current window is used."


leHiCreateLabel( [w_windowId]  ) => t/nil

"Opens the Create Label form, which lets you create a label in the specified window. If w_windowId is not specified, the current window is used."


leHiCreatePath( [w_windowId]  ) => t/nil

"Opens the Create Path form, which lets you create a path in the specified window. If w_windowId is not specified, the current window is used."


leHiCreatePin( [w_windowId]  ) => t/nil

"Opens the Create Shape Pin form, which lets you create a geometric pin in the specified window. If w_windowId is not specified, the current window is used."


leHiCreatePinsFromLabels( [w_windowId]  ) => t/nil

"Opens the Create Pins From Labels form, which lets you create pins from text labels in your layout cellview or selected instances. This command creates pins with terminal names matching labels on a specified text layer with pin dimensions that you specify, centered on the origin of your text label. If you do not specify w_windowId, the layout editor uses the current window."


leHiCreatePolygon( [w_windowId]  ) => t/nil

"Opens the Create Polygon form, which lets you create a polygon in the specified window. If w_windowId is not specified, the current window is used. "


leHiCreateRect( [w_windowId]  ) => t/nil

"Creates a rectangle in the specified window. You are prompted to point to two coordinates for the opposite corners of the rectangle. If w_windowId is not specified, the current window is used."


leHiCreateRuler( [w_windowId]  ) => t/nil

"Opens the Create Ruler form, which lets you create a ruler in the specified window. If w_windowId is not specified, the current window is used."


leHiCreateSymDev( [w_windowId]  ) => t/nil

"Opens the Create Device form, which lets you create a symbolic device in the specified window. The symbolic devices are defined in the technology file. If w_windowId is not specified, the current window is used."


leHiCreateSymPin( [w_windowId]  ) => t/nil

"Opens the Create Symbolic Pin form, which lets you create a symbolic pin as in the specified window. The symbolic devices are defined in the technology file. If w_windowId is not specified, the current window is used."


leHiCreateTaper( [w_windowId]  ) => t/nil

"Opens the Create Transmission Line Taper form, which lets you create a transmission line taper in the specified window. If w_windowId is not specified, the current window is used. "


leHiCreateTrl( [w_windowId]  ) => t/nil

"Opens the Create Transmission Line form, which lets you create a transmission line in the specified window. If w_windowId is not specified, the current window is used."


leHiDelete( [w_windowId]  ) => t/nil

"Deletes selected objects in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiDeleteAllAreaViewLevel( [w_windowId]  ) => t/nil

"Removes all special display areas in window w_windowId. If you do not specify w_windowId, the layout editor uses the current window."


leHiDeleteAreaViewLevel( [w_windowId]   ) => t/nil

"Displays all currently defined area view levels using the layer-purpose pair hilight drawing1, and prompts you to point at the area to be removed. If you do not specify w_windowId, the layout editor uses the current window."


leHiDeleteShapeFromNet( [w_windowId]  ) => t/nil

"Opens the Delete Shape From Net form, which lets you remove the selected shape from the net. If w_windowId is not specified, the current window is used."


leHiDescend( [w_windowId]  ) => N/A

"Lets you push down one level into the design hierarchy. You can preselect the instance to descend into. If no instances are selected, you are prompted to select an instance. If you do not specify w_windowId, the layout editor uses the current window."


leHiEditDisplayOptions( [w_windowId]  ) => t/nil

"Opens the Display Options form, which lets you change the display options in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiEditEditorOptions(  ) => t/nil

"Opens the Layout Editor Options form, which lets you change the layout editor environment. You can also set these variables in your .cdsenv file, so the layout editor defaults to these options on start up."


leHiEditInPlace( [w_windowId]  ) => t/nil

"Lets you edit an instance"


leHiEditProp( [w_windowId]  ) => t/nil

"Opens the Edit Properties form, which lets you edit the properties set in the specified window. You are prompted to select objects whose properties you want to edit. If you do not specify w_windowId, the layout editor uses the current window."


leHiFlatten( [w_windowId]  ) => t/nil

"Opens the Flatten form, which lets you explode a cell instance or array, moving the contents of the cell or array up one or more levels into the current level of the hierarchy. If you do not specify w_windowId, the layout editor uses the current window."


leHiLayerGen( [w_windowId]   ) => t/nil

"Opens the Layer Generation form, which lets you create new shapes by performing logical operations on selected objects in the specified layers. If you do not specify w_windowId, the layout editor uses the current window."


leHiLayerTap( [w_windowId]  ) => t/nil

"Sets the entry layer to the layer of an indicated shape in the current window. You are prompted to point to the shape to be tapped. You can point to shapes anywhere in the hierarchy. If you point to more than one shape, the layer with the highest priority is tapped. If you do not point to any shapes that are on valid layers, the function calls hiGetAttention and prompts you again. If you do not specify w_windowId, the layout editor uses the current window."


leHiMakeCell( [w_windowId]  ) => t/nil

"Opens the Make Cell form, which lets you create a cell from the selected objects in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiMerge( [w_windowId]  ) => t/nil

"Merges selected objects that touch or overlap each other into one object. You can merge shapes of different types that are on the same layer. You cannot merge shapes on different layers. If you do not specify w_windowId, the layout editor uses the current window.  Note: Pins cannot be merged."


leHiModifyCorner( [w_windowId]  ) => t/nil

"Opens the Modify Corner form, which lets you modify corners of rectangles and polygons in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiMove( [w_windowId]  ) => t/nil

"Opens the Move form, which lets you move an object in the specified window to another location or layer in the same window or in a different window. If you do not specify w_windowId, the layout editor uses the current window."


leHiMoveOrigin( [w_windowId]  ) => t/nil

"Enter this function with only the window ID argument; the system prompts you to point to the new origin. If you do not specify w_windowId, the layout editor uses the current window."


leHiPaste( [w_windowId]  ) => t/nil

"Opens the Paste form, which lets you place the contents of the yank buffer in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiPlotQueueStatus(  ) => t/nil

"Opens the Plot Job Queue form, which shows the status of the plot job queue."


leHiPropagateNets( [w_windowId]  ) => t/nil

"Opens the Propagate Nets form, which lets you promote net information from pins in selected blocks one level down in the hierarchy up to the top level where the router can recognize and route the nets. You use this command when you do not have a schematic for your layout cellview. If you do not specify w_windowId, the layout editor uses the current window."


leHiReshape( [w_windowId]  ) => t/nil

"Opens the Reshape form, which lets you modify the vertices of rectangles, polygons, paths, and transmission lines. You can add vertices, remove vertices, or modify vertex locations. The modified shape is stored in its most efficient form. For example, if a polygon is modified to have a rectangular shape, it is converted into a rectangle. If you do not specify w_windowId, the layout editor uses the current window."


leHiRotate( [w_windowId]  ) => t/nil

"Opens the Rotate form, which lets you change the orientation of geometric objects. If w_windowId is not specified, the current window is used."


leHiSearch( [w_windowId]  ) => t/nil

"Opens the Search form, which lets you search the specified window for objects that match user-specified query requests. If you do not specify w_windowId, the layout editor uses the current window."


leHiSetAreaViewLevel( [w_windowId]  ) => t/nil

"Opens the Set Area View Level form, which lets you create a special display area in the window. This lets you override the window"


leHiSetRefPoint( [w_windowId]  ) => t/nil

"Sets a reference point in the specified window. You are prompted to point to location for the reference point. If you do not specify w_windowId, the layout editor uses the current window."


leHiSetValidLayer(  ) => t/nil

"Opens the Set Valid Layer form, which lets you set which layers in your library are displayed in the Layer Selection Window."


leHiShowSelSet( [w_windowId]  ) => t/nil

"Displays information about the selected set in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiSize( [w_windowId]  ) => t/nil

"Opens the Size form, which lets you enlarge or reduce a shape in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiSplit( [w_windowId]  ) => t/nil

"Opens the Split form, which lets you reshape an object by stretching part of it relative to a split line in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiStretch( [w_windowId]  ) => t/nil

"Opens the Stretch form, which lets you stretch objects in the specified window. If you do not specify w_windowId, the layout editor uses the current window."


leHiSubmitPlot(  ) => t/nil

"Opens the Submit Plot form, which lets you submit plots to a plotter."


leHiSummary( [w_windowId]  ) => t/nil

"Displays information about the specified window. If you do not specify w_windowId, the layout editor uses the current window. "


leHiTree( [w_windowId]  ) => t/nil

"Displays information about the design hierarchy in the specified window. If you do not specify w_windowId, the layout editor uses the current window. "


leHiYank( [w_windowId]  ) => t/nil

"Opens the Yank form, which lets you copy a set of objects in a cellview into the yank buffer for later pasting. A yank shape defines the area enclosing the objects to copy. If you do not specify w_windowId, the layout editor uses the current window."


leIconifyLSW(  ) => t/nil

"Iconifies the Layer Selection Window (LSW). If the LSW is already iconified, this function has no effect. "


leIsAnyContact( d_instId  ) => t/nil

"Tests if the specified instance is a contact."


leIsAnyContactMaster( d_cellViewId  ) => t/nil

"Tests if the specified cellview is a contact."


leIsContact( d_instId  ) => t/nil

"Checks if the specified instance is a contact."


leIsContactMaster( d_cellViewId  ) => t/nil

"Checks if d_cellViewId is a supermaster of a contact."


leIsContactName( d_techFileId t_contactName  ) => t/nil

"Checks if the name specified by t_contactName is a defined contact in the specified technology file."


leIsFigSelectable( d_figId  ) => t/nil

"Checks whether the figure d_figId is selectable. "


leIsInstSelectable( [d_techFileId]  ) => t/nil

"Checks whether the instances in d_techFileId are selectable. If d_techFileId is not specified, the current technology file is used."


leIsLSWIconified(  ) => t/nil

"Checks if the Layer Selection Window (LSW) is iconified. "


leIsLayerSelectable( l_layerPurposePair [d_techFileId]  ) => t/nil

"Checks whether the layer l_layerPurposePair is selectable. "


leIsLayerValid( l_layerPurposePair [d_techFileId]  ) => t/nil

"Checks whether layer l_layerPurposePair is a valid layer. If d_techFileId is not specified, the current technology file is used."


leIsLayerVisible( l_layerPurposePair [d_techFileId]  ) => t/nil

"This procedure checks whether the layer specified by l_layerPurposePair is visible. If d_techFileId is not specified, the current technology file is used."


leIsPinSelectable( [d_techFileId]  ) => t/nil

"Checks whether the pins in d_techFileId are selectable. If d_techFileId is not specified, the current technology file is used."


leIsRefPointActive( d_cellViewId  ) => t/nil

"Checks whether the cellview d_cellViewId contains an active reference point."


leLayerAnd( d_cellViewId  g_lpp1  g_lpp2  g_lpp3  ) => l_shapes/nil

"Creates shapes in cellview d_cellViewId on layer g_lpp3 that correspond to the intersections of all shapes on layers g_lpp1 and g_lpp2. A layer-purpose pair is a list containing a layer name followed by a layer purpose."


leLayerAndNot( d_cellViewId g_lpp1  g_lpp2  g_lpp3  ) => l_shapes/nil

"Creates shapes in cellview d_cellViewId on layer g_lpp3 that correspond to the shapes on layer g_lpp1 minus the intersections with the shapes on layer g_lpp2. A layer-purpose pair is a list containing a layer name followed by a layer purpose. "


leLayerOr( d_cellViewId g_lpp1  g_lpp2  g_lpp3  ) => l_shapes/nil

"Creates shapes in cellview d_cellViewId on layer g_lpp3 that correspond to the union of shapes on layers g_lpp1 and g_lpp2. A layer-purpose pair is a list containing a layer name followed by a layer purpose. "


leLayerSize( d_cellViewId  g_lpp1  n_sizeAmount g_lpp2  ) => l_shapes/nil

"Creates shapes in cellview d_cellViewId on layer g_lpp2 by oversizing the shapes on layer g_lpp1 by n_sizeAmount number of units, which can be either positive (oversize) or negative (undersize). A layer-purpose pair is either a layer name or a list containing a layer name followed by a layer purpose. "


leLayerXor( d_cellViewId g_lpp1  g_lpp2  g_lpp3  ) => l_shapes/nil

"Creates shapes in cellview d_cellViewId on layer g_lpp3 that are the result of the union of the shapes on layers g_lpp1 and g_lpp2 minus their intersection. A layer-purpose pair is a list containing a layer name followed by a layer purpose. "


leMakeCell( l_figs  t_libName  t_cellName  t_viewName  g_replace   ) => d_cellViewId/nil

"Creates the cellview specified by t_libName, t_cellName, and t_viewName. If the cellview already exists, it is overwritten."


leMergeShapes( l_shapes  [x_sides]  ) => l_newShapes/nil

"Merges the list of shapes l_shapes. The input shapes can be on multiple layers. Merges only shapes on the same layer. Returns the list of shapes resulting from the operation."


leModifyCorner( d_figId l_selArray g_chamfer x_distance [x_sides]  ) => t/nil

"Rounds or cuts off selected corners of the rectangle or polygon specified by d_figID."


leMoveCellViewOrigin( d_cellViewId  l_point  ) => t/nil

"Moves the contents of cellview d_cellViewId so that the origin is at l_point."


leMoveCursor( f_dX  f_dY  ) => t/nil

"Moves the cursor in the current window a relative distance specified by f_dX and f_dY."


leMoveCursorToRefPoint(  ) => t/nil

"Moves the cursor to the reference point of the cellview contained in the current window. "


lePasteFigs( d_cellViewId  l_destPt  [t_rotation]  ) => t/nil

"lePasteFigs works in layout editor windows opened using menus. It does not work in nongraphical windows opened with dbOpenCellViewByType."


lePlot( [t_fileName]  ) => t/nil

"Procedural plot submission command that generates the plot defined in the t_fileName plot template file. Plot options are stored in a disembodied property list called lePlotOptions. When lePlot() loads the plot template file, it reads the plot options from the lePlotOptions property list. There are two ways to create the plot template file: use vi, or save the options in the Submit Plot form to a file. The plot template file is used by lePlot() and by the Load command in the Submit Plot form. However, the following options are ignored by the Load command: library, cell, view, and plotSize."


leRemapLSW(  ) => t/nil

"If the Layer Selection Window (LSW) has been unmapped (made invisible) by leUnmapLSW, it restores the LSW window."


leReplace( d_cellViewId  l_objects l_replaceValues  ) => t/nil

"Replaces the specified values on the specified list of objects in the cellview d_cellViewId."


leReplaceAnyInstMaster( d_instId t_libName/nil t_cellName/nil t_viewName/nil  ) => t/nil

"Changes the master library, cell, or view name for the instance. If you do not want to change any of these names, you must type nil in its place."


leResizeLSW( l_bBox   ) => t/nil

"Sets the Layer Selection Window"


leSearchHierarchy( d_cellViewId l_bBox x_stopLevel t_objectType l_criteriaList  ) => l_objects/nil

"Searches the cellview d_cellViewId for objects that match the type and criteria specified. The search is bounded by the specified l_bBox and restricted to the specified x_stopLevel. The search assumes all figures are valid if the Layer Selection Window (LSW) has not been initialized."


leSetAllLayerSelectable( g_isSelectable [d_techFileId]  ) => t/nil

"Sets the selectability of all layers in technology file d_techFileId as specified by g_isSelectable. If d_techFileId is not specified, the current technology file is used."


leSetAllLayerValid( g_isValid [d_techFileId]  ) => t/nil

"Sets the validity of all layers in technology file d_techFileId as specified by g_isValid. If d_techFileId is not specified, the current technology file is used."


leSetAllLayerVisible( g_isVisible [d_techFileId]   ) => t/nil

"Sets the visibility of all layers in technology file d_techFileId as specified by g_isVisible. If d_techFileId is not specified, the current technology file is used."


leSetContactParam( d_instId n_width n_length x_rows x_columns n_xPitch n_yPitch t_xBias t_yBias  ) => t/nil

"Updates all the pcell parameters of a particular contact instance."


leSetEntryLayer( l_layerPurposePair [d_techFileId]  ) => t/nil

"Sets the entry layer for technology file d_techFileId to the layer specified by l_layerPurposePair, which can be either a list containing a layer name and a layer purpose, or just a layer name (the layer purpose then defaults to drawing). If d_techFileId is not specified, the current technology file is used."


leSetInstSelectable( g_isSelectable [d_techFileId]   ) => t/nil

"Sets the selectability of instances in the technology file specified by d_techFileId as specified by g_isSelectable. If d_techFileId is not specified, the current technology file is used."


leSetLSWBBox( l_bBox [g_includesBorder]  ) => t/nil

"Sets the Layer Selection Window"


leSetLayerSelectable( l_layerPurposePair g_isSelectable [d_techFileId]   ) => t/nil

"Sets the selectability of shapes on layer l_layerPurposePair in technology file d_techFileId as specified by g_isSelectable. If d_techFileId is not specified, the current technology file is used. For shapes on a layer to be selectable, the layer must be valid, visible, and selectable."


leSetLayerValid( l_layerPurposePair g_isValid [d_techFileId]   ) => t/nil

"Sets the validity of layer l_layerPurposePair as specified by g_isValid. If d_techFileId is not specified, the current technology file is used. Only valid layers are displayed in the Layer Selection Window."


leSetLayerVisible( l_layerPurposePair g_isVisible [d_techFileId]   ) => t/nil

"Sets the visibility of the layer specified by the layer-purpose pair as specified by g_isVisible. If d_techFileId is not specified, the current technology file Layer Selection Window (LSW) is used. "


leSetPinSelectable( g_isSelectable [d_techFileId]   ) => t/nil

"Sets the selectability of pins in the technology file specified by d_techFileId as specified by g_isSelectable. If d_techFileId is not specified, the current technology file is used."


leSetRefPoint( d_cellViewId  l_point  ) => t/nil

"Sets the reference point of cellview d_cellViewId to the point l_point. The reference point is set to be active if it was inactive. "


leSetRefPointInactive( d_cellViewId  ) => t/nil

"Marks the reference point for cellview d_cellViewId as inactive. To make a reference point active again, use leSetRefPoint."


leSizeShape( d_shapeId  g_sizeFactor  ) => l_shapes/nil

"Sizes shape d_shapeId by g_sizeFactor."


leSplitShape( d_shapeId  l_delta  l_splitLine  g_leftOrRight  [g_lockAngles]  ) => t/nil

"Splits a shape and moves one portion of it. Uses a multisegment split line to divide the shape."


leStretchShape( d_shapeId  l_delta  l_freePoints  [g_lockAngles]  ) => t/nil

"Stretches shape d_shapeId by the delta l_delta. Donuts cannot be stretched."


leToggleGravity(  ) => t/nil

"Turns gravity on or off."


leToggleGuidedPath(  ) => t/nil

"Turns Guided Path on or off."


leToggleGuidedPathCreate(  ) => t/nil

"Turns the Guided mode of Create Path on or off. When on, paths are created according to the minspacing rules in the technology file."


leToggleGuidedPathMaintainConnections(  ) => t/nil

"Turns Maintain Connections with Guided Path on or off."


leToggleMaintainConnections(  ) => t/nil

"Turns Maintain Connections on or off."


leUnmapLSW(  ) => t/nil

"Unmaps (makes invisible) the Layer Selection Window (LSW)."


leYankFigs( d_cellViewId  l_ptArray  x_nLevels [l_refPt]  [x_nSides]  ) => t/nil

"Copies specified objects into a yank buffer for later pasting. Copies objects in cellview d_cellViewId that fall within the shape defined by the points in l_ptArray and that are in the levels of hierarchy specified by x_nLevels. Optionally uses l_refPt as the reference point for the yank and x_nSides as the number of polygon sides to use when converting objects intersected by the yank shape."


leZoomToSelSet( [w_windowId]  ) => t/nil

"Zooms to fit the selected objects in the specified window. If w_windowId is not specified, the current window is used."


aelEngNotation( g_value x_prec ) => t_strRep

"Reformats a given number into engineering notation."


aelEnvCompile( g_env t_expr ) => x_compExpr

"Compiles a given expression according to the evaluation mode set with aelEnvCreate and the state of globals for the given environment."


aelEnvCreate( t_evalMode b_distinguishIntsFromDbls b_keepWhitespace ) => x_env

"Creates and initializes an AEL environment."


aelEnvDestroy(  ) => N/A

"In the 4.4 version or in later versions, the function aelEnvDestroy ( ) is no longer needed. Instead of using the aelEnvDestroy (env) function, you should use the env = nil expression to destroy the given environment."


aelEnvExecute( x_compExpr ) => t_result

"Executes the previously compiled AEL expression with the current global values of the environment in which it was compiled."


aelEnvFreeCompExpr( x_compExpr ) => t

"Frees the dynamically allocated memory used to store the compiled AEL expression."


aelEnvGetErrStr(  ) => t_errMsg

"Converts the error code currently stored in the all-AEL-wide error flag into an appropriate message."


aelEnvGetGlobal( x_env t_name ) => g_value

"Returns the current value of the named global, previously defined or deferred, in the given environment."


aelEnvInterpret( x_env t_expr t_mode ) => g_value

"Compiles and executes the specified expression in a single step."


aelEnvListDeferredFuncs( x_env ) => l_names

"Returns a list of all functions found in the compiled or interpreted expressions in the given environment that are undefined in AEL."


aelEnvListDeferredGlobals( x_env ) => l_names

"Returns a list of all globals found in the compiled or interpreted expressions in the given environment that have not been defined in a call to the aelEnvSetGlobals function."


aelEnvListExprFuncs( t_expr ) => l_funcs

"Returns a list of all the functions found in the given expression."


aelEnvListExprGlobals( t_expr ) => l_globals

"Returns a list of all the globals found in a given expression."


aelEnvListFuncs(  ) => l_names

"Returns a list of all the functions defined for all AEL environments."


aelEnvListGlobals( x_env ) => l_names

"Returns a list of all the globals in a given AEL environment. The list does not include AEL predefined constant globals or deferred globals."


aelEnvListGlobalsValues( x_env ) => l_names

"Returns a list of all global names and their values in a given AEL environment. The list does not include AEL predefined constant globals or deferred globals."


aelEnvName( t_name ) => l_tOrNil

"Accepts text or a symbol and returns a legal AEL name stripped of any leading or trailing white space that might have been in the argument."


aelEnvSetGlobalList( x_env l_dpl ) => x_count

"Using a disembodied property list as input sets the values of the named globals in a given environment."


aelEnvSetGlobals( x_env t_name g_val ) => x_count

"Sets the values of the named globals in a given environment, creating them if necessary."


aelGetSignifDigits(  ) => x_sigDigs

"Returns the current number of significant digits used by the aelEngNotation function."


aelNumber( g_value ) => f_result

"Takes an integer, a double, a complex, or a strnum (including complex strnums) and returns a double or a complex."


aelPopSignifDigits(  ) => N/A

"Discards (pops) the top value of the stack built by the aelPushSignifDigits function and returns a new top value."


aelPushSignifDigits( x_digs ) => x_digs

"Places (pushes) a given value onto the stack of values for the number of significant digits the aelEngNotation function uses to create engineering notation strnums."


aelSetLineage( x_env g_lineage ) => o_lineage

"The aelSetLineage function sets reference to a lineage for hierarchical expression evaluation. The lineage can either be a list or an aelLineage (SKILL user-defined) object. In either case, an aelLineage object is returned. The list is an ordered list of cell views whose car is the current instance, whose cadr is its parent, and so on. The last element of this list should be the top cell view."


aelSignum( g_val ) => -1, 0, 1

"Analyzes an integer, a double, or a strnum (not including complex strnums) and returns -1 if the value is negative, 0 if it is zero, or 1 if it is positive."


aelStrDblNotation( g_value x_prec ) => t_strRep

"Calls the aelEngNotation function and, if the result is an integer, appends a decimal point and zero (.0)."


aelSuffixNotation( g_value x_prec ) => t_strRep

"Calls the aelEngNotation function and replaces the e and exponent (if any) with the appropriate AEL suffix character. If the value is too small or too large for the AEL set of suffixes, the e and exponent are unchanged."


aelSuffixWithUnits( g_value t_units x_prec ) => t_strRep

"Used to display values on forms."


fmCheckAndRestartFrameEditor( [t_callBackProc] [t_callBackArg]  ) => t / nil

"Checks if a Frame tool is currently running and, if not, starts the default editor. "


fmCheckFrameRPC(  ) => 1 / -1

"Checks if a Frame tool can respond to a remote procedure call (RPC) request."


fmCheckFrameVars( g_startframe [t_callBackProc] [t_callBackArg]  ) => N/A

"Initializes the Design Framework II-FrameMaker environment by setting the default Frame tool, the default Frame path, and the Frame options."


fmLinkDoc( t_docName  t_hypertextTagName  ) => 1 / -1

"Displays the FrameMaker document page containing the given hypertext tag. "


fmOpenDoc( t_docName  ) => docHandle / -1

"Displays the first page of a FrameMaker document."


pcDefineCondition( d_cvId l_figs l_namelist g_condition g_stretch f_adjust   ) => d_condId/nil

"Specifies that the conditional inclusion of a list of objects is controlled by a given SKILL expression. Also specifies the inclusion of a dependent stretch control line. If the SKILL expression evaluates to a value other than nil, the objects are included."


pcDefineInheritParam( d_instId s_parameter g_value l_namelist  ) => d_inheritGroup/nil

"Specifies that a parameter of an instance of a pcell takes its value from a parameter definition of the enclosing cellview. The selection filter allows you to select only instances."


pcDefinePCell( l_cellIdentifier l_formalArgs body of code  ) => d_cellViewId/nil

"Creates a parameterized (super) master cellview. This function is generated when you compile a pcell."


pcDefineParamLabel( d_labelId S_height  ) => t/nil

"Defines a parameterized label. A parameterized label is not an instance name, but a label displaying values within a pcell, such as width and length of gates."


pcDefineParamLayer( d_cvId l_shapes g_layerExpr l_namelist [g_purposeExpr]  ) => d_paramLayerId

"Specifies that a set of shapes has its layer and purpose determined by a parameter definition in the cellview. The selection filter prevents you from selecting instances or stretch control lines."


pcDefineParamPath( d_pathId S_param g_margin g_width n_defaultWidth t_snap l_namelist  ) => d_paramShapeId

"Defines a path that has its vertices determined by a parameter of the cell. When you place the pcell, you enter a coordinate string that is used as the vertices of the parameterized path. You can use this function more than once in a cellview if all paths have the same vertices."


pcDefineParamPolygon( d_polygonId S_param g_margin t_snap l_namelist  ) => d_paramShapeId

"Defines a polygon that has its vertices determined by a parameter of the cell. When you place the pcell, you enter a coordinate string that is used as the vertices of the parameterized polygon. You can use this function more than once in a cellview."


pcDefineParamProp( d_cvId t_name g_expr  ) => t/nil

"Defines a parameterized property that can be accessed using a SKILL procedure. You can use this property to store any value within the pcell."


pcDefineParamRect( d_rectangleId S_param g_margin l_namelist  ) => d_paramShapeId

"Defines a rectangle that has its vertices determined by a parameter of the cell. When you place the pcell, you enter two coordinates that are used as the vertices of the parameterized rectangle. You can use this function more than once in a cellview."


pcDefineParamRefPointObject( g_objects S_param l_refpoint  ) => d_refPointId

"Specifies that the location of an object or group of objects in the instance is determined by the location of a reference point that is a parameter of the cell. The objects in the instance have the same relationship to the reference point parameter as the objects in the master cellview have to the corresponding reference point in the master cellview."


pcDefinePathRefPointObject( l_objects S_param t_endpoint  ) => d_refPointId

"Specifies that the location of an object or group of objects in the instance be determined by the location of the endpoint of a parameterized path. The objects in the instance have the same relationship to the endpoint of the digitized path in the instance as the objects in the master cellview have to the corresponding endpoint of the parameterized path in the master cellview."


pcDefineRepeat( d_cvId l_shapes l_namelist g_stepX g_stepY g_repeatX g_repeatY g_stretchX g_stretchY g_adjustX g_adjustY t_direction  ) => d_repeatId

"Defines a repetition parameter to be applied to specified objects. Objects can be repeated in the X direction, Y direction, or both. If the value for the repetition direction, t_direction, is horizontal and vertical, the pcDefineRepeat function creates an array."


pcDefineSteppedObject( g_objects S_param g_step g_startOffset g_endOffset l_namelist  ) => d_stepObjectId

"Defines an object or group of objects to be repeated along the length or perimeter of a parameterized shape that has already been defined in the pcell. The selection filter prevents you from selecting stretch control lines, parameterized shapes, or objects in other repeat-along-shape groups."


pcDefineStretchLine( d_lineId g_paramExpr  t_direction  f_defval f_minval  f_maxval  g_stretchRepeated  ) => d_StretchId

"Defines a stretch control line used to control stretching in the X direction or Y direction. Objects repeated in the direction parallel to the stretch direction can be set to stretch."


pcDeleteCondition( d_groupId  ) => t/nil

"Deletes a previously defined conditional inclusion parameter."


pcDeleteParamLayer( d_groupId  ) => t/nil

"Deletes a parameter associating a set of shapes with a layer parameter."


pcDeleteParamProp( d_cvId t_propname  ) => t/nil

"Deletes a parameterized property in the cellview d_cvId."


pcDeleteParamShape( d_memberId  ) => t/nil

"Deletes a parameterized shape directive, causing the specified shape to revert back to a regular (nonparameterized) shape."


pcDeleteRefPoint( d_groupId  ) => t/nil

"Deletes a reference point parameter. You can use this command to delete either a reference point defined relative to a parameter of the cell or a reference point defined relative to a parameterized path endpoint."


pcDeleteRepeat( d_groupId  ) => t/nil

"Deletes the repetition parameter d_groupId."


pcDeleteSteppedObject( d_groupId  ) => t/nil

"Deletes the repetition-along-shape parameter d_groupId."


pcExprToString( g_ilExpr  ) => t_string

"Converts a SKILL expression to a string. The Pcell compiler uses this function to create labels that display the value of an expression as a string enclosed in quotes."


pcFix( n_num  ) => x_result

"Converts a number to a floating-point number in the format number.0. When n_num is very close to a whole number, the system keeps the integer part of the number and adds a single decimal place equal to zero. Very close means the value of the number is within the range of plus or minus 0.001 of the integer part of the number specified by n_num. When the value is not within this range, the function allows the system to use the value in the first decimal place to round the n_num to an integer in the format number.0; the system ignores all other decimal places. This function is useful for correcting the round-off approximation that can occur with floating-point numbers that are stored in 32 or 64 bits."


pcGetConditions( d_cvId  ) => l_condlist/nil

"Returns a list of identifiers for conditional inclusion parameters in the specified cellview."


pcGetInheritParamDefn( d_instId  ) => l_inherit/nil

"Returns an identifier for an inherited parameter in the specified cellview."


pcGetInheritParams( d_cvId  ) => l_inheritlist/nil

"Returns a list of identifiers for inherited parameters in the specified cellview."


pcGetParamLabelDefn( d_labelId  ) => d_paramlabelId/nil

"Returns the parameterized label identifier resulting from a call to pcDefineParamLabel on the specified label."


pcGetParamLabels( d_cvId  ) => l_labellist/nil

"Returns a list of parameterized labels in the specified cellview."


pcGetParamLayerDefn( d_instId  ) => l_layerId/nil

"Returns the identifier for a layer parameter of a specified shape."


pcGetParamLayers( d_cvId  ) => l_layerlist/nil

"Returns a list of identifiers for layer parameters in the specified cellview."


pcGetParamProps( d_cvId  ) => l_proplist/nil

"Lists parameterized properties in the specified cellview."


pcGetParamShapeDefn( d_instId  ) => d_paramShapeId/nil

"Returns an identifier for a parameterized shape parameter resulting from a call to pcDefineParamPath, pcDefineParamPolygon, or pcDefineParamRect."


pcGetParamShapes( d_cvId  ) => l_paramshapelist/nil

"Returns a list of identifiers for the parameterized shape parameters in the specified cellview."


pcGetParameters( d_cvId  ) => l_paramlist/nil

"Returns a list of parameters and their default values defined in the specified cellview."


pcGetRefPointDefn( d_objectId  ) => l_refPointId/nil

"Returns an identifier for the reference point parameter defined in the specified cellview."


pcGetRefPoints( d_cvId  ) => l_refpointlist/nil

"Returns a list of identifiers for all the reference point parameters in a specified cellview."


pcGetRepeatDefn( d_objectId  ) => l_repeatlist/nil

"Returns a list of identifiers for all repetition parameters assigned to an object in the cellview. A single object can be assigned to more than one repetition group."


pcGetRepeats( d_cvId  ) => l_repeatlist/nil

"Returns a list of identifiers for repetition parameters in the specified cellview."


pcGetSteppedObjectDefn( d_objectId  ) => l_stepobjId/nil

"Returns an identifier for repetition-along-shape parameters resulting from calls to pcDefineSteppedObject. The object cannot be a parameterized shape."


pcGetSteppedObjects( d_cvId  ) => l_stepobjlist/nil

"Returns a list of identifiers for the repetition-along-shape parameters in the specified cellview."


pcGetStretchDefn( d_objectId  ) => d_StretchId/nil

"Returns the identifier for a stretch parameter."


pcGetStretches( d_cvId  ) => l_stretchlist/nil

"Returns a list of identifiers for the stretch parameters in the specified cellview."


pcModifyParam( d_cvId S_param t_type g_value  ) => d_paramId/nil

"Lets you modify the parameter type and default value for parameters assigned to a compiled pcell."


pcRedefineStretchLine( d_lineId  g_paramExpr  t_direction  f_defval f_minval  f_maxval  g_stretchRepeated   ) => d_StretchId/nil

"Redefines the attributes of an existing stretch control line. You can also specify a new location for the stretch control line with this command."


pcRestrictStretchToObjects( d_stretchId l_objlist  ) => d_stretchId/nil

"Lets you specify the objects affected by a particular stretch control line. Objects not specified are not moved or stretched by this stretch control line."


pcRound( n_num  ) => x_result

"Lets you round a number to the closest integer, using the value of the first decimal place; additional decimal places are ignored. If the value of the first decimal place is less than 5, the system drops it; if the value of the first decimal place is greater than or equal to 5, the system drops it and adds one to the integer."


pcSkillGen( d_cellViewId t_outputFile g_isSkillFile  ) => t/nil

"Converts a specified cellview into a SKILL file. A SKILL file can be edited and loaded back to a cellview after modification. Loading a SKILL file generates a SKILL master; however, the cellview contains only a label with the text: Warning: The master is defined by the SKILL procedure associated with the cellview."


pcTechFile( g_expression  ) => g_result

"Evaluates an expression contained in a string. The Pcell compiler uses this function as an envelope around stretch expressions that access information from a technology file. This function prevents any symbols used in the technology file access expression from being defined as parameters of the pcell."


pcUserAdjustParameters( p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any objects. The procedure is normally used to generate code to transform user-specified parameter values, such as to snap them to an even value. Parameters can then be referenced as variables in the SKILL code that is generated."


pcUserGenerateArray( d_mosaic  t_masterTag  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any simple arrays (mosaics) in a master pcell. The procedure is normally used to suppress array generation or to modify arrays."


pcUserGenerateInstance( d_inst  t_masterTag  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any instances in a master pcell. The procedure is normally used to suppress instance generation or to modify instances."


pcUserGenerateInstancesOfMaster( d_masterCV  l_instanceList t_tag  p_port   ) => t/nil

"A user-defined procedure called by the compiler for every master pcell in a master pcell. The compiler calls the procedure before it generates code for instances (but not arrays) for the master. The procedure is normally used to generate code to switch masters."


pcUserGenerateLPP( d_lpp  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes shapes belonging to layer-purpose pairs in the master pcell. The procedure is normally used to suppress shape-set generation."


pcUserGeneratePin( d_pin  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes pins on any terminals in the master pcell. The procedure is normally used to suppress pin generation or to modify pins."


pcUserGenerateProperty( d_object  d_prop t_tag p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes properties on any objects. The procedure is normally used to suppress property generation in the master pcell."


pcUserGenerateShape( d_shape  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any shapes in the master pcell. The procedure is normally used to suppress shape generation or to modify shapes."


pcUserGenerateTerminal( d_terminal  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any terminals in the master pcell. The procedure is normally used to suppress terminal generation or to modify terminals."


pcUserInitRepeat( l_stepX  l_stepY l_repeatX l_repeatY  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any repetitions. The procedure is normally used to generate code to set the values of variables for repetition parameters."


pcUserPostProcessCellView( d_cv  t_tag  p_port   ) => t/nil

"A user-defined procedure called by the compiler after it processes any object in a pcell. The procedure is normally used to generate code to process a list of objects that was built during compilation."


pcUserPostProcessObject( d_obj  t_tag  p_port   ) => t/nil

"A user-defined procedure called by the compiler after it processes any object (instance, shape, terminal, and so forth) in a master pcell. The procedure is normally used to generate code to modify a generated object."


pcUserPreProcessCellView( d_cv  t_tag  p_port   ) => t/nil

"A user-defined procedure called by the compiler before it processes any objects in a pcell. The procedure is normally used to generate code to initialize variables before the compiler processes individual objects."


pcUserSetTermNetName( d_pinFig  p_port   ) => t/nil

"SKILL code generated by this procedure should assign the net name to the SKILL variable pcTermNetName. This is the net name used in the code generated by the compiler to create terminals in the submaster pcell. The SKILL variables pcIndexX and pcIndexY are available for incorporation into pcTermNetName if you need to make different nets for each different repeated pin."


drawEnterFun(  ) => t / nil

"Redraws rubberbanding shapes. Called when an enterfunction is active."


ecoCompare( <libName.original> <cellName.original> <viewName.original> <libName.new> <cellName.new> <viewName.new> <outputFileName>  ) => t

"Allows you to compare an original design with a new, modified design by generating an ECO (engineering change order) file. The ECO file helps you manage changes to the netlist that occur after placement or routing. The ECO file contains a list of SKILL functions describing changes to the connectivity of a design. If the logic of the design changes, you can use an ECO file to implement those changes in the physical design. After generating the ECO file, you can load the information in the file to automatically update your original design with the changes."


lmCheckIn( st_license  ) => t/nil

"Releases the specified license."


lmCheckOut( st_license  r_version,  [ i_numLic  st_wait  st_lic_type  st_failFunc ]  ) => t/nil

"Checks out the specified license."


lmFeatList( [ st_outFunc ]  ) => st_list/nil

"Returns a list of features the user has checked out. Feature status is not updated if the feature was lost because of a connection problem or if it was removed by lmremove. This is consistent with the FLEXlm behavior."


lmFeatureExists( st_license r_version  ) => t/nil

"Verifies that the specified license is in the license file, not that the license is available."


lmFeatureStatus( st_license  ) => st_status

"Returns the current status of a feature."


lmGetStatus(  ) => i_status

"Returns the latest status set by the last lm function. The status corresponds to the error message numbers."


lmMessage( [ i_status ]  ) => st_status

"Returns the SoftShare message corresponding to status."


lmRecheck( errfunc  ) => t/nil

"Rechecks the validity of all checked-out features."


lmUserList( st_license  ) => nil/((server1 totalLic1	(user1 host1 display1 numLicense1 	licStatus1 time1 version1)  	(user2 host2 display2 numLicense2  	licStatus2 time2 version2)  	-   )

"Returns a list of users using st_license from all license servers within the search path of the current SoftShare configuration."


asiAddAnalysis( o_tool ?name		s_analysisName [?prompt		t_prompt] [?fieldList		l_analysisFields] [?optionList		l_analysisOptions] [?formType		s_formType] [?enable		s_enable]  ) => o_analysis/nil

"Adds a new analysis."


asiAddAnalysisField( o_analysis ?name			s_fieldName [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc]  ) => o_envVar/nil

"Adds an analysis field to an existing analysis."


asiAddAnalysisOption( o_analysis ?name			s_optionName [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc] [?sendMethod			s_sendMethod]  ) => o_envVar/nil

"Adds an option to an existing analysis."


asiAddEnvOption(  ) => N/A

"Adds a new simulation environment option."


asiAddFlowchartLink( o_flowchart s_parentStep s_childStep  ) => t/nil

"Creates a new link between the specified parent and child steps, which were created with asiAddFlowchartStep."


asiAddFlowchartStep( o_flowchart ?name		s_name [?description		t_description] [?runMessage		t_runMessage] [?function		s_function] [?checkFunc		s_checkFunc] [?preFunc		s_preFunc] [?postFunc		s_postFunc]  ) => o_step/nil

"Adds a new step to an existing flowchart. "


asiAddKeepOption( o_tool ?name			s_name [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc]  ) => o_envVar/nil

"Adds a simulator keep option variable."


asiAddSimOption( o_tool ?name			s_name [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc] [?genericName			s_genericName] [?sendMethod			s_sendMethod]  ) => o_envVar/nil

"Adds a new simulator option."


asiChangeAnalysis( o_tool ?name	s_analysisName [?prompt	t_prompt] [?fieldList	l_analysisFields] [?optionList	l_analysisOptions] [?formType	s_formType]  ) => o_analysis/nil

"Changes an existing analysis."


asiChangeAnalysisField( o_analysis ?name			s_fieldName [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc]  ) => o_envVar/nil

"Changes a field in an existing analysis."


asiChangeAnalysisOption( o_analysis ?name			s_optionName [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc] [?sendMethod			s_sendMethod]  ) => o_envVar/nil

"Changes an analysis option for an existing analysis."


asiChangeAnalysisOptionFormProperties( o_analysis [?type	s_type] [?width	x_width] [?columns	x_columns]  ) => o_formObj/nil

"Changes the display characteristics for one of the analysis options forms."


asiChangeFlowchartStep( o_flowchart ?name		s_name [?description		t_description] [?runMessage		t_runMessage] [?function		s_function] [?checkFunc		s_checkFunc] [?preFunc		s_preFunc] [?postFunc		s_postFunc]  ) => o_step/nil

"Changes a flowchart step in an existing flowchart"


asiChangeKeepOption( o_tool ?name			s_name [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc]  ) => o_envVar/nil

"Modifies an existing keep option variable for a simulator."


asiChangeKeepOptionFormProperties( o_tool [?type	s_type] [?width	x_width] [?columns	x_columns]  ) => o_formObj/nil

"Changes the display characteristics of the Keep Options form."


asiChangeSimOption( o_tool ?name			s_name [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc] [?genericName			s_genericName] [?sendMethod			s_sendMethod]  ) => o_envVar/nil

"Changes a simulator option."


asiChangeSimOptionFormProperties( o_tool [?type	s_type] [?width	x_width] [?columns	x_columns]  ) => o_formObj/nil

"Changes the display characteristics for the Simulator Options form."


asiCreateAnalysisField( ?name			s_fieldName [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc]  ) => o_envVar/nil

"Creates a new analysis field, such as from or to, for a new or changed analysis."


asiCreateAnalysisOption( ?name			s_optionName [?prompt			t_prompt] [?type			s_type] [?choices			l_choices] [?itemsPerRow			x_itemsPerRow] [?value			g_value] [?min			g_min] [?max			g_max] [?allowExpr			s_allowExpr] [?row			x_row] [?column			x_column] [?width			x_width] [?coordinates			l_coordinates] [?displayOrder			x_displayOrder] [?labelText			t_labelText] [?private			s_private] [?display			s_display] [?editable			s_editable] [?appCB			s_appCB] [?callback			t_callback] [?formApplyCB			s_formApplyCB] [?changeCB			st_changeCB] [?doubleClickCB			st_doubleClickCB] [?numRows			x_numRows] [?multipleSelect			s_multipleSelect] [?invalidateFunc			s_invalidateFunc] [?sendMethod			s_sendMethod]  ) => o_envVar/nil

"Creates a new analysis option for a new or changed analysis."


asiCreateFlowchart( o_tool  ) => o_flowchart

"Creates a new flowchart."


asiCreateFormatter( g_session  ) => o_formatter

"First, a design object is created with the nlCreateDesign call, using the information on the OASIS session. Subsequently, the formatter is created with a call to nlCreateFormatter, using the information on the session. The formatter is added to the session and can be obtained with asiGetFormatter. This is a convenience routine that you cannot redefine, and the interface should not call it."


asiDefineDataAccessFunction( o_tool s_dataType s_dataFunction  ) => s_dataFunction

"Redefines a data access function."


asiDefineDataMappingFunction( o_tool s_dataType s_function  ) => s_function

"Defines the data mapping functions."


asiDeleteAnalysis( o_tool s_analysisName  ) => t/nil

"Deletes an analysis."


asiDeleteAnalysisField( o_analysis s_fieldName  ) => t/nil

"Deletes an analysis field from an existing analysis."


asiDeleteAnalysisOption( o_analysis s_optionName  ) => t/nil

"Deletes an analysis option."


asiDeleteFlowchartLink( o_flowchart s_parentStep s_childStep  ) => t/nil

"Deletes the link between the specified parent and child steps."


asiDeleteFlowchartStep( o_flowchart s_name [s_splice]  ) => t/nil

"Deletes a step and any attached links from an existing flowchart."


asiDeleteKeepOption( o_tool s_name  ) => t/nil

"Deletes a simulator keep option variable."


asiDeleteSimOption( o_tool s_name  ) => t/nil

"Deletes a simulator option."


asiDisableAnalysis( o_analysis  ) => t/nil

"Disables an analysis while keeping it in the analysis list."


asiDisplayAnalysis( o_tool  ) => t/nil

"Displays the analyses for a tool. Use this function to determine which analyses you need to add or modify."


asiDisplayAnalysisField( o_analysis  ) => t/nil

"Displays the analysis field names for an analysis."


asiDisplayAnalysisOption( o_analysis  ) => t/nil

"Displays the analysis option names for an analysis."


asiDisplayAnalysisOptionFormProperties( o_analysis  ) => t/nil

"Displays the characteristics for one of the analysis options forms."


asiDisplayFlowchart( o_tool [s_rootstep]  ) => t/nil

"Displays the current steps and links for the flowchart."


asiDisplayKeepOption( o_tool  ) => t/nil

"Displays the current simulator keep option names."


asiDisplayKeepOptionFormProperties( o_tool  ) => t/nil

"Displays the form characteristics for the Keep Options form."


asiDisplayNetlistOption( o_tool  ) => t/nil

"Displays the current set of netlist options and values. Use this function only to determine which netlist options you can modify. Do not use this function as part of another procedure."


asiDisplaySimOption( o_tool  ) => t/nil

"Displays the current set of simulator option names and values."


asiDisplaySimOptionFormProperties( o_tool  ) => t/nil

"Displays the characteristics of the Simulator Options form."


asiEnableAnalysis( o_analysis  ) => t/nil

"Enables an analysis, which means the analysis is selected and sent to the simulator."


asiExecuteFlowchart( o_session s_goalStep  [s_printMessages]  ) => t/nil

"Executes the flowchart for a given session up to and including the goal step."


asiFinalNetlist( o_session  ) => t/l_dpl

"Creates the final netlist."


asiFormatAnalysis( o_ana p_fp ) => t/nil

"Formats and print analysis statements to the control file. For the general asiAnalog class, this routine:"


asiFormatAnalysisList( o_ana p_fp ) => t/nil

"Formats all enabled analyses by calling asiFormatAnalysis."


asiFormatControlStmts( o_session p_fp ) => t/nil

"Creates and formats all control statements. It formats the following in the following order:"


asiFormatDefinitionFileList(  ) => N/A

"Formats the statement which includes the specified definition files."


asiFormatDesignVarList( o_session  ) => t/nil

"Formats and prints the design variable statements to the design variable file. This routine first prints the string .PARAM followed by the design variables in name=value pairs. The design variables are obtained by calling asiGetDesignVarList."


asiFormatInitCond( o_session p_fp  ) => t/nil

"Formats and prints the initial condition commands to the control statement file. This routine prints the string .IC followed by the initial conditions in V(net)=voltage pairs."


asiFormatKeepList( o_session p_fp  ) => t/nil

"Formats and prints the signal save commands to the control statement file. At the asiAnalog class this routine simply returns t. You need to create your own asiFormatKeepList routine."


asiFormatModelLibSelectionList( o_session p_fp ) => t/nil

"Formats the statement which specifies the model library information."


asiFormatNodeSet( o_session p_fp  ) => t/nil

"Formats and prints the nodeset commands to the control statement file. This routine prints .NODESET and then the nodesets in V(net)=voltage pairs."


asiFormatSimulatorOption(  ) => N/A

"Formats and prints the simulator option statements to the designated file. This routine prints .OPTIONS followed by name=value pairs."


asiFormatTextStimulusFileList(  ) => N/A

"Formats the statement which includes the textual stimulus files."


asiGetAnalysis( {o_session | o_tool} s_analysisName  ) => o_analysis/nil

"Gets an analysis object."


asiGetAnalysisFieldChoices( o_analysis s_fieldName  ) => l_choices/nil

"Gets the list of choices for an analysis field that is set up as a list box."


asiGetAnalysisFieldVal( o_analysis s_fieldName  ) => g_value/nil

"Gets the value of an analysis field from the environment."


asiGetAnalysisFormFieldChoices( r_form s_analysisName s_fieldName  ) => l_choices/nil

"Returns the list of choices for a field in the Choosing Analyses form."


asiGetAnalysisFormFieldVal( r_form s_analysisName s_fieldName  ) => g_fieldValue/nil

"Returns the value of a field in the Choosing Analyses form."


asiGetAnalysisName( o_analysis  ) => s_analysisName/nil

"Gets the name of the analysis."


asiGetAnalysisNameList( {o_session | o_tool} ) => l_analysesNames

"Returns a list of analysis names defined for a tool."


asiGetAnalysisOptionChoices ( o_analysis s_optionName  ) => l_choices/nil

"Gets the list of choices for an analysis option that is set up as a list box."


asiGetAnalysisOptionList( o_analysis  ) => l_optionObjects/nil

"Gets a list of analysis option objects defined for a particular analysis object."


asiGetAnalysisOptionSendMethod( o_analysis s_optionName  ) => s_sendMethod

"Gets the sendMethod for an option in an analysis."


asiGetAnalysisOptionVal( o_analysis s_optionName  ) => g_value/nil

"Gets the value for the given option in an analysis."


asiGetAnalysisSigList( o_session o_ana  ) => l_sigObjList

"Gets a list of analysis field objects which are of the type net. For example, the p and n nodes for the Spectre noise analysis."


asiGetAnalysisSimFieldList( o_session o_ana  ) => l_simFieldObjList

"Gets a list of simulator analysis field objects which need to be netlisted."


asiGetAnalysisType( o_analysis  ) => s_analysisType

"Gets the type of the analysis."


asiGetCommandFooter( o_session  ) => t_commandFooter

"Specifies the footer of the simulation run command."


asiGetCommandLineOption( o_session  ) => t_CommandLineOption

"Gets the simulation command line options. At the asiAnalog class this method returns the value of the environment option `userComdLineOption."


asiGetDefinitionFileList( o_session  ) => l_definitionFileList/nil

"Gets the list of definition file names associated with the given simulation session."


asiGetEnabledAnalysisList( o_session  ) => l_analysisEnabledList / nil

"Returns a list of all the enabled analyses."


asiGetFlowchart( { o_tool | o_session }  ) => o_flowchart

"Gets the flowchart object for a tool or session."


asiGetFormattedVal( o_anaField | o_anaOption | o_simOption  ) => t_formattedVal/nil

"Gets the string value of an analysis field object, an analysis option object, or a simulator option object. The format of the string values are based on the object types which are specified with functions such as asiCreateAnalysisField, asiCreateAnalysisOption, asiAddSimOption. A number of examples can be found in the example section."


asiGetFormatter( o_session  ) => o_formatter/nil

"Returns the formatter created with the last asiCreateFormatter call. This is a convenience routine that you should not redefine and the interface should not call."


asiGetKeepOptionChoices( {o_session | o_tool} s_name   ) => l_choices/nil

"Gets the list of choices for a keep option that is set up as a list box. "


asiGetKeepOptionVal( { o_tool | o_session } s_name  ) => g_value

"Gets the value of a keep option variable for a tool or session object."


asiGetModelLibFile( o_modelLibSelection  ) => t_fileName/nil

"Gets the file name of a model libarary selection object."


asiGetModelLibSection( o_modelLibSelection  ) => t_sectionName/nil

"Gets the section name of a model libarary selection object."


asiGetModelLibSelectionList( o_session  ) => l_modelLibSelectionList/nil

"Formats the statement which specifies the model library information."


asiGetNetlistOption( {o_session | o_tool} s_name  ) => g_value/nil

"Gets the value of the specified netlist option. "


asiGetPredefinedCommandLineOption( o_session  ) => t_predefinedCmdLineOption

"Gets the predefined simulation command line options. This function returns an empty string at the asiAnalog class. Overload this method for your simulator."


asiGetSelObjName( o_selObj  ) => t_name

"Returns the schematic name of the selected signal object."


asiGetSelObjType( o_selObj  ) => t_signalType

"Returns the type of the selected signal object."


asiGetSelObjValue( o_selObj  ) => t_value

"Returns the initial condition or nodeset values specified on the selected signal object."


asiGetSimExecName( o_session  ) => t_simulatorExecutableName

"Gets the name of the simulator executable by calling asiGetSimName."


asiGetSimInputFileName( o_session  ) => t_name

"Returns the name of the simulator input file. For the asiAnalog_session class, this is input followed by the return value of asiGetSimInputFileSuffix."


asiGetSimInputFileSuffix( o_session  ) => N/A

"Returns the suffix used for the simulator input file. This method can be redefined, and must return a string, or a SKILL error will result."


asiGetSimOptionChoices( {o_session | o_tool} s_name  ) => l_choices/nil

"Gets the list of choices for a simulator option that is set up as a list box."


asiGetSimOptionNameList( o_tool  ) => l_nameList

"Returns the list of simulator option names."


asiGetSimOptionSendMethod( {o_session | o_tool} s_name   ) => s_sendMethod/nil

"Gets the sendMethod for the specified simulator option."


asiGetSimOptionVal( {o_session | o_tool} s_name  ) => g_value/nil

"Gets the value for the specified simulator option."


asiGetTextStimulusFileList(  ) => N/A

"Gets the list of textual stimulus file names associated with the given simulation session."


asiInit<yourSimulator>( o_tool  ) => t

"Calls the procedures to initialize your simulator"


asiInit<yourSimulator>Analysis( o_tool  ) => t

"Calls the procedures that modify your simulator"


asiInit<yourSimulator>DataAccessFunctions(  ) => N/A

"Calls the procedures that modify your data access routines. "


asiInit<yourSimulator>Flowchart( o_tool  ) => t

"Calls the procedures to initialize the flowchart for your simulator."


asiInit<yourSimulator>KeepOption( o_tool  ) => t

"Calls the procedures to initialize your simulator keep option variables. "


asiInit<yourSimulator>NetlistOption( o_tool  ) => t

"Calls the procedures that modify your simulator"


asiInit<yourSimulator>SimOption( o_tool  ) => t

"Calls the procedures to add your simulator options."


asiInitialize( o_tool  ) => o_tool/nil

"Initializes the tools that are derived from the asiAnalog class."


asiInvalidateFlowchartStep( o_session s_step  ) => t/nil

"Invalidates a flowchart step for a particular session."


asiIsAnalysisEnabled( o_analysis  ) => t/nil

"Tests to determine whether an analysis is enabled."


asiMapOutputName( t_dir s_type t_name  ) => l_nameList

"Maps the given schematic name of the given type using the netlist directory. The result is a list of mapped strings."


asiNeedSuffixEvaluation( o_session  ) => t/nil

"Specify whether the interface needs suffix evaluation or not. When this method returns t, the numeric suffixes specified in a numericString field will be evaluated. For example, suppose the start frequency field for the AC analysis has a value of 10M, asiGetFormattedVal( ac_start_fieldObj ) returns 1e7 provided it is created as a `numericString field."


asiNetlist( o_session  ) => g_status/nil

"This method performs the creation of a design object. It then creates the formatter object with nlCreateFormatter, after which the netlister is run and a netlist is generated with nlNetlist. Netlist statistics are then printed. The netlister also provides a component count, as well as the addition of design variables found during netlisting."


asiRawNetlist( o_session  ) => t/nil

"Creates a raw netlist."


asiRegisterTool(  ) => N/A

yourSimulator


asiRunSimulation( o_session  ) => g_status/nil

"This method performs the simulation for the session."


asiSendAnalysis( o_session  ) => t/nil

"Sends analyses to Cadence SPICE by calling asiFormatAnalysis for each analysis."


asiSendControlStmts( o_session  ) => t/nil

"Sends information such as nodesets, initial conditions, keep lists or output, analyses, restore files, include files, and stimulus files to Cadence SPICE."


asiSendDesignVars( o_session  ) => t/nil

"Sends the design variables to Cadence SPICE."


asiSendInitCond( o_session  ) => t/nil

"Places all the initial conditions in <netlistDirectory>/raw/ics and sends a ptprop command to Cadence SPICE. "


asiSendInitFile( o_session  ) => t/nil

"Sends the init.s file to Cadence SPICE."


asiSendKeepList( o_session  ) => t/nil

"Sends the keep list to Cadence SPICE."


asiSendModelPath( o_session  ) => t/nil

"Sends the model path to Cadence SPICE. "


asiSendNetlist( o_session  ) => t/nil

"Sends the raw netlist to Cadence SPICE using the Cadence SPICE sim command."


asiSendNodeSets( o_session  ) => t/nil

"Places all the nodesets in <netlistDirectory>/raw/nodesets and sends a ptprop command to Cadence SPICE. "


asiSendOptions( o_session  ) => t/nil

"Sends the simulation options to Cadence SPICE."


asiSendRestore( o_session  ) => t

"If DC restore is on, send the commands to restore the DC node voltages to Cadence SPICE."


asiSendUpdateFile( o_session  ) => t/nil

"Sends the update.s file to Cadence SPICE."


asiSetAnalysisFieldChoices( o_analysis s_fieldName l_choices  ) => l_choices/nil

"Specifies the list of choices to appear in the list box for an analysis field."


asiSetAnalysisFieldVal( o_analysis s_fieldName g_value  ) => g_value/nil

"Sets the value for a field of an analysis."


asiSetAnalysisFormFieldChoices( r_form s_analysisName s_fieldName l_choices  ) => l_choices/nil

"Sets the list of choices for the specified field on the Choosing Analyses form."


asiSetAnalysisFormFieldVal( r_form s_analysisName s_fieldName g_value  ) => g_value/nil

"Sets the value of a field on the Choosing Analyses form."


asiSetAnalysisFormWidth( o_tool x_width  ) => x_width/nil

"Sets the width of the Choosing Analyses form."


asiSetAnalysisOptionChoices( o_analysis s_optionName l_choices  ) => l_choices/nil

"Specifies the list of choices for an analysis option that is set up as a list box."


asiSetAnalysisOptionFormProperties( o_analysis [?type	s_type] [?width	x_width] [?columns	x_columns]  ) => o_formObj/nil

"Sets the display characteristics for a new analysis options form."


asiSetAnalysisOptionVal( o_analysis s_optionName g_value  ) => g_value/nil

"Sets the value of an option in an analysis."


asiSetKeepOptionChoices( {o_session | o_tool} s_name l_choices  ) => l_choices/nil

"Specifies the list of choices to appear in the list box field for the specified keep option."


asiSetKeepOptionVal( { o_tool | o_session } s_name g_value  ) => g_value/nil

"Sets the value for the specified keep option variable for a tool or session object."


asiSetNetlistFormatterClass( o_tool  s_class  ) => s_class

"Registers the netlist formatting class with the tool. This function is normally called from the asiInitFormatter method and should be defined for the interface."


asiSetNetlistOption( {o_session | o_tool} s_name g_value  ) => g_value/nil

"Sets a netlisting option."


asiSetSimOptionChoices( {o_session | o_tool} s_name l_choices  ) => l_choices/nil

"Specifies the list of choices to appear in the list box field for the specified simulator option."


asiSetSimOptionVal( {o_session | o_tool} s_name g_value  ) => g_value/nil

"Sets the value of the specified simulator option."


schAddSelectPt(  ) => N/A

"Selects the object under the cursor. This function maintains the selected set and adds the object to the selected set."


schCheck( d_cvId  ) => l_errors/nil

"Performs a check on the specified cellview. This includes extracting connectivity, running the schematic rules checker (SRC) and running the cross-view checker (VIC). You must have write permission to any cellview that is to be checked."


schCheckHier( d_cvId t_viewNames t_refLibs [l_instViewListTable]  ) => l_errors/nil

"Performs a check of the hierarchy that starts at the given cellview. The hierarchy traversed is defined by t_viewNames. Usually, the hierarchy is confined to the library of the given cellview, but you can specify a list of reference libraries to process if the hierarchy extends beyond the current library. You must have write permission to any cellview that is to be checked."


schCheckHierConfig( h_cfgId [v_pathVector [g_refLibs]]  ) => l_errors/nil

"Performs a check of the hierarchy. The check starts with the top cellview that is specified in the given hierarchy configuration. The hierarchy traversed is defined by information in this hierarchy configuration. Usually, the hierarchy is confined to the library of the given cellview, but you can specify a list of reference libraries to process if the hierarchy extends beyond the current library."


schCloneSymbol( d_cvId d_masterId l_origin t_orient  ) => t/nil

"Copies or clones graphics from an existing symbol into the target symbol cellview with the given location and orientation."


schCmdOption(  ) => t/nil

"Cycles through a predefined set of values. By default, this function is bound to the right mouse button. When you click the right mouse button during an active command, the command applies the next value in the predefined set. You can customize the predefined set of values by making calls to schSetCmdOption."


schComputePinRef( d_cellView [t_reportFile] [t_display] [t_formatString] [t_reportDups] [t_sortByDir] [t_separator] [t_inputDesignator] [t_outputDesignator] [t_ioDesignator] [x_charsPerLine]  ) => t/nil

"Creates offsheet pin references for multisheet designs. The pin references can be displayed in the schematic next to each pin or in a report file. This function creates an offsheet pin reference report that lists each pin followed by a list of all other locations of this pin. The pin references can also be displayed in the schematic next to each pin."


schCopy( d_fig d_destCV l_transform  ) => d_object/nil

"Copies the given object to the given destination cellview."


schCreateInst( d_cvId d_masterId t_instanceName l_origin t_orient    [ n_magnification ]  ) => d_inst/nil

"Creates an instance of the given master cellview in the specified cellview at the given location with the given orientation."


schCreateInstBox( d_cvId [ l_bBox ]  ) => d_id/nil

"Creates an instance box in the given cellview. This function uses a bounding box you specify or determines a bounding box from the pins and device shapes."


schCreateNetExpression( d_cvId t_netExpr d_glueId l_point t_justify t_orient t_font x_height  ) => d_id / nil

"Creates an inherited connection and the corresponding net expression label."


schCreateNoteLabel( d_cvId l_point t_text t_just t_orient t_font n_fontHeight t_type  ) => d_label/nil

"Creates note labels in a schematic or symbol cellview with the attributes and properties you specify. These labels do not affect the connectivity but can be useful for annotation."


schCreateNoteShape( d_cvId t_type t_lineStyle l_points [n_width]  ) => d_shape/nil

"Creates note shapes in a schematic or symbol cellview with the attributes and properties you specify. These shapes do not affect the connectivity but can be useful for annotation."


schCreatePin( d_cvId d_master t_termName t_direction g_offSheetP l_origin t_orientation  ) => d_pin/nil

"Creates instances that are used to represent pins of terminals in a schematic cellview."


schCreateSheet( d_cvId x_number t_borderLibrary t_borderCell t_borderView  ) => d_sheetInstId/nil

"Creates a new sheet for a multisheet schematic. The schematic is generated based on the cell name of the index with the sheet number appended; for example, sheet003. A multisheet symbol is created with the msymbol view and an instance is placed in the index schematic."


schCreateSymbolLabel( d_cvId l_point t_labelChoice t_text t_justify t_orient t_font n_height t_type  ) => d_label/nil

"Creates a label on a symbol cellview with the specified attributes."


schCreateSymbolPin( d_cvId d_master t_termName t_direction l_origin t_orientation [g_flatten]  ) => pinFigId/nil

"Creates a pin in the given cellview with the name, direction, and orientation you specify. The figures that describe the pin are taken from the given pin master cellview, which can be accessed with a call to dbOpenCellViewByType, and are copied into the specified cellview. A terminal is created for the pin with the given name. The objects are created in the cellview with the specified orientation."


schCreateSymbolShape( d_cvId t_shape t_style l_points [n_width]  ) => d_shapeId/nil

"Creates the specified shape using the given fill style and the list of points in the given cellview."


schCreateWire( d_cvId t_entryMethod t_routeMethod l_points n_xSpacing n_ySpacing n_width  ) => wireId/nil

"Creates flight lines, wide wires, or narrow wires in the specified schematic cellview."


schCreateWireLabel( d_cvId d_glue l_point t_text t_justify t_orient t_font n_height g_aliasP  ) => labelId/nil

"Creates wire labels and glues them to the object you specify."


schDelete( d_fig  ) => t/nil

"Deletes the figure you specify."


schDeleteIndex( d_cvId  ) => t/nil

"Deletes an index schematic if there is one remaining sheet. Converts the remaining sheet into an ordinary schematic with the cell name of the index schematic and replaces any offsheet pins with schematic pins."


schDeleteSheet( d_cvId x_number  ) => t/nil

"Deletes a sheet from a multisheet schematic design."


schDeselectAllFig( [d_cvId]  ) => t

"Deselects all objects in a specified cellview. Does not use the selection filter, so all objects are deselected."


schDirectEdit( x_index  ) => N/A

"Directly edits the object under the cursor."


schDrawSymbolPin( d_cvId t_termName t_direction l_points  ) => pinFigId/nil

"Creates a symbol pin in the specified cellview by creating a terminal of the given name with the given direction and a polygon shape specified by the given list of points."


schEditPinOrder( d_cvId l_pinList g_updateInstLastChanged  ) => t/nil

"Updates the pin ordering for schematic or symbol cellviews given a list of pin names contained in the cellview and their desired order. The purpose of this function is to keep the pin ordering of a schematic or symbol synchronized with the port ordering of a Verilog HDL or VHDL model."


schEditSheetSize( d_cvId t_borderLib t_borderCell t_borderView  ) => t/nil

"Places or replaces a sheet border instance in a schematic. This function works for both multisheet and non-multisheet schematics."


schExtendSelSet( w_window l_pt  ) => t/nil

"Extends the selection of the object in the specified position by selecting the object around the current object."


schExtendSelectPt(  ) => N/A

"Extends the selection of the object under the current cursor position by selecting objects around the current object."


schExtractConn( d_cvId  ) => l_result

"Runs the schematic connectivity extractor on the cellview you specify. Figures on the wire layer with drawing, flight, or label purposes are processed. Figures on the pin layer with drawing purposes are processed as schematic pins. Instances are of either cell or pin purpose; components that have cell purpose and pin instances must have objects in the master on the pin layer with drawing purpose to be processed correctly."


schExtractStatus( d_cvId  ) => t_status/nil

"Returns the schematic extraction status for the specified cellview. The status is based on the values of the two time stamps, instancesLastChanged and lastSchematicExtraction."


schGetCellViewListInSearchScope( d_cvId t_scope d_topcvId t_origHier t_viewNameList t_libName t_mode  ) => l_cvList/nil

"Returns a list of cellviews in the search scope you specify, which can be hierarchy or library."


schGetEnv( t_variableName  ) => g_value

"Gets the value of a schematic environment variable. Along with the schSetEnv function, this function lets you program the values for various options within the schematic editor without using a form. Also, these functions complement the general environment variable mechanism, which lets you preset values at startup using a .cdsenv file."


schGetMatchingObjects( d_cvId t_propName t_condOp t_propValue g_useSelSet  ) => l_objects/nil

"Finds the set of objects that match the specified search criteria in a cellview. You can search by property to limit the search in the selected set."


schGlueLabel( d_label d_figure  ) => t/nil

"Glues the label to the figure you specify using a database child/parent relationship in which the label is the child."


schHiAlternateView(  ) => N/A

"Changes the view name of a single component by toggling through the list of possible views."


schHiCellViewProperty(  ) => N/A

"Displays the options form showing the properties for the current cellview."


schHiChangeEditMode( t_newMode  ) => t | nil

"Sets the mode for the design in the current window to read or append. The mode is the same as that supplied to dbOpenCellViewByType."


schHiCheck( [t_action]  ) => N/A

"Checks the connectivity of a schematic and optionally starts the schematic rules checker (SRC) or the cross-view checker (VIC)."


schHiCheckAndSave(  ) => N/A

"Performs the checks specified by the check options and saves the schematic to disk under the same cell name and view name, and in the same library."


schHiCheckHier( [t_action][t_refLibs]  ) => N/A

"Performs the specified checks on the current schematic and the hierarchy below it. Also updates the connectivity as needed and runs the schematic rules checker (SRC), the cross-view checker (VIC), or both."


schHiCloneSymbol( [t_libraryName][t_cellName][t_viewName]  ) => N/A

"Copies graphics from an existing symbol library into the symbol you are currently editing."


schHiComputePinRef( [t_reportFile] [t_display] [t_formatString][t_reportDups] [t_sortByDir]  ) => N/A

"Displays the Cross-Reference Options form, which computes, stores, and lists zone references for all pins and offsheet connectors in a multisheet schematic. The zone references identify where pins on other sheets reference the same net. The Sheet - Go To Pin command uses the stored references to identify pin locations. The pin references can be displayed in the schematic alongside each pin or written to a report file."


schHiCopy( [g_formFlag][x_numrows][x_numcols][t_useSelSet]  ) => N/A

"Copies objects and data such as object properties. Objects can be copied between different schematic cellviews."


schHiCreateBlockInst( [t_libraryName][t_cellName][t_viewName][t_blockSampleName] [t_instanceName][t_pinNameSeed]  ) => N/A

"Creates a block and places an instance of a block in a schematic."


schHiCreateInst( [t_libraryName][t_cellName][t_viewName][t_instanceName][x_rows][x_columns]  ) => N/A

"Places an instance of a cellview in a schematic."


schHiCreateInstBox( [g_autoBox]  ) => N/A

"Creates an instance box for the symbol you are editing. An instance box defines a rectangular region in which an instance of a symbol is selectable."


schHiCreateNetExpression( [t_netExpr][t_justify][t_fontStyle][x_fontHeight] ) => N/A

"Creates an inherited connection and the corresponding net expression label."


schHiCreateNoteLabel( [t_text][t_justify][t_fontStyle][n_fontHeight][t_type]  ) => N/A

"Creates a note label to annotate the design for documentation purposes. These shapes do not affect connectivity."


schHiCreateNoteShape( [t_shape][t_style][x_width]  ) => N/A

"Creates a shape to annotate the design for documentation purposes. These shapes do not affect connectivity."


schHiCreatePin( [t_terminalName][t_direction][t_usage][t_interpret][t_mode]  ) => N/A

"Creates a pin of a specified type in your schematic."


schHiCreateSheet( [n_number][t_size][t_type]  ) => N/A

"Creates a sheet for a multisheet schematic."


schHiCreateSimBox( [t_signalName][t_type]  ) => N/A

"Creates a simulation monitor in a schematic."


schHiCreateSymbolLabel( [t_labelChoice][t_text][t_justify][t_fontStyle][n_fontHeight] [t_type]  ) => N/A

"Places labels in a symbol."


schHiCreateSymbolPin( [t_terminalName][t_type][t_direction][t_interpret][t_mode] [n_incrCount][t_location]  ) => N/A

"Creates pins in a symbol."


schHiCreateSymbolShape( [t_shape][t_style][x_width][g_nonModal]  ) => N/A

"Creates a line or shapes that describe a symbol."


schHiCreateWire( [n_width][g_drawMode][t_routeMethod][t_lockAngle][g_nonModal]  ) => N/A

"Creates different style wires that represent net connections in a schematic."


schHiCreateWireLabel( [t_text][t_purpose][t_justify][t_fontStyle][n_fontHeight] [t_interpret][t_mode]  ) => N/A

"Creates wire labels in a schematic. Physical contact between a label and wire is not required. You can move a label independently from a wire. When you move a wire that has a label glued to it, the label also moves."


schHiDelete(  ) => N/A

"Deletes selected objects."


schHiDeleteIndex(  ) => N/A

"Converts a multisheet schematic having one drawing sheet and one index sheet into a single-sheet schematic."


schHiDeleteSheet( [n_startSheet][n_endSheet]  ) => N/A

"Deletes a sheet or range of sheets from a multisheet schematic."


schHiDescend( [w_window]  ) => N/A

"Traverses down the hierarchy of a specified instance and displays the child cellview."


schHiDescendEdit( [w_window]  ) => N/A

"Traverses down the hierarchy of a specified instance and displays the child cellview."


schHiDescendRead( [w_window]  ) => N/A

"Traverses down the hierarchy of a specified instance and displays the child cellview."


schHiDisplayOptions( [w_window]  ) => N/A

"Sets options associated with the window display."


schHiDrawSymbolPin( [t_terminalName][t_direction][t_interpret]  ) => N/A

"Draws a polygon that represents a symbol pin."


schHiEditInPlace( [w_window]  ) => N/A

"Edits the master of an instance within the context of its parent schematic."


schHiEditPinOrder( [g_updateInstLastChanged]  ) => N/A

"Creates or modifies the property on the cellview that specifies the ordering of the pins in the current cellview."


schHiEditSheetSize( [t_size][t_type]  ) => N/A

"Edits the sheet border size of a schematic."


schHiEditTitleBlock(  ) => N/A

"Changes the properties of a title block in a schematic sheet."


schHiEditorOptions( [w_window]  ) => N/A

"Sets variables that affect the environment."


schHiExtractConn( [t_action]  ) => N/A

"Sets extraction options and runs the schematic extractor."


schHiFind( [t_propName] [t_condOp] [t_propValue]  ) => N/A

"Finds objects that match specified search criteria in a schematic or symbol view. You can specify the object filter as well as a property name or value expression that matches the objects."


schHiFindMarker(  ) => N/A

"Searches for the error and warning markers generated by the schematic rules checker (SRC) and displays a form that contains a list of the markers."


schHiFollowPin( [t_order]  ) => N/A

"Changes the cellview to one that contains the specified pin or offsheet connector. Operates on the selected set. Brings in the cellview that contains the first reference of the selected pin or offsheet connector."


schHiGotoSheet( [g_sheetNum]  ) => N/A

"Traverses sheets in a multisheet schematic."


schHiGridOptions( [w_window]  ) => N/A

"Sets options associated with the grid."


schHiHiliteLabel( [t_labelType] [t_display]  ) => N/A

"Highlights labels of wires and instances."


schHiInstToView( [t_viewName] [t_dataType]  ) => N/A

"Generates a cellview from an instance of a symbol."


schHiMousePopUp(  ) => N/A

"Displays a pop-up menu at the location of the cursor. The menu displayed is sensitive to the location of the cursor and the mode of the cellview in the window."


schHiMove( [t_useSelSet]  ) => N/A

"Moves objects to a different location. You can move objects between different schematic and symbol cellviews."


schHiObjectProperty(  ) => N/A

"Displays a form that lets you modify the properties of selected objects."


schHiOpenCellView(  ) => N/A

"Displays the Open File form. You specify the library name, cell name, view name, and edit mode in this form. The specified cellview is displayed in the current window."


schHiPinListToView( [t_libName] [t_cellName] [t_viewName] [t_inPinList] [t_outPinList] [t_ioPinList] [t_swPinList] [t_dataType]  ) => N/A

"Generates a cellview from a pin list."


schHiPlot(  ) => N/A

"Reads the .cdsplotinit file and brings up the Submit Plot form to let you generate schematic plots."


schHiPlotQueueStatus(  ) => N/A

"Displays the plot jobs in the spooling queues."


schHiRenumberAllSheet(  ) => N/A

"Sequentially renumbers all sheets in a multisheet schematic."


schHiRenumberSheet( [n_from][n_to]  ) => N/A

"Changes the number of a sheet in a multisheet schematic. Changes the cell name of the renumbered schematic to match the destination sheet number. If a sheet already exists with the destination number, then the renumbered sheet is inserted before it. All succeeding sheets will be renumbered accordingly."


schHiReplace( [g_replaceAll] [t_propName] [t_condOp] [t_propValue][t_newPropName] [t_newPropValue]  ) => N/A

"Replaces objects that match the specified search criteria with a specified value. The search criteria let you, among other tasks,"


schHiReturn( [w_window]  ) => N/A

"Returns up the hierarchy."


schHiReturnToTop( [w_window]  ) => N/A

"Returns to the top-level cellview in the hierarchy."


schHiRotate( [g_nonModal]  ) => N/A

"Rotates objects."


schHiRouteFlightLine( [t_routeMethod]  ) => N/A

"Routes logical connections shown as flight lines."


schHiSRC( [t_action]  ) => N/A

"Sets schematic rules checker (SRC) options, and runs an SRC."


schHiSaveCellView(  ) => N/A

"Saves the design in the current window."


schHiSelectAll(  ) => N/A

"Opens a form that you use either to add all specified objects to the selected set or to delete all specified objects from the selected set."


schHiSelectByProperty( [t_selectp] [t_propName] [t_condOp] [t_propValue]  ) => N/A

"Adds or removes objects that match specified search criteria in a schematic or symbol view to the selected set."


schHiSetSymbolOrigin(  ) => N/A

"Relocates the origin point of a symbol."


schHiShowScope( [w_window]  ) => N/A

"Displays the current hierarchical scope in the window."


schHiSolder(  ) => N/A

"Creates a solder dot over a + or T wire segment."


schHiStretch( [t_routeMethod][t_useSelSet]  ) => N/A

"Moves objects or partially selected objects and maintains connectivity with rubberbands."


schHiSymStretch(  ) => N/A

"Moves partially selected objects in the symbol editor."


schHiUpdatePinOrder( [g_updateInstLastChanged]  ) => N/A

"Creates or modifies the property on the cellview that specifies the ordering of the pins in the current cellview."


schHiVHDLProperty(  ) => N/A

"Edits properties specific to the schematic composer and VHDL netlister."


schHiVIC( [t_viewList]  ) => N/A

"Runs the Cross-View Checker (VIC) to check the consistency of the interface of one or more cellviews against the cellview you are editing."


schHiVICAndSave(  ) => N/A

"Runs the cross-view checker (VIC) on the cellview in the current active window and optionally saves the cellview."


schHiViewToView( [t_libName][t_cellName][t_viewNameFrom][t_viewNameTo] [t_dataType]  ) => N/A

"Generates one type of cellview from another. For example, generates a symbol view from a schematic view, or a Verilog HDL description view from a symbol view."


schInstToView( d_inst t_viewTo t_fromFunc t_toFunc  ) => t/nil

"Generates a cellview type from an instance of a symbol. For example, generates a Verilog HDL description from a symbol."


schInstallHDL( g_library t_cellName t_viewName t_srcName [@optional g_createSymbol]  ) => N/A

"Installs a Verilog HDL source file as an HDL cellview and creates the cell, view, and cellview objects in the library if necessary. This function can also create a matching symbol cellview."


schIsIndexCV( d_cv  ) => t/nil

"Tests whether the given cellview is an index schematic cellview."


schIsSchEditOk( d_cv [g_dialog]  ) => t/nil

"Tests whether the given schematic cellview is writable and whether the edit capability is enabled."


schIsSheetCV( d_cv  ) => t/nil

"Tests whether the given cellview is a multisheet schematic cellview."


schIsSymEditOk( d_cv [g_dialog]  ) => t/nil

"Tests whether the given schematic symbol cellview is writable and whether the edit capability is enabled."


schIsWireLabel( d_figId  ) => t/nil

"Tests whether the given database figure is a schematic wire label."


schMove( d_fig d_destCV l_transform  ) => d_object/nil

"Moves the object you specify to a destination cellview."


schPinListToView( t_libName t_cellName t_viewName g_pinList t_toFunc  ) => t/nil

"Generates a cellview from a pin list. For example, generates a symbol from a pin list."


schPlot( [t_file]  ) => N/A

"Generates the plot defined in the t_file plot template file. If t_file is not specified, uses the plot options stored in the schPlotOptions property list."


schRegPostCheckTrigger( s_functionName [ g_onceOnly ]  ) => t/nil

"Registers a function that will be called after a schematic is checked."


schRegisterFixedMenu( t_category r_menuHandle [s_disableTrigger] [s_enableTrigger]  ) => t/nil

"Registers a vertical fixed-menu handle for specific cellview types to customize the schematic and symbol editor fixed menus. This function also registers triggers to enable and disable specific items in the fixed menu based on whether the editor window is in edit or read mode."


schRegisterPopUpMenu( t_category r_menuHandle [t_mode]  ) => t/nil

"Registers r_menuHandle for a specific object type to customize the object-sensitive menus (OSMs)."


schRenumberAllSheet( d_cvId  ) => t/nil

"Resequences all sheets starting at one and fills any holes in the sequence."


schRenumberInstances( g_objId [t_scope [g_verbose]]  ) => t/nil

"Resequences instances of the form instNamePrefix number in a manner that results in unique numbering indexes for each component name prefix encountered. Any voids in a numbering sequence are resolved by renaming instances with the highest numbers to fill the voids."


schRenumberSheet( d_cvId x_from x_to  ) => t/nil

"Changes the number of a sheet in a multisheet schematic and changes the cell name of the renumbered schematic to match the destination sheet number. If a sheet already exists with the destination number, the new sheet is inserted before it and all succeeding sheets are renumbered accordingly."


schReplaceProperty( l_objId t_propName t_propValue  ) => t/nil

"Changes the value of t_propName to t_propValue for the object. This function checks if the net, pin terminal, and master properties exist for the object."


schSRC( d_cvId  ) => l_result

"Runs the schematic rules checker (SRC) on a specified cellview."


schSelectAllFig( [d_cvId]  ) => t

"Selects all objects in a cellview that pass the selection filter."


schSelectPoint( w_windowId l_pt g_isPartial g_isAdditive x_timeDelay  ) => t/nil

"Interactively selects the object under the cursor. With single selection, this function first deselects all objects on the selected set. With additive selection, this function maintains the selected set and adds the current object to the selected set. These procedures have the same functionality as mouseSingleSelectPt and mouseAddSelectPt as defined by the graphics editor."


schSetAndLoadTsgTemplateType( t_tsgType [t_templateFileName]  ) => t/nil

"This function sets the tsgTemplateType environment variable and performs a load of the corresponding tsg template file."


schSetCmdOption( g_form s_field l_fieldValues x_key t_mousePrompt  ) => t/nil

"Customizes which form fields are modified by calls to schCmdOption, right mouse button, and schShiftCmdOption, shift-right mouse button, when the command is active."


schSetEnv( t_variableName g_value  ) => t/nil

"Sets the value of a schematic environment variable. This function, along with the schGetEnv function, lets you program the values for various options within the schematic editor without using a form. Also, these functions complement the general environment variable mechanism, which lets you preset values at startup using a .cdsenv file."


schSetSelectOptions(  ) => N/A

"Sets the filter for the selection function. You can select object types by turning toggle switches on or off. You can also choose partial or full selection."


schSetSymbolOrigin( d_cvId l_origin  ) => t/nil

"Moves all the objects in the specified cellview relative to the given origin point."


schSetTextDisplayBBox( tdId instId  ) => t/nil

"Sets or updates the value of a bounding box that encloses a given textDisplay object."


schShiftCmdOption(  ) => t/nil

"Cycles through a predefined set of values. By default, this function is bound to the shift-right mouse button. When you click the right mouse button while pressing the Shift key during an active command, the command applies the next value in the predefined set. You can customize the predefined set of values by making calls to schSetCmdOption."


schSingleSelectBox( [w_win]  [g_partial] [l_bBox]  ) => t

"Selects objects within a rectangular area from a specified schematic editor window. With no arguments, it prompts you to enter the area to be selected in the current window. Partial selection is performed if the window environment variable partialSelect is set."


schSingleSelectPt(  ) => N/A

"Selects the object under the cursor after first deselecting all objects in the selected set."


schSolder( d_cvId l_solderPt  ) => d_shapeId/nil

"Solders two wires together in a schematic. This function places the solder dot over the given point if it is a + or T- wire intersection."


schSubSelectBox( [w_win] [g_partial] [l_bBox]  ) => t/nil

"Deselects objects within a rectangular area from a specified schematic editor window. Implements the sub mode of area selection. With no arguments, it prompts you to enter the deselection area in the current window. Partial deselection is performed if the window environment variable partialSelect is set."


schSync( l_cvId  ) => t

"Synchronizes the schematic and Cadence database (CDB) data representations."


schUnregPostCheckTrigger( s_funcName  ) => t/nil

"Unregisters a post check trigger routine. s_funcName must be the symbol for a routine that was registered using schRegPostCheckTrigger."


schUnregisterFixedMenu( t_category  ) => t/nil

"Unregisters the user-registered fixed menu for specific cellview type and reassigns the default fixed menu."


schUnregisterPopUpMenu( t_category [t_mode]  ) => t/nil

"Unregisters the specific category and accessMode for object-sensitive menus (OSMs) and reassigns the system default menus."


schVIC( d_cvId  ) => l_result

"Runs the cross-view checker (VIC) to check the consistency of the interface of one or more views against the view of the given cellview."


schViewToView( t_sourceLibName t_sourceCellName t_libName t_cellName t_viewFrom t_viewTo t_fromFunc t_toFunc  ) => t/nil

"Generates one type of cellview from another. For example, generates a symbol from a schematic view or a Verilog HDL description view from a symbol."


schZoomFit( f_scale1 f_scale2  ) => t

"Performs a zoom-to-fit with the given zoom scale values."


lasAddPerNetOptByCell( t_libName t_cellName t_viewName l_options  ) => t/nil

"Adds routing options to specific nets in a cellview. Note that this function overwrites any existing per-net routing options in a cellview. To apply per net routing options when using the lasGenCell() function to generate a layout, you must set the g_perNetAction argument to t."


lasAddPerNetOptByNet( t_netName t_libName t_cellName t_viewName l_options  ) => t/nil

"Adds routing options to a single net in a cellview. To apply per net routing options when using the lasGenCell() function to generate a layout, you must set the g_perNetAction argument to t."


lasAddUtility( t_prompt 	t_callback 	[ x_position -1 ]  ) => t/nil

"Adds SKILL functions as pulldown menu entries in the graphical user interface LAS - Utilities menu. To remove any of the SKILL functions you add, use lasDeleteUtility."


lasDeletePerNetOptByCell( t_libName t_cellName t_viewName  ) => t/nil

"Deletes all per net routing options from a cellview."


lasDeletePerNetOptByNet( t_netName t_libName t_cellName t_viewName  ) => t/nil

"Deletes routing options from a specific net in a cellview."


lasDeletePinConstraint( t_cellName  t_pinName  [?topSide g_topSide] [?bottomSide g_bottomSide] [?leftSide g_leftSide] [?rightSide g_rightSide] [?allSides g_allSides]  ) => t/nil

"Removes pin constraints from one or more sides of a cell for the specified terminal."


lasDeleteUtility( stx_item  ) => t/nil

"Removes a pulldown menu entry from the graphical user interface LAS - Utilities menu."


lasExtractPlacement( t_inLibName  t_outLibName t_cellName  [?inView t_inView] [?outView t_outView] [?numRow x_numRow] [?aspectRatio f_aspectRatio] [?nThreshold f_nThreshold] [?pThreshold f_pThreshold] [?lasNDeltaWidth f_lasNDeltaWidth] [?lasPDeltaWidth f_lasPDeltaWidth] [?bottomDiffStrip t_bottomDiffStrip] [?routingStyle t_routingStyle] [?mergePower g_mergePower]  ) => d_outputCVId/nil

"Creates an extracted cellview that you can use to edit transistor placement."


lasGeGenLibCell(  ) => t/nil

"Displays the cell optimization utility in LAS. For more information about optimizing cells, see the Optimizing Cells chapter in the Virtuoso Layout Synthesizer User Guide."


lasGePreviewRoute(  ) => t/nil

"Displays the LAS Preview Net Connections form. Select net names from a list box for the cellview from which this command was activated. The current layer-purpose pair of the LSW is used. The LAS environment variable suggestedRouteWidth is used as the path width. This function opens a window, if necessary, to display the results."


lasGeRemoveRoute(  ) => t/nil

"Displays the Remove Net Connections form. Select net names from a list box for the cellview from which this command was activated."


lasGeSelectLibCell(  ) => t/nil

"Displays the Select Layouts utility in LAS. For more information about the LAS Select Layouts utility, see the Optimizing Cells chapter in the Virtuoso Layout Synthesizer User Guide."


lasGenCell( t_inLibName t_outLibName t_inCellName [?inView t_inView] [?outCellName t_outCellName] [?outView t_outView] [?runPlace g_runPlace] [?runRoute g_runRoute] [?wantCompact g_wantCompact] [?numRow x_numRow] [?aspectRatio f_aspectRatio] [?firstCompDir t_firstCompDir] [?lasVddConnectionWidth f_lasVddConnectionWidth] [?lasVssConnectionWidth f_lasVssConnectionWidth] [?lasNToGroundThreshold f_lasNToGroundThreshold] [?lasPToPowerThreshold f_lasPToPowerThreshold] [?nThreshold f_nThreshold] [?pThreshold f_pThreshold] [?lasNDeltaWidth f_lasNDeltaWidth] [?lasPDeltaWidth f_lasPDeltaWidth] [?lasNWellExtension f_lasNWellExtension] [?lasPWellExtension f_lasPWellExtension] [?nWellAlign f_nWellAlign] [?pWellAlign f_pWellAlign] [?nContLimit x_nContLimit] [?pContLimit x_pContLimit] [?vertConstr f_vertConstr] [?vddWidth f_vddWidth] [?vssWidth f_vssWidth] [?lasSubContLocation t_lasSubContLocation] [?maxSubContDist f_maxSubContDist] [?lasSubsToGateDist f_lasSubsToGateDist] [?objectGrid f_objectGrid] [?diffWireJog g_diffWireJog] [?vertWireJog g_vertWireJog] [?horiWireJog g_horiWireJog] [?lasInternalPin g_lasInternalPin] [?internalPinAccess t_internalPinAccess] [?lasXPinGrid f_lasXPinGrid] [?lasXPinGridOffset f_lasXPinGridOffset] [?lasYPinGrid f_lasYPinGrid] [?lasYPinGridOffset f_lasYPinGridOffset] [?routingStyle t_routingStyle] [?mergePower g_mergePower] [?preferInterRow g_preferInterRow] [?noInterRow g_noInterRow] [?polyRoute x_polyRoute] [?lasInterRowPolyRoute g_lasInterRowPolyRoute] [?lasM2ReplaceM1 g_lasM2ReplaceM1] [?pgList l_pgList] [?polyTextLayer t_polyTextLayer] [?polyTextPurpose t_polyTextPurpose] [?m0TextLayer t_m0TextLayer] [?m0TextPurpose t_m0TextPurpose] [?m1TextLayer t_m1TextLayer] [?m1TextPurpose t_m1TextPurpose] [?m2TextLayer t_m2TextLayer] [?m2TextPurpose t_m2TextPurpose] [?m3TextLayer t_m3TextLayer] [?m3TextPurpose t_m3TextPurpose] [?m4TextLayer t_m4TextLayer] [?m4TextPurpose t_m4TextPurpose] [?prBoundary g_prBoundary] [?quickPlace g_quickPlace] [?randomSeed x_randomSeed] [?lasExhaustivePlaceThreshold x_lasExhaustivePlaceThreshold] [?cluster t_cluster] [?flattenHier t_flattenHier] [?yNetBias f_yNetBias] [?rowWidthFactor l_rowWidthFactor] [?preplaceFile t_preplaceFile] [?confNameList l_confNameList] [?grpNameList l_grpNameList] [?timingFile t_timingFile] [?autoJog g_autoJog] [?maxAutoJogPerWire x_maxAutoJogPerWire] [?bentGate t_bentGate] [?bottomDiffStrip t_bottomDiffStrip] [?intraRowRouting t_intraRowRouting] [?intraRowTrack x_intraRowTrack] [?overXtrRoute t_overXtrRoute] [?polyInterRow t_polyInterRow] [?ioPolyRouting t_ioPolyRouting] [?polyN2PGateRouting t_polyN2PGateRouting] [?doublePolyRouting g_doublePolyRouting] [?polyInterconnectWidth g_polyInterconnectWidth] [?pgNoJogBus g_pgNoJogBus] [?pgNoJogBranch g_pgNoJogBranch] [?stackVias g_stackVias] [?grdRingNtpy f_grdRingNtpy] [?grdRingPtpy f_grdRingPtpy] [?grdRingOpenLeft g_grdRingOpenLeft] [?grdRingOpenRight g_grdRingOpenRight] [?grdRingOpenTop g_grdRingOpenTop] [?grdRingOpenBottom g_grdRingOpenBottom] [?perNetAction g_perNetAction] [?suggestedRoute g_suggestedRoute] [?prCellType t_prCellType] [?minDiffMode g_minDiffMode] [?allRigid g_allRigid] [?pinPlacement t_pinPlacement] [?onePointTBIO g_onePointTBIO] [?onePointLRIO g_onePointLRIO] [?oneInternalPoint g_oneInternalPoint] [?metalSD g_metalSD] [?lessMetalOverDiff g_lessMetalOverDiff] [?powerGridWidth f_powerGridWidth] [?groundGridWidth f_groundGridWidth] [?powerGridOffset f_powerGridOffset] [?groundGridOffset f_groundGridOffset] [?supplyGridType t_supplyGridType] [?gridDist f_gridDist] [?pgGridPin g_pgGridPin] [?diffConnect g_diffConnect] [?contArrayOnPg t_contArrayOnPg] [?m3StackMetal g_m3StackMetal] [?m3PowerWidth f_m3PowerWidth] [?m3GroundWidth f_m3GroundWidth] [?hBusCoord g_hBusCoord] [?pwrHBusCoord l_pwrHBusCoord] [?gndHBusCoord l_gndHBusCoord] [?m3ContDist f_m3ContDist] [?m2IntraRowRoute g_m2IntraRowRoute] [?mergeWidthPwr f_mergeWidthPwr] [?mergeWidthGnd f_mergeWidthGnd] [?addLeakContact g_addLeakContact] [?leakSide t_leakSide] [?matchContDir g_matchContDir] [?subDensity f_subDensity] [?nSubSignalName t_nSubSignalName] [?nSubSignalWidth f_nSubSignalWidth] [?pSubSignalName t_pSubSignalName] [?pSubSignalWidth f_pSubSignalWidth] [?DirControl t_DirControl] [?gridOn g_gridOn] [?combOn g_combOn] [?polyMatchXtr t_polyMatchXtr] [?logFileName t_logFileName] [?diffEdgeAlign t_diffEdgeAlign] [?maxDiffContCutN x_maxDiffContCutN] [?maxDiffContCutP x_maxDiffContCutP] [?minBusContact x_minBusContact] [?maxBusContact x_maxBusContact] [?abutWells g_abutWells] [?ChainEffort t_ChainEffort] [?SLAction ] [?SLConnect ] [?SLPower ] [?SLIO ] [?SLInter ] [?SLGate ] [?SLMax ] [?SLAutoJog ] [?SLStackingContact ] [?SLPolyConnect ] [?SLDiffCont ] [?SLNDiffCover ] [?SLPDiffCover ]  ) => d_outputCVId/nil

"This function generates a symbolic layout from a schematic or netlist, subject to the options and constraints you specify."


lasGetPerNetOptByCell( t_libName t_cellName t_viewName  ) => l_result/nil

"Returns a list of the per net routing options applied to a cellview."


lasGetPerNetOptByNet( t_netName t_libName t_cellName t_viewName  ) => l_result/nil

"Returns the routing options applied to a specific net in a cellview."


lasLoadPerNetOpt( t_fileName t_libName t_cellName t_viewName  ) => t/nil

"Loads the per net routing options from an ASCII file into the cellview you specify. The per net information in the ASCII file replaces any existing per net routing options in the cellview. Note that the per net routing options in the ASCII file must be in LAS statement format."


lasLoadPinConstraint( t_cellName t_fileName [?libName t_libName] [?viewName t_viewName] [?metal0LayerName t_metal0LayerName] [?metal1LayerName t_metal1LayerName] [?metal2LayerName t_metal2LayerName] [?metal3LayerName t_metal3LayerName] [?metal4LayerName t_metal4LayerName] [?polyLayerName t_polyLayerName] [?filteredPins t_filteredPins] [?loadAspectRatio g_loadAspectRatio]  ) => t/nil

"Loads pin constraints from a file or from a cellview containing floorplan data."


lasPreviewRoute( d_cellView lt_netList [?routingStyle 	t_routingStyle] [?mergePower	g_mergePower] [?intraRowRouting 	t_intraRowRouting] [?intraRowTrack 	x_intraRowTrack] [?layer		t_layer] [?purpose		t_purpose] [?width		f_width] [?openWindow		g_openWindow]  ) => t/nil

"Use LAS router to produce routes for a selected set of nets in a placed cellview. The routes are represented in the cellview with paths on a single layer/purpose."


lasRemoveRoute( d_cellView  lt_netList   ) => t/nil

"Removes any existing routes from a cellview for a given net or list of nets."


lasSavePerNetOpt( t_fileName t_libName t_cellName t_viewName  ) => t/nil

"Saves per net routing options from a cellview into an ASCII file you specify. Note that the per net routing options saved to the ASCII file are in LAS statement format."


lasSavePinConstraint( t_cellName t_fileName  ) => t/nil

"Saves the current pin side and pin order constraints for the specified cell in a constraints file."


lasSetCompact1Process( t_funcName   ) => t/nil

"Assigns or removes an assignment from a function as the process you want LAS to run directly after the first compaction round for a layout. Once assigned, LAS automatically processes this function right after the first round of compaction completes."


lasSetCompact2Process( t_funcName   ) => t/nil

"Assigns or removes an assignment from a function as the process you want LAS to run directly after the second compaction round for a layout. Once assigned, LAS automatically processes this function right after the second round of compaction completes."


lasSetCompact3Process( t_funcName   ) => t/nil

"Assigns or removes an assignment from a function as the process you want LAS to run directly after the third compaction round for a layout. Once assigned, LAS automatically processes this function right after the third round of compaction completes."


lasSetEndOptProcess( t_funcName   ) => t/nil

"Assigns or removes an assignment from a function as the process run after LAS optimizes a cell or list of cells. Once assigned, LAS processes this function after it optimizes a cell or list of cells."


lasSetInitOptProcess( t_funcName   ) => t/nil

"Assigns or removes an assignment from a function as the process run before cell optimization. Once assigned, LAS automatically processes this function right before it optimizes a cell or list of cells."


lasSetOrderConstraint( t_cellName [?topSide l_topSideOrderList] [?bottomSide l_bottomSideOrderList] [?leftSide l_leftSideOrderList] [?rightSide l_rightSideOrderList] [?topPositionMax f_topPositionMax] [?bottomPositionMax f_bottomPositionMax] [?leftPositionMax f_leftPositionMax] [?rightPositionMax f_rightPositionMax] [?topType t_topType] [?bottomType t_bottomType] [?leftType t_leftType] [?rightType t_rightType]  ) => t/nil

"Places the specified pins with the order and position calculation method you specify. Pins constrained to the left or right sides of the cell are placed from the bottom to the top of the side, and pins constrained to the top or bottom sides of the cell are placed from the left to the right of the side."


lasSetPinConstraint( d_cellViewID t_pinName [?topSide g_topSide] [?bottomSide g_bottomSide] [?leftSide g_leftSide] [?rightSide g_rightSide] [?anySide g_anySide] [?topLayer t_topLayer] [?bottomLayer t_bottomLayer] [?leftLayer t_leftLayer] [?rightLayer t_rightLayer] [?topWidth f_topWidth] [?bottomWidth f_bottomWidth] [?leftWidth f_leftWidth] [?rightWidth f_rightWidth] [?feedthru g_feedthrough] [?replace t_replace]  ) => t/nil

"Applies side, layer, and width constraints to a pin you specify."


lasSetPostCompactProcess( t_funcName   ) => t/nil

"Allows you to define and insert postcompaction data-processing operations into the LAS layout synthesis process. LAS runs this function automatically after compaction for the layout completes."


lasSetPreCompactProcess( t_funcName   ) => t/nil

"Allows you to define and insert precompaction data-processing operations into the LAS layout synthesis process. LAS runs this function after it routes the layout. After this function is complete, compaction begins."


lasSetPreOptProcess( t_funcName   ) => t/nil

"Allows you to define and insert cell optimization data processing operations for a specific cellview before LAS optimizes the cellview. LAS runs this function before it begins optimizing a cellview."


lasShowUtility(  ) => t/nil

"Prints information about the utility functions currently installed. The utility functions are custom SKILL routines that appear as menu items in the LAS - Utilities menu."


iseStartInteractive(  ) => t/nil

"Starts the default interactive simulation environment. The simulation environment must be initialized before iseStartInteractive is called; that is, the simInitEnv or simInitEnvWithArgs function must have been called."


prAlignCell( d_cv  l_cells  t_dir	  t_mode	  t_spacing	  t_position	  ) => t/nil

"Aligns a group of cell instances according to the specified direction, spacing, and alignment position options. Usually, this function is used to align standard cells to form a row, to align the IO pads"


prConnDowndate( d_cv  ) => t/nil

"Removes all stub routing and connectivity done by prConnUpdate and all connections that are marked as being made by abutment or stub. This changes the status of nets from connected to unconnected."


prConnUpdate( d_cv  t_stubRoute  ) => t/nil

"Updates the connectivity of all nets in the current design. Examines the design for connections made by abutment, and marks them as done for routing purposes. Checks legality of abutments, and fails if pins that are in different nets abut. If errors occur, they are created as geometries on the Marker layer and messages are sent to the CDS.log file."


prConnUpdateNet( d_net [t_stubRoute]  ) => t/nil

"Updates the connectivity of a designated net. Examines the net for connections made by abutment, and marks them as done for routing purposes. Checks legality of abutments, and fails if pins that are in different nets abut. If errors occur, they are created as geometries on the Marker layer and messages are sent to the CDS.log file."


prCreateChannels( d_cv t_mainDir t_prefix  ) => t/nil

"Creates new channels for the entire design. Any existing channels are deleted before this function creates new ones."


prCreateCutlines( d_cv t_mainDir  ) => t/nil

"Creates a relation tree, displays the cutlines, and adds the cutline geometries to the database. If a relation tree already exists, it is deleted and a new one is generated."


prDbToPtext( d_cv t_pTextFile x_option  ) => t/nil

"Generates an ASCII Relative Placement file based on the current placement of instances in the current design."


prDeleteChannels( d_cv  ) => t/nil

"Deletes all existing channels in the cellview. However, the channel masters are not deleted from the library."


prDeleteCutlines( d_cv  ) => t/nil

"Deletes the relation tree (if one exists), the cutlines, and the cutline geometries in the database."


prGlueIn( d_cv d_glueCV	 x_numGlue	 t_prefix	 t_startPos	 t_netAssoc	 t_mapFileName	  ) => l_glueInsts/nil

"Creates and inserts glue cells into a design. Glue cells are cells that are not in the original connectivity but are used to constrain the routing in certain areas. Common examples of glue cells are IO corner, feedthrough, and fill cells."


prGlueRm( d_cv l_cells	n  ) => t/nil

"Removes glue cells from a design. The glue cell terminals are disconnected from their associated nets, and the instances are removed."


prGrp( d_cv l_parameters  ) => t/nil

"Optimizes the global routing based on net length and channel congestion to distribute the congestion evenly along the channels. Cells might be mirrored and interchanged within rows as a result of optimization."


prIOPlace(  ) => N/A

"Repositions only the IO pads (or terminals) of a design to minimize the total weighted wire length from the core cells to the IO cells. The IO pads are redistributed across corners of the IO frame to position the cells around the four sides of the IO frame."


prIgIrConnUpdateNet(  ) => N/A

"This is the user interface for the single-net connectivity update function. It calls and executes the prConnUpdateNet function to update the connectivity for a designated net, and prints the resulting net connectivity status using dialogs. If the designated net is not completely global routed, a form is displayed letting you specify a global net for decoupled net support. If you leave the net status unconnected, which is the default, the global router can be used to complete the net."


prIgIrGetAtermFromInstInst(  ) => N/A

"Returns the d_instTerm pointer for the pin instance on a device instance. The function returns nil if the instTerm is not found."


prIgIrGetChannelAccessPins(  ) => N/A

"Returns a list of pins in the d_net that can be accessed from a designated channel. If the net has no pins with access to the d_chan, the function returns nil."


prIgIrGetOuterChannels(  ) => N/A

"Lists the outer channels of a cellview. Either the channel instance or its appropriate relation identifier can be listed."


prIgIrGetPinAccessChannels(  ) => N/A

"Lists access directions for a pin and the channel by which the pin can be accessed in each direction. The access direction listed is adjusted on the orientation of the cell. If the instance adjacent to the d_cellInst is not a channel, the access to that direction is ignored."


prIgIrGetPinAccessDir(  ) => N/A

"Returns the access directions of a pin.The function adjusts the direction definition depending on the cell orientation. If the pin has no access, or the access direction is not defined, nil is returned."


prIgIrVerifyRep(  ) => N/A

"Verifies that the cellview is currently legal for interactive global routing (Iglr) or for using prIglr* SKILL functions to write a customized router."


prIglrConnectExit(  ) => N/A

"Creates a global routed pin instance of a designated formal pin in a designated channel and in a designated exit channel. If you call the function twice with identical input, it creates two pins because it does not check to see if the pin already exists. Use the prIglrFindPinInChannel function to see if the pin already exists before using this function. The prIglrConnectSet function replaces this lower level function."


prIglrConnectPin( d_net  t_subnetName  d_devInst  d_fPin  d_chan  t_accessDir  ) => (d_instId)

"Creates a global routed pin instance of a designated formal pin in a designated channel. If you call the function twice with identical input, it creates two pins because it does not check to see if the pin already exists. Use the prIglrFindPinInChannel function to see if the pin already exists before using this function. The prIglrConnectSet function replaces this lower level function."


prIglrConnectSet( l_pinSet  l_exitSet  d_net  ) => (d_chan...)/nil

"Connects a set of points (pins or exit points) to create a new subnet. This function accepts pins and exit points rather than interactive snap points. It returns a list of channels in which changes were made."


prIglrDisconnectExit( d_instId  d_exitInst  d_chan  d_exitChan  ) => t/nil

"Disconnects a designated pin instance that represents the channel exit point in a designated channel."


prIglrDisconnectPin( d_instId d_chan  ) => t/nil

"Disconnects a designated pin instance in a designated channel."


prIglrFeedAssign( d_Inst  d_fPin  d_net  ) => t/nil

"Assigns or deassigns (releases) feedthrough pins."


prIglrFindExitInChannel( exitList  d_chan  d_cvNet  ) => d_instId/nil

"Finds the exit pin instance that corresponds to a specified exit in a designated channel. Use inst~>pin to get the pin and inst~>pin ~>net to get the net. This function calls the prIglrFindInstInChannel function."


prIglrFindInstInChannel( area_bBox  layerPurposePair  d_chan d_net  ) => (d_instId...)

"Lists instances of pins in a designated channel that are in a designated net and are completely or partially within a given region. If an instance in the channel is attached to a special channel subnet (such as, vddInt@1), a special check is made to be sure this subnet"


prIglrGetNetByName( d_cv t_netName  ) => d_net

"Finds the database pointer to the net specified by t_netName. The function searches top-level nets and child nets. The dbFindNetByName function does the same thing as this function, but only searches top-level nets. This function returns nil if no net with the given name is found."


prImprovePlacer( d_cv g_feedCv x_initialtemp	 t_mode	 x_jmpSR	 f_VerticalWireWt	 [x_insertFeeds] [x_fixIo]  [x_mirrorcell]  ) => t/nil

"Uses a simulated annealing algorithm for placement improvement in which the annealing schedule specifies a beginning temperature, a temperature decrement function, an equilibrium condition at each temperature, and a convergence or frozen condition."


prInitialPlacer( d_cv  g_feedCV  t_speedSetting  t_fastPlc  f_verticalWireWeight  t_insertFeeds  f_snapgrid   [t_option1]  [t_option2]   [f_mirrorCells]  ) => t/nil

"Performs clustered placement on the design specified by the d_cv cellview parameter. The prInitialPlacer function places standard cells in rows, provided any macro cells have been placed previously prInitialPlacer does not move preplaced cells if you set their placement status to Firm. After prInitialPlacer executes, cells that have not yet been placed are placed and assigned a placement status of Placed."


prIoJust( d_cv t_style	 t_position	 f_ioToCellDist	 f_ioToIoMinGap	  ) => t/nil

"Adjusts IOs, either instances or pins, around the core. It also sets the PRioSide property on IO instances or sets the access direction of IO pins such that the orientation and alignment of the IOs are modified based on the selected options."


prPtextToDb( d_cv t_pTextFile d_feedCv  ) => t/nil

"Reads a Relative Placement file, letting you restore placement to the current design."


prRelAdjacency( d_relId/d_instId t_direction [t_type]  ) => (d_relId/d_instId...)

"Returns a list of all adjacent relation identifiers or instance identifiers for the given relation identifier or instance identifier. The list always holds the leaf-level relations. Hierarchy in the relation tree is flattened. An instance identifier can be obtained from a relation identifier with prRelGetInst. A relation identifier can be obtained from an instance identifier with prRelFindRel."


prRelFindRel( d_instId  ) => d_relId

"Returns the relation that matches a designated instance."


prRelGetFirst( d_relId   ) => d_relId/nil

"Retrieves the first relation or instance based on the type you specify."


prRelGetInst( d_relId   ) => d_instId

"Returns the instance that matches a designated relation."


prRelGetLast( d_relId   ) => (d_relId/d_instId)/nil

"Retrieves the last child relation or instance under d_relId in the relation tree."


prRelGetNext( d_relId  ) => d_rel(d_relId/d_instId)/nil

"Returns the next relation of the specified relation."


prRelGetParent( d_instId  ) => d_rel/nil

"Gets the parent relation of the instance you specify."


prRelGetPrevious( d_relId  ) => d_rel(d_relId/d_instId)/nil

"Returns the previous relation of the specified relation, or nil if the relation you specify is the first child in the relation tree."


prRelGroupOf( d_relId/d_instId  [t_type]   ) => (d_relId/d_instId...)

"Lists all objects in the same group as the object with the given relation identifier or instance identifier. To find the first cell in a group, you can use this function: car(prRelGroupOf(d_relId t_type))"


prRelLeafGen( d_relId/d_instId  t_cellType  [t_type]  ) => (d_relId/d_instId...)

"Lists all leaf-relation or leaf-instance identifiers. The list is ordered from the deepest relation up. This function is useful for listing all relation tree leaf nodes that correspond directly to an instance exactly once."


prRelTopRel( d_cv   ) => d_relId

"Returns the starting relation for the current design revision."


prRellsLeaf(  ) => N/A

"Determines whether the relation is a leaf of the relation tree; that is, it has no child relations."


prRellsRel(  ) => N/A

"Verifies that the specified relation is in the relation tree."


prSave( d_cv [t_viewName]  ) => t/nil

"Saves the cellview and the channels within the cellview under the current or a new view name. The cellview is saved into a new view, viewName, and all subordinate channel cellviews also are saved into the same new view name (t_viewName). If the option t_viewName is not specified, the cellview is saved under the current view name."


prShiftToOrigin( d_cv  ) => t/nil

"Shifts the design to the origin. Use this function before you generate channels with Cell Ensemble to ensure that the channel coordinates have positive values."


prSplitNet( d_cv d_net  ) => t/nil

"Takes a supply or ground net that is logically connected to both IO and core logic in the given cellview, and splits this net into two nets; one for the ring logic to the IO channels and an internal net for the core logic. All pins on the core cells and blocks are assigned to the internal subnet. All pins on IO cells, except pins of type output, are assigned to the ring subnet. Pins of type output on IO cells are assigned to the internal subnet. All pins on IO corner cells are assigned to the ring subnet."


prUnplaceAll( d_cv  ) => t/nil

"Moves all cells outside the cell boundary and sets their placement status to Unplaced. The prUpdateAll function places standard cells to the right of the boundary, macro cells to the left of the boundary, and IO cells at the top of the boundary."


prUnplaceIO( d_cv   ) => t/nil

"Moves all IO cells to the outside and top of the cell boundary and sets their placement status to Unplaced."


prUnplaceMacro( d_cv   ) => t/nil

"Moves all macro cells to the outside and left of the cell boundary and sets their placement status to Unplaced."


prUnplaceStd( d_cv   ) => t/nil

"Moves all standard cells to the outside and right of the cell boundary and sets their placement status to Unplaced."


prUnsplitNets(  ) => N/A




prUpdateNetStatus( l_netId t_attribute t_newValue   ) => t/nil

"Changes the status of one of several attributes of a net."


printFunctions( t_pattern [ p_outport ]  ) => t

"Prints all function names that contain the given substring or match the given regular expression."


printMIF( l_statement1 l_statement2 ... l_statementN  ) => x_statementsWritten

"Writes MIF statements, represented in their internal SMIFT list form, to an open output file."


printObject( g_object [ p_outputPort ]  ) => g_result

"A generic function that writes a description of an object to an output port."


printVariables( t_pattern [ p_outport ]  ) => t

"Prints all variable names that contain the given substring or match the given regular expression, along with their values."


lxHiAlign(  ) => t

"Starts the Virtuoso XL Align command and opens the Virtuoso XL Alignment form."


lxHiHideIncNets(  ) => cellview_id

"Runs the Virtuoso XL Hide Incomplete Nets command. Removes the Show Incomplete Nets form, if present. Prints a cellview ID number in the CIW output window."


lxHiMoveAutomatically(  ) => t

"Starts the Virtuoso XL Place From Schematic command. If a connectivity reference is not found, it opens the Define Connectivity Reference form."


lxHiProbe(  ) => t

"Starts the Virtuoso XL Probe command."


lxHiReInitDesign(  ) => t

"Starts the Virtuoso XL Gen from Source command."


lxHiShowIncNets(  ) => t

"Starts the Virtuoso XL Show Incomplete Nets command and opens the Show Incomplete Nets form. It also prints in the CIW the number of incomplete nets you had when the command was initiated."


lxHiSwapComps(  ) => t

"Starts the Virtuoso XL Swap Components command."


lxHiUpdateCellViewPair(  ) => t

"Starts the Virtuoso XL Update - Source command and opens the Define Connectivity Reference form."


lxHiUpdateComponentsAndNets(  ) => t

"Starts the Virtuoso XL Update - Components and Nets command. Opens the Define Connectivity Reference form."


lxHiUpdateDeviceCorr(  ) => t

"Starts the Virtuoso XL Update - Device Correspondence command. Opens the Define Connectivity Reference form."


lxHiUpdateLayParameters(  ) => t

"Starts the Virtuoso XL Update - Layout Parameters command."


lxHiUpdateSchParameters(  ) => t

"Starts the Virtuoso XL Update - Schematic Parameters command."


lxHiUpdateSwitchViews(  ) => t

"Starts the Virtuoso XL Update - Change Instance View command."


lxHiVerifyDesign(  ) => window_id

"Starts the Virtuoso XL Check - Against Source command. Opens the Define Connectivity Reference form."


lxHiVerifyStatus(  ) => window_id

"Starts the Virtuoso XL Check - Shorts and Opens command. Opens the Virtuoso XL Info form and writes the number of incomplete nets, shorts between nets, and invalid overlaps into the form."


lxPermPermutePins(  ) => t

"Starts the Virtuoso LX Permute Pins command."


lxProbeRemoveAll(  ) => t

"Removes all probes from the layout window."


lxToggleIncNets(  ) => t

"If the Show Incomplete Nets command is on, this command turns it off. If the Show Incomplete Nets command is off, this command turns it on and opens the Show Incomplete Nets form."


addDefstructClass( s_name  ) => u_classObject

"Creates a class for the defstruct."


addPoint( l_point  ) => t / nil

"Adds the point to the enterfunction in the current window. "


addSubWindowTitle( x_windowtitle ) => t/nil

"Adds a title to the current subwindow in the active window. The current subwindow is defined using the currentSubwindow command."


addSubwindow(  ) => x_subwindowID/nil

"Adds a subwindow to the current Waveform window and returns the number for the new subwindow, which is found in the upper right corner."


addTitle( x_windowtitle ) => t/nil

"Adds a title to the current active OCEAN window. The current window is defined using the currentWindow command."


addWaveLabel( x_waveIndex l_location t_label [?textOffset l_textOffset] [?Color x_color] [?justify t_justify] [?fontStyle t_fontStyle] [?height x_height] [?orient t_orient] [?drafting g_drafting] [?overBar g_overbar] ) => s_labelId/nil

"Attaches a label to the specified waveform curve in the current subwindow."


addWindowLabel( l_location t_label  ) => s_labelId/nil

"Displays a label in the current subwindow. The location for the label is specified with a list of two numbers between 0 and 1."


rodAddMPPChopHole(  ) => N/A

"Adds a chop hole to all choppable parts of a ROD multipart path. To define a chop hole, you specify a list of points on the centerline of the master path. The results depend on whether the master path is choppable or not. "


rodAddPoints(  ) => N/A

"Adds two points together and returns the resulting point as l_point."


rodAddToX(  ) => N/A

"Adds a number to the X coordinate of l_point and returns the resulting point as l_point."


rodAddToY(  ) => N/A

"Adds a number to the Y coordinate of l_point and returns the resulting point as l_point."


rodAlign(  ) => N/A

"Aligns a named object by a point handle on that object to a specific point or to a point handle on a reference object. You can align objects that are at different levels of hierarchy as long as both objects are in the same top-level layout cellview. You can specify positive or negative separation between alignment points in the direction of both the X and Y axes, either as absolute distances or with Cadence, SKILL language expressions. The system applies the offset from the reference point or reference object to the object to be aligned."


rodAssignHandleToParameter(  ) => N/A

"Assigns one or more user- or system-defined point handles on a ROD object within a SKILL-based parameterized cell (pcell) to a single pcell parameter so that you can change the value of the parameter by graphically stretching the handle(s). Stretching a handle has the same effect as changing the value of the associated parameter for the pcell instance using the Edit Properties form. You cannot stretch handles on the pcell master. All rodAssignHandleToParameter statements must occur within the body-of-code section of a SKILL-based pcell."


rodCreateHandle(  ) => N/A

"Creates a user-defined handle for any ROD object (named shape, instance, or cellview); the object must be at level zero in the hierarchy. For example, you can create a handle for polyRect or for instance I1, but not for I1/polyRect."


rodCreatePath(  ) => N/A

"Creates a path consisting of one or more parts at level zero in the hierarchy on the same or on different layers from a list of points or from one or more exsiting objects. A path consisting of multiple parts is called a multipart path. You can use the rodCreatePath function to create one-part paths, simple multipart paths, or complex multipart paths such as guard rings, transistors, buses, and shielded paths."


rodCreatePolygon(  ) => N/A

"Creates one polygon from a list of points or from one or more named objects. Also creates a ROD object containing information associated with the polygon, including its name and database ID. The associated ROD object is identified by a ROD object ID. The polygon is created at level zero in the hierarchy. You can specify connectivity for the polygon by associating it with a specific terminal and net. You can also make the polygon into a pin."


rodCreateRect(  ) => N/A

"Creates a single rectangle, one or more rows and/or columns of rectangles, or fills a bounding box with rectangles. Also creates a ROD object for each rectangle, containing information about the rectangle, including its name and database ID. Each ROD object is identified by a ROD object ID. Each rectangle is a separate object, created at level zero in the hierarchy. You can also specify connectivity to associate the entire set of rectangles with the same terminal and net and to turn the entire set of rectangles into a pin on the specified terminal and net."


rodDeleteHandle(  ) => N/A

"Deletes a user-defined handle. You provide the ROD object ID and handle name."


rodGetHandle( R_rodObj 	S_name   ) => g_handleValue | nil

"Returns the value of a system- or user-defined handle. You specify the handle name and the ROD object ID for the object with which the handle is associated."


rodGetNamedShapes(  ) => N/A

"Returns a list of the ROD object IDs for all named shapes (rectangles, polygons, and paths) at level zero in the hierarchy within the specified cellview that are ROD objects. This function looks only at the top level of hierarchy and does not return the ROD object ID for instances or cellviews."


rodGetObj(  ) => N/A

"Lets you find a named object at any level of hierarchy in your cellview. You must specify either the database ID for the object or its hierarchical name and the cellview ID. If your rodGetObj statement occurs in the body of a pcDefinePCell function or tcCreateDeviceClass function call, you can let the cellview ID default to pcCellView or tcCellView, respectively."


rodIsFigNameUnused(  ) => N/A

"Determines whether the name specified by S_name is a valid name and whether it is already assigned to a ROD object, instance, or mosaic in the cellview specified by d_cvId. A valid name cannot contain hierarchy (indicated by one or more slashes) and cannot be an empty string."


rodIsHandle(  ) => N/A

"Determines whether the name specified for S_name identifies a valid system- or user-defined handle associated with the object specified by R_rodObj. Use this function prior to the rodGetHandle function when you want to verify that the handle exists before you try to access it."


rodIsObj(  ) => N/A

"Determines whether the object specified for g_object identifies a valid ROD object. This function is useful for testing variables and parameters to see if they contain a ROD object ID."


rodNameShape(  ) => N/A

"Assigns a name to an unnamed database shape and creates a ROD object containing information associated with the shape, including its name and database ID. The associated ROD object is identified by a ROD object ID. You can assign a name to any of the following shapes:"


rodPointX(  ) => N/A

"Returns the X coordinate of the point specified by l_point."


rodPointY(  ) => N/A

"Returns the Y coordinate of the point specified by l_point."


rodSubPoints(  ) => N/A

"Subtracts l_point2 from l_point1 and returns the resulting point as l_point."


rodUnAlign(  ) => N/A

"When you specify only one ROD object ID, removes all alignments for the object specified. When you specify two ROD object IDs, removes only the alignment between the two objects."


rodUnNameShape(  ) => N/A

"Removes the name from a named shape or list of named shapes. The ROD object ID for the shape and all user-defined handles associated with it are deleted. If the object is an instance, the instance keeps its name but all user-defined handles associated with the instance are deleted. Also removes all alignment constraints that reference the shape."


simCleanRun(  ) => t/nil

"Deletes files created by both the simulation environment and the analysis tool being used from the simulation run directory. The function simCleanRun deletes only those files that can be recreated by renetlisting or resimulating. Files that are required to rerun the simulation, such as the si.env and control files, are not deleted. The function displays a dialog box to confirm that you want to delete the information. If the deletion is confirmed, the files that the simulation environment creates are deleted as well as the files specified by the simCleanFileList variable. The simCleanFileList variable is set differently by each application integrated into the simulation environment."


simInitEnv(  ) => t/nil

"Initializes the simulation environment within the Cadence graphics environment. In addition to defining the SKILL environment needed for the simulation environment and the target application, this function creates and initializes the run directory as needed using the simInitRunDir function."


simInitEnvWithArgs( t_runDirName {t_libName|nil}{t_cellName|nil} {t_viewName|nil} {t_simulatorName/nil}forceInit  ) => t/nil

"Initializes the simulation environment within the Cadence graphics environment. In addition to defining the SKILL environment needed for the simulation environment and the target application, this function creates and initializes the run directory as needed."


simJobMonitor(  ) => t/nil

"Invokes a form displaying the analysis jobs invoked in the background using the simRunNetAndSim and simRunNetAndSimWithArgs functions. The analysis job is listed on the form, as well as its current status, time of invocation, and execution priority. Using this form, you can view the run log of a job, terminate the execution of an active job, suspend the execution of an active job, change the execution priority of a job, or delete a job from the form."


simRunNetAndSim(  ) => t/nil

"Starts an analysis job in either foreground or background mode. You must initialize the simulation environment before simRunNetAndSim is called. To do so, call either the simInitEnv or simInitEnvWithArgs function."


simRunNetAndSimWithArgs( {t_libName|nil} {t_cellName|nil}{t_viewName|nil} {t_simulatorName|nil} {doNetlist doSimulation runBackground x_jobPriority  ) => t/nil

"Starts an analysis job in either foreground or background mode. The simulation environment must be initialized before simRunNetAndSim is called. That is, the simInitEnv or simInitEnvWithArgs function must have been called. The simRunDir global variable is used as the current run directory and is set when the simulation environment is initialized."


simRunNetAndSimWithCmd( {t_libName|nil} {t_cellName|nil}{t_viewName|nil} {t_simulatorName|nil} t_cmdToBeExecuted runBackground x_jobPriority  ) => t/nil

"Executes a function in either foreground or background mode. Before calling simRunNetAndSimWithCmd, you must initialize the simulation environment. The simRunDir global variable is used as the current run directory and is set when the simulation environment is initialized."


simWaveOpen(  ) => t/nil

"Invokes a form displaying the current simulation run directory name and prompts you for the name of the waveform file to display. The default waveform file is raw/waves in the simulation run directory. When the filename is specified, a new window is opened, displaying the waveform information."


adfpSaveFile( d_cv engineName fileName relative  ) => t/nil

"Writes out information obtained from current floorplanning operations to the specified floorplan file. You can use this command when the view might change and you want to save the floorplan you have defined thus far."


geAddHilightArc( g_hlSetId l_ellipse_bBox l_arc_bBox  ) => g_hlObjectId / nil

"Adds an arc to a highlight set."


geAddHilightCircle( g_hlSetId l_center n_radius  ) => g_hlObjectId / nil

"Adds a circle to a highlight set."


geAddHilightDonut( g_hlSetId l_center n_outR n_holeR  ) => g_hlObjectId / nil

"Adds a donut to a highlight set."


geAddHilightDot( g_hlSetId l_point n_width n_height  ) => g_hlObjectId / nil

"Adds a dot to a highlight set."


geAddHilightEllipse( g_hlSetId l_bBox  ) => g_hlObjectId / nil

"Adds a ellipse to a highlight set."


geAddHilightFig( g_hlSetId d_figId [g_drawAll]  ) => g_hlObjectId / nil

"Adds a figure to a highlight set."


geAddHilightLabel( g_hlSetId l_origin t_label t_just t_orient t_font n_height g_draftingP [g_overBar]  ) => g_hlObjectId / nil

"Adds a label to a highlight set."


geAddHilightLine( g_hlSetId l_points  ) => g_hlObjectId / nil

"Adds a line to a highlight set."


geAddHilightPath( g_hlSetId l_points n_width  ) => g_hlObjectId / nil

"Adds a path to a highlight set."


geAddHilightPolygon( g_hlSetId l_points  ) => g_hlObjectId / nil

"Adds a polygon to a highlight set."


geAddHilightRectangle( g_hlSetId l_bBox  ) => g_hlObjectId / nil

"Adds a rectangle to a highlight set."


geAddInstProbe( [w_windowId] [l_lpp] [lt_probeSpec]  ) => o_probe

"Adds an instance probe to a window."


geAddNetProbe( [w_windowId] [l_lpp] [lt_probeSpec]  ) => o_probe

"Adds a net probe to a window."


geAddPathProbe( [w_windowId] [l_lpp] [lt_probeSpec1] [lt_probeSpec2]  ) => o_probe

"Adds a path probe to a window."


geAddSelectBox( [w_windowId] [g_partial] [l_bBox]  ) => t / nil

"Implements the add mode of area selection."


geAddSelectPoint( [w_windowId] [g_partial] [l_point]  ) => t / nil

"Implements the add mode of point selection."


geAddTermProbe( [w_windowId] [l_lpp] [lt_probeSpec]  ) => o_probe

"Adds a terminal probe to a window."


geCellViewToDlist( d_cellViewId  ) => l_dlist / nil

"Returns a display list of all the objects in a cellview."


geCenter( [w_windowId]  ) => t / nil

"Pans the display so that the edit cellview is centered in the window."


geChangeCellView( [w_windowId] [t_libName] [t_cellName] [t_viewName] [t_access_mode]  ) => w_windowId

"Opens a design in an existing window."


geChangeEditMode( t_newMode [w_windowId]  ) => t / nil

"Sets the mode of a design, allowing you to edit or view the design."


geClosePolygon( d_cellViewId l_points t_snapMode  ) => t / nil

"Creates a closed polygon from a list of points."


geCompressPointArray( d_cellViewId l_points g_closedList  ) => l_pointList / nil

"Searches a point list in a cellview for colinear points and deletes the intermediate colinear points."


geCoordp( coord  ) => t / nil

"Determines whether the data supplied in coord is a point coordinate."


geCopySelSet( [w_windowId] [l_sourcePt] [l_destPt]  ) => t / nil

"Procedural interface to copy the selected set."


geCreateBend( d_cellViewId tx_layer l_points f_width1  f_width2 t_bendStyle f_bendFac f_radFac f_chamFac  x_nPtsToPI  ) => d_bendId / nil

"Creates a transmission line bend in a cellview."


geCreateHilightSet( d_cellViewId l_layerPurposePair  [g_notGlobal]  ) => g_hlSetId / nil

"Creates a highlight set."


geCreateMarker( d_dbobjectId t_severity t_owner t_reason  t_displayText  ) => d_shapeId / nil

"Creates a box-shaped marker whose size and position are determined by the software."


geCreateMarkerByBBox( d_cellViewId t_type t_owner t_reason  t_displayText l_bBox  ) => d_shapeId / nil

"Creates a rectangular marker whose size you define with l_bBox."


geCreateMarkerByPoints( d_cellViewId t_type t_owner t_reason  t_displayText l_points  ) => d_shapeId / nil

"Creates a polygon-shaped marker."


geCreateTaper( d_cellViewId tx_layer l_points f_width1  f_width2 t_taperStyle x_nPtsToTaper  ) => d_taperId / nil

"Creates a tapered transmission line in a cellview."


geCreateTri(  ) => N/A

"Creates a transmission line in a cellview."


geDeleteAllAreaViewLevel( w_windowId  ) => t / nil

"Removes all area view levels from a window."


geDeleteAllInstViewLevel( w_windowId  ) => t / nil

"Removes all instance-specific view levels from a window."


geDeleteAllMarker( d_cellViewId [l_owner [l_severity] ]  ) => t / nil

"Deletes all markers in cellview d_cellViewId that have owner l_owner and severity l_severity."


geDeleteAllProbe( [w_windowId] [g_crossProbeFlag]  ) => t / nil

"Removes all the probes from a window."


geDeleteAreaViewLevel( w_windowId l_bBox  ) => t / nil

"Removes from a window all area view levels located in the bounding box l_bBox."


geDeleteHilightObject( g_hlObjectId  ) => t / nil

"Deletes the highlight object from the highlight set."


geDeleteHilightSet( g_hlSetId  ) => t / nil

"Deletes a highlight set."


geDeleteInstProbe( [w_windowId] [lt_probeSpec]  ) => t / nil

"Deletes an instance probe from a window."


geDeleteInstViewLevel( [w_windowId] d_instId  ) => t / nil

"Removes all instance-specific view levels associated with an instance ID."


geDeleteNetProbe( [w_windowId] [lt_probeSpec]  ) => t / nil

"Deletes a net probe from a window."


geDeletePathProbe( [w_windowId] [lt_probeSpec]  ) => t / nil

"Deletes a path probe from a window."


geDeleteProbe( w_windowId o_userType [g_crossProbeFlag]  ) => t / nil

"Removes a probe from a set of probes in a window."


geDeleteSelSet( [w_windowId]  ) => t / nil

"Deletes all selected objects in the specified window. If w_windowId is not specified, the current window is used."


geDeleteTermProbe( [w_windowId] [lt_probeSpec]  ) => t / nil

"Deletes a terminal probe from a window."


geDeselectAll( [w_windowId]  ) => t / nil 

"Deselects everything in the specified window. If w_windowId is not specified, the current window is used."


geDeselectAllFig( [d_cellViewId]  ) => t / nil

"Deselects all objects in a cellview."


geDeselectAllObject( [d_cellViewId]  ) => t / nil 

"Deselects everything in the specified cellview. If d_cellViewId is not specified, the cellview in the current window is used."


geDeselectArea( [w_windowId] [l_bBox]  ) => t / nil 

"Calls geSubSelectBox to deselect objects within the specified bounding box in the specified window. "


geDeselectFig( d_figId  ) => t / nil

"Removes an object from the selected set if the object passes the selection filter."


geDeselectFigNoFilter( d_figId  ) => t / nil 

"Deselects the specified figure."


geDeselectFigPoint( d_figId l_vertex  ) => t / nil

"Removes vertices from the selected set if they pass the selection filter."


geDeselectObject( d_figId [l_path]  ) => t / nil 

"Deselects the specified object at the specified hierarchical path, if it passes the selection filter. "


geDeselectObjectNoFilter( d_figId [l_path]  ) => t / nil 

"Deselects the specified object at the specified hierarchical path."


geDeselectObjectPoint( d_figId l_path l_points  ) => t / nil 

"Deselect the specified vertices of the specified figure if it passes the selection filter. "


geDeselectPoint( [w_windowId] [l_point]  ) => t / nil 

"Calls geSubSelectPoint to deselect the figure at the specified point in the specified window. This might deselect just a vertex or edge, or the whole figure, depending on the state of the partialSelect window environment variable. Use the F4 key to toggle this variable. You can see the state of partialSelect in the window banner."


geDiscardEdits( [w_windowId]  ) => t / nil

"Discards all edits made to a design."


geEditInPlace( w_windowId t_accessMode d_instId x_iteration  x_row x_col g_cancel  ) => t / nil

"Edits an instance in place."


geEditSelSet( [d_cellViewId]  ) => t / nil

"Displays and edits the properties of each object in the selected set in a cellview."


geEditSingleObject( d_objectId  ) => t / nil

"Displays and edits the properties of an object."


geEditToWindowPoint, geWindowToEditPoint(  ) => N/A

"Translates coordinate values when you are using edit in place. geWindowToEditPoint applies the top-level cellview"


geEquivWindow( w_windowId  ) => w_window_equiv / nil

"Returns the ID of a window that has the same edit cellview as the specified window."


geEquivWindowSet( w_windowId  ) => l_window_list

"Returns a list of all windows that have the same edit cellview as the specified window."


geExplainProbe( [w_windowId] [lt_probeSpec]  ) => t / nil

"Explains the probes in a window."


geFindPathToCellViewInst( d_cellViewId d_master_Id  ) => l_hierPath / nil

"Returns a hierarchical path of one of the references to a particular master in a cellview."


geGetAdjustedPath( w_winId t_pathList [d_cellViewId] [t_viewnameList]  ) => t_adjustedPathList

"Reduces the given hierarchical net path to the shortest hierarchical name that is equivalent to this net."


geGetAllAreaViewLevel( w_windowId  ) => l_bBox_startStop / nil

"Retrieves all area view levels set for a window."


geGetAllInstViewLevel( w_windowId  ) => l_inst_startStop / nil

"Retrieves the start level and stop level assigned within a window."


geGetAllProbe( [w_windowId]  ) => l_probes / nil

"Gets a list of all the probes in a window."


geGetAreaViewLevel( w_windowId l_bBox  ) => l_startStop / nil

"Retrieves an area view level overlapping a bounding box."


geGetCellViewWindow( d_cellViewId  ) => w_windowId / nil

"Returns the ID of a window in which the specified cellview is displayed."


geGetCrossProbeValue( t_viewTypeName  ) => value / nil

"Queries the view type to see if it is set."


geGetCurrentHilightSet( d_cellViewId  ) => g_hlSetId / nil

"Retrieves the current highlight set."


geGetDisabledMenus( windowId [menuList]  ) => l_disabledMenus

"Given a windowId, returns all the disabled submenus for all banner menus on that window. If menuList (optional) is given, only the disabled submenus on those banner menus are returned."


geGetEditCellView( [w_windowId]  ) => d_cellViewId

"Returns the ID for the cellview being edited."


geGetEnablePredicate( menu appName  ) => n_enablePredicate

"Returns the enable predicate of the menu for the application named appName or nil if undefined."


geGetFigHilightObjectId( g_hlSetId d_figId  ) => g_hlObjectId / nil

"Returns the highlight object ID of the object d_figId in the highlight set g_hlSetId."


geGetHierMemInst( [w_windowId]  ) => l_list / nil

"Returns a list describing the hierarchy of instances that have been descended into or edited-in-place to arrive at the cellview in the window."


geGetInstHier( [w_windowId]  ) => t_instance-hierarchy / nil

"Returns a string describing the hierarchy of instances that have been descended into or edited-in-place in the current window to arrive at the cellview in the window."


geGetInstHierPath( w_windowId  ) => t_instance-hierarchy / nil

"Similar to geGetInstHier but returns additional information for mosaic instances."


geGetInstTransform( dbInstId  ) => list( list( xOffset yOffset ) rotation magnification )

"Evaluates a path to an instance returned by dbGetTrueOverlaps and concatenates the overall offset, transform, and magnification of the instance placed within the design hierarchy. The value returned by geGetInstTransform is a three member list containing the values of the three variables mentioned above. This transform list can be passed to the functions dbCopyFig or dbMoveFig as their third argument to copy or move the shape to the cellView passed to dbGetTrueOverlaps as its first argument."


geGetInstViewLevel( w_windowId d_instId  ) => l_startStop / nil

"Retrieves the start level and stop level of an instance."


geGetMarkerDisplayText( d_figId  ) => t_string / nil

"Displays the text associated with a marker."


geGetMarkerOwner( d_figId  ) => t_string / nil

"Displays the owner of a marker."


geGetMarkerReason( d_dbobjectId  ) => t_reason / nil

"Displays the reason for a marker."


geGetMarkerType( d_figId  ) => t_type / nil

"Displays the type of a marker."


geGetObjectSelectedSet(  ) => N/A




geGetProbeNetStopLevel(  ) => x_netDisplayStopLevel

"Gets the display stop level of net probes."


geGetProbeUserLPP(  ) => l_lpp / nil

"Gets the layer-purpose pair to be used by the geAdd*Probe functions if no layer-purpose pair is passed into these functions."


geGetScrollPercent(  ) => x_percent

"Obtains the percentage used by geScroll when shifting the drawing."


geGetSelSet( [w_windowId | d_cellViewId]  ) => l_selectedSet / nil 

"Returns a list of the currently selected objects in a window or cellview."


geGetSelSetCount( [d_cellViewId]  ) => n_count / 0

"Counts selected objects in a cellview."


geGetSelSetFigPoint( d_figId  ) => l_selPoints / nil

"Returns a list indicating whether points are selected for an object."


geGetSelectedSet( [d_cellViewId]  ) => l_figs / nil

"Returns a list of selected objects in a cellview."


geGetTopLevelCellView( [w_windowId]  ) => d_cellViewId

"Returns the ID of the top-level cellview displayed in a window."


geGetWindowBox( w_windowId  ) => l_bBox / nil

"Returns the lower left and upper right coordinates of the current window display."


geGetWindowCellView( [w_windowId]  ) => d_cellViewId

"Returns the ID of the cellview displayed in a window."


geGetWindowRep( [w_windowId]  ) => d_cellViewId

"An alias for geGetWindowCellView."


geGetWindowStatus( windowId appName  ) => n_status

"Returns the status for the application named appName on the window windowId. Returns nil if the status for appName is undefined."


geHasMarker( d_cellViewId [l_owner [l_type] ]  ) => t / nil

"Queries whether the cellview contains any markers with owner l_owner and type l_type."


geHiCommonFindMarker(  ) => t / nil

"Opens the Find Marker form and highlights the current marker in the current window."


geHiDeleteMarker(  ) => t / nil

"Deletes the current marker in the current window."


geHiExplainMarker(  ) => t / nil

"Explains the current marker in the current cellview."


geHiFindMarker(  ) => t / nil

"Highlights the current marker in the current window."


geInstIdToFileSpec( d_instId t_mode  ) => l_fileSpec

"Creates a fileSpec (disassociated property list) from the data in an instance and the given mode."


geIsFigAllSelected( d_figId  ) => t / nil

"Checks whether an object is completely selected."


geIsFigPartiallySelected( d_figId  ) => t / nil

"Checks whether an object is partially, but not completely, selected."


geIsFigSelected( d_figId  ) => t / nil

"Checks whether an object is at least partially selected."


geIsMarkerShape( d_dbobjectId  ) => t / nil

"Checks whether a shape was created as a marker."


geIsObjectAllSelected( d_figId [l_path]  ) => t / nil 

"Tests if the specified figure is fully selected."


geIsObjectPartiallySelected( d_figId [l_path]  ) => t / nil 

"Tests if the specified figure is partially selected."


geIsObjectSelected( d_figId [l_path]  ) => t / nil 

"Tests if the specified figure is partially or fully selected."


geIsPathReentrant( d_cellViewId l_points n_width [t_style]  [n_beginExt] [n_endExt]  ) => t / nil

"Determines whether a path is self-intersecting."


geIsPolygonReentrant( d_cellViewId l_points  ) => t / nil

"Determines whether a polygon is self-intersecting."


geIsValidHilightObject( h_hlObjectId  ) => t / nil

"Determines whether the highlighted object is valid."


geIsValidHilightSet( h_hlSetId  ) => t / nil

"Determines whether a highlight set is valid."


geLoadIcon( [t_iconName] [t_fileName] [x_width] [x_height]  [x_bgColor]  ) => t / nil

"Creates an icon from a SKILL file."


geLoadNextProbe( [w_window] [p_port] [s_prop] [s_cond] [g_value] [s_loadCount]  ) => t / nil

"Loads a probe into a window. Identical to geLoadProbe except that s_loadCount is a symbol containing the index of the probe to be loaded."


geLoadProbe( [w_windowId] [p_port] [s_prop] [s_cond]  [g_value]  ) => t / nil

"Loads probes into a window."


geMakeProbeWithColor( ?window w_windowId ?name t_name  ?object g_object ?otherObject g_otherObject  ?color g_color ?probeType t_probeType ?displayStyle t_displayStyle  ?viewTypeList l_viewTypesToCrossProbe  ?message t_messageString  ) => o_probe_object

"Creates a probe of the specified type and gives it the specified color."


geMakeProbeWithLabel( ?window w_windowId  ?name t_name  ?object g_object  ?otherObject g_otherObject  ?label g_label  ?probeType t_probeType  ?displayStyle t_displayStyle  ?viewTypeList g_viewTypesToCrossProbe  ?message t_messageString  ?labelName t_labelName  ?labelColor l_labelColor  ?labelOffset l_labelOffset  ?labelFont t_labelFont ?labelFontSize f_labelFontSize  ?labelJust t_labelJust  ?labelOrient t_labelOrient  ) => o_probe_objectId

"Creates a probe and gives it the specified label."


geMakeProbeWithOnColor( ?window w_windowId  ?name t_name  ?object g_object  ?otherObject g_otherObject  ?onColor g_onColor  ?probeType t_probeType  ?displayStyle t_displayStyle  ?viewTypeList g_viewTypesToCrossProbe  ?message t_messageString  ) => o_probe_objectId

"Creates an instance probe and gives it the specified color."


geNewWindow( [w_windowId]  ) => w_windowId / nil

"Makes a copy of a window."


geOpen( ?window w_windowId ?lib t_lib ?cell t_cell  ?view t_view ?viewType t_viewType ?mode t_mode  ) => t / nil

"Opens a design in a new window."


gePointQuery( w_windowId l_point t_filterProc  ) => d_figId / nil

"Returns the ID of the object found at the point l_point."


gePointToFig( [w_windowId] [g_ignoreSelect] [l_list]  ) => d_figure / nil

"Returns the IDs of all objects located at the coordinates given in l_list."


gePopHilightStack( d_cellViewId  ) => t / nil

"Pops the current highlight set out of the highlight stack."


gePrintAllProbe( [w_windowId] [p_port]  ) => t / nil

"Prints a list of the probes in a window."


geProbeP( o_probe  ) => t / nil

"Checks if the value passed in is a probe."


gePush( w_windowId t_accessMode d_instId x_iteration x_row x_col g_cancel  ) => t / nil

"Pushes into an instance."


gePushHilightStack( g_hlSetId  ) => t / nil

"Pushes a highlight set into the highlight stack of the cellview to which the highlight belongs."


geQuerySelSet( [w_windowId]  ) => t / nil

"Displays the properties of each object in the selected set."


geRefresh(  ) => t / nil

"Redraws all areas of all windows that have not been updated since the last redraw, and need redrawing."


geRefreshCellView( d_cellViewId [l_bBox]  ) => t / nil

"Redraws a cellview if neccssary. If a bounding box is specified, only that area is redrawn."


geRefreshWindow( [w_windowId] [l_bBox]  ) => t / nil

"Refreshes a window. If a bounding box is specified, only that area is refreshed."


geResetCellView( d_cellViewId  ) => t / nil

"Redisplays the last saved version of a cellview."


geRestoreWinView( w_windowId  ) => t / nil

"Restores the view saved with geSaveWinView."


geReturn( [w_windowId]  ) => t / nil

"Returns to the previous (parent) level displayed in a window before a descend, edit in place, or switch was done."


geReturnToLevel( w_windowId  ) => nil

"Displays a list box containing the levels to which you can return."


geSave( [w_windowId]  ) => t / nil

"Saves a design."


geSaveAs( [w_windowId] [t_libName] [t_cellName] [t_viewName]  ) => t / nil

"Saves a design under another name."


geSaveIcon( [w_windowId] [t_iconName] [t_fileName]  ) => t / nil

"Saves a cellview as a SKILL icon file."


geSaveProbe( [w_windowId] [p_port]  ) => t / nil

"Saves probes to a port."


geSaveWinView( [w_windowId] [t_name]  ) => t / nil

"Saves the current view of the window w_windowId to the name t_name."


geScroll( [g_windowId] [t_dir] [g_zoom]  ) => t / nil

"Scrolls a view."


geSelectAllFig( [d_cellViewId]  ) => t / nil

"Selects all objects in a cellview that pass the selection filter."


geSelectArea( [w_windowId] [l_bBox]  ) => t / nil 

"Calls geAddSelectBox to add selected objects within the specified bounding box in the specified window."


geSelectFig( d_figId  ) => t / nil

"Adds an object to the selected set if it passes the selection filter."


geSelectFigNoFilter( d_figId  ) => t / nil 

"Selects the specified figure regardless of the selection filter."


geSelectFigPoint( d_figId l_vertex  ) => t / nil

"Adds vertices of an object to the selected set if they pass the selection filter."


geSelectObjectNoFilter( d_figId [l_path] ) => t/nil

"Selects the specified figure regardless of the selection filter."


geSelectPoint( [w_windowId] [l_point]  ) => t / nil 

"Calls geAddSelectPoint to add a selected object at the specified location in the specified window."


geSetAreaViewLevel( w_windowId l_bBox n_start n_stop  ) => t / nil

"Sets display start and stop threshold levels for an area independently of the window levels."


geSetCrossProbeValue( t_viewTypeName [g_value]  ) => t / nil

"Sets the view types to cross-probe."


geSetEnablePredicate( menu appName enablePredicate  ) => N/A

"Sets the enable predicate of the menu for appName to enablePredicate."


geSetInstViewLevel( w_windowId d_instId n_start n_stop  ) => t / nil

"Sets display start and stop threshold levels for an instance independently of the window levels."


geSetProbeNetStopLevel( x_netDisplayStopLevel  ) => t / nil

"Sets the display stop level of net probes."


geSetProbeUserLPP( l_lpp  ) => t / nil

"Sets the layer-purpose pair to be used by the geAdd*Probe functions if no layer-purpose pair is passed in to these functions."


geSetScrollPercent( n_percent  ) => n_percent_old

"Controls the percentage of the drawing currently visible that is shifted when geScroll is activated."


geSetWindowStatus( windowId appName status  ) => n_previousStatus

"Sets the status for windowId and appName to status."


geShift( [w_windowId] [t_dir]  ) => t / nil

"Shifts the window w_windowId in the direction t_dir."


geSingleSelectBox( [w_windowId] [g_partial] [l_point]  ) => t / nil

"Implements the single mode of area selection."


geSingleSelectPoint( [w_windowId] [g_partial] [l_point]  ) => t / nil

"Implements the single mode of point selection."


geSubSelectBox( [w_windowId] [g_partial] [l_bBox]  ) => t / nil

"Implements the sub mode of area selection."


geSubSelectPoint( [w_windowId] [g_partial] [l_bBox]  ) => t / nil

"Implements the sub mode of point selection."


geSwitch( w_windowId t_accessMode d_instId x_iteration  x_row x_col g_cancel  ) => t / nil

"Switches into an instance."


geToggleFilterSize(  ) => N/A

"Description"


geTogglePartialSelect(  ) => t / nil

"Toggles partial selection off and on."


geTransformUserBBox( l_point l_list  ) => l_bBox_new

"Transforms a coordinate pair or list of coordinate pairs by the displacement and rotation passed in. Similar to geTransformUserPoint but always uses exactly two coordinate pairs as arguments and always resolves the resulting pair of coordinate pairs such that the first coordinate pair is the lower left corner and the second coordinate pair is the upper right corner of the resulting box."


geTransformUserPoint( l_point l_list  ) => l_point / nil

"Transforms a coordinate pair or list of coordinate pairs by the displacement and rotation passed in."


geUpdateWindowMenus( windowId  ) => N/A

"Updates the enabled status of all the menu items in the window"


geValidateWindow( [w_windowId]  ) => w_windowId / nil

"Verifies the database ID of a window."


geWriteCellView( d_cellViewId t_libName t_cellName t_viewName [t_version] [d_contextId]  ) => t / nil

"Creates a copy of a cellview."


geZoomToGrid( w_windowId  ) => t / nil

"Zooms in on a subject up to the last point at which the major grid is still visible."


getAllLoadedFiles(  ) => l_files/nil

"Returns a list of all files loaded since debug mode was turned on."


getCurrentTime(  ) => t_timeString

"Returns a string representation of the current time."


getData( t_name  ) => x_number/o_waveform/nil

"Returns the number or waveform for the signal name specified."


getDirFiles( S_name  ) => l_strings

"Returns a list of the names of all files and directories, including . and .., in a directory."


getFnWriteProtect( s_name  ) => t/nil

"Checks if the given function is write-protected."


getFunType( u_functionObject  ) => s_functionObject_type

"Returns a symbol denoting the function type for a given function object."


getFunctions( t_fileName  ) => l_functions/nil

"Returns functions defined in a file loaded after debug mode is turned on."


getInstallPath(  ) => l_string

"Returns the absolute path of the Cadence DFII installation directory where the DFII products are installed on your system as a list of a single string."


getLogin(  ) => t_loginName

"Returns the user"


getMIFFile( t_fileName  ) => l_groupOfStatements / nil

"Opens a MIF file for input and reads the file. "


getShellEnvVar( t_UnixShellVariableName  ) => t_value/nil

"Returns the value of a UNIX environment variable, if it has been set."


getSkillPath(  ) => l_strings/nil

"Returns the current SKILL path."


getSkillVersion(  ) => t_version

"Returns the version of the SKILL that is currently running."


getTempDir(  ) => t_TempDir

"Returns the system temp directory as a string."


getVarWriteProtect - SKILL mode( s_name  ) => t/nil

"Checks if a variable is write-protected. Does not work in SKILL++ mode. In SKILL++ mode, use getFnWriteProtect instead."


getVersion(  ) => t_version

"Returns the version number of the Cadence software you are currently using."


getWarn(  ) => t_warning

"Returns the buffered warning if it has not already been printed."


getWorkingDir(  ) => t_currentDir

"Returns the current working directory as a string."


MIFFile( f_version  [t_comment]  ) => l_statement

"Generates the SMIFT representation of the MIF MIFFile statement. "


abs( n_number  ) => n_result

"Returns the absolute value of a floating-point number or integer."


ac( g_fromValue g_toValue g_ptsPerDec ) => undefined/nil ac( g_fromValue g_toValue t_incType g_points  ) => undefined/nil

"Specifies an AC analysis."


acos( n_number  ) => f_result

"Returns the arc cosine of a floating-point number or integer."


add1( n_number  ) => n_result

"Adds one to a floating-point number or integer."


alias( s_aliasName s_functionName  ) => s_aliasName

"Defines a symbol as an alias for a function. This is an nlambda function."


alphaNumCmp( S_arg1 S_arg2 [g_arg3]  ) => 1/0/-1

"Compares two string or symbol names alphanumerically or numerically."


alphalessp( S_arg1 S_arg2  ) => t/nil

"Compares two string or symbol names alphabetically."


analysis( s_analysisType [?analysisOption1 g_analysisOptionValue1]- [?analysisOptionN g_analysisOptionValueN] ) => undefined/nil

"Specifies the analysis to be simulated."


append( l_list1 l_list2 ) => l_result  append( o_table g_assoc  ) => o_table

"Creates a list containing the elements of list1 followed by the elements of list2 or returns the original association table including new entries."


append1( l_list g_arg  ) => l_result

"Adds new arguments to the end of a list."


appendPath( t_dirName1 - [t_dirNameN] ) => t_dirNameN/nil

"Appends a new path to the end of the search path list. You can append as many paths as you want with this command."


apply( slu_func l_args  ) => g_result

"Applies the given function to the given argument list."


arglist( s_function  ) => l_argumentList

"Returns the number and types of arguments expected for a function."


arrayp( g_value  ) => t/nil

"Checks if an object is an array."


arrayref( g_collection g_index  ) => g_element

"Returns the element in a collection, that is, in an array or a table, of the given index."


asin( n_number  ) => f_result

"Returns the arc sine of a floating-point number or integer."


assoc, assv, assq(  ) => N/A

"The assoc, assq, and assv functions find the first list in l_alist whose car field is g_key and return that list. assq uses eq to compare g_key with the car fields of the lists in alist. assoc uses equal. assv uses eqv."


atan( n_number  ) => f_result

"Returns the arc tangent of a floating-point number or integer."


ateFormatter(  ) => N/A

"First, a design object is created with the nlCreateDesign call, using the information on the OASIS session. Subsequently, the formatter is created with a call to nlCreateFormatter, using the information on the session. The formatter is added to the session and can be obtained with asiGetFormatter. This is a convenience routine that you cannot redefine, and the interface should not call it."


atof( t_string  ) => f_result/nil

"Converts a string into a floating-point number. Returns nil if the given string does not denote a number."


atoi( t_string  ) => x_result/nil

"Converts a string into an integer. Returns nil if the given string does not denote an integer."


atom( g_arg  ) => t/nil

"Checks if an object is an atom."


average( o_waveform  ) => n_average/o_waveformAverage/nil

"Computes the average of a waveform over its entire range."


b1f( o_s11 o_s12 o_s21 o_s22  ) => o_waveform/nil

"Returns the alternative stability factor in terms of the supplied parameters."


bandwidth( o_waveform n_db t_type  ) => n_value/o_waveform/nil

"Calculates the bandwidth of a waveform."


bcdp( g_value  ) => t/nil

"Checks if an object is a binary primitive function."


begin - SKILL mode( g_exp1 [g_exp2 ... g_expN]  ) => g_result

"In SKILL mode begin is a syntax form used to group a sequence of expressions. Evaluates expressions from left to right and returns the value of the last expression. Equivalent to progn."


begin - SKILL++ mode( def1 [def2 ... defN] ) => g_result begin( exp1 [exp2 ... expN]  ) => g_result

"In SKILL++ mode begin is a syntax form used to group either a sequence of expressions or a sequence of definitions."


blankstrp( t_string ) => t/nil

"Checks if the given string is empty or has blank space characters only and returns true. If there are non-space characters blankstrp returns nil."


booleanp( g_obj  ) => t/nil

"Checks if an object is a boolean. Returns t if the object is t or nil. Returns nil otherwise."


boundp( s_arg [e_environment] ) => t/nil

"Checks if the variable named by a symbol is bound, that is, has been assigned a value. The single argument form of boundp only works in SKILL mode."


break(  ) => none

"Forces entry to the break handler if inserted directly into a SKILL function. The default break handler is the debugger."


breakpt( [s_function [break_condition]]) where break_condition can be either (break_tag g_condition ) or ((break_tag g_condition)... ) => g_result

"Sets breakpoints on one or more functions."


buildString( l_strings [S_glueCharacters]  ) => t_string

"Concatenates a list of strings with specified separation characters."


cReflContour( o_iwave o_vwave x_harm [?iwaveLoad o_iwaveLoad] [?vwaveLoad o_vwaveLoad] [?maxRefl f_maxRefl] [?minRefl f_minRefl] [?numCont x_numCont] [?refImp f_refImp] [?closeCont b_closeCont]  ) => o_waveform/nil

"Constructs constant reflection coefficient magnitude contours for Z-Smith plotting. The trace of each contour correlates to reference reflection coefficients that all result in the same reflection coefficient magnitude."


caar, cadr, cdar, cddr, caaar, caadr, cadar, caddr, cdadr,  cadaar, cadadr, caddar, cadddr, cdaaar, cdaadr, cdadar,  cdaddr, cddaar, cddadr, cdddar, cddddr(  ) => N/A

"Performs operations on a list using repeated applications of car and cdr. For example, caaar is equivalent to car( car( car( l_list)))."


callAs( us_class s_genericFunction g_arg1 [g_arg2 ...] ) => g_value

"Calls a method specialized for some super class of the class of a given object directly, bypassing the usual method inheritance and overriding of a generic function."


callInitProc( t_contextName  ) => t

"Calls all the initialization functions associated with a context."


callNextMethod( [ g_arg ...] ) => g_value

"Calls the next applicable method for a generic function from within the current method. Returns the value returned by the method it calls."


cancelEnterFun( [g_form]  ) => t / nil

"Cancels the enterfunction in the current window. "


car( l_list  ) => g_result

"Returns the first element of a list. car is nondestructive, meaning that it returns the first element of a list but does not actually modify the list that was its argument."


case( g_selectionExpr l_clause1 [l_clause2 -]  ) => g_result/nil

"Evaluates the selection expression, matches the resulting selector values sequentially against comparators defined in clauses, and runs the expressions in the matching clause."


case, caseq(  ) => N/A

"Evaluates the selection expression, matches the resulting selector values sequentially against comparators defined in clauses, and executes the expressions in the matching clause. This is a syntax function."


ccpCopy( q_src q_dest [g_overWrite] [s_expFlag] [l_copyViewTypeList] [l_copyViewNameList] [t_vNameRegExp] [t_vNameSpace] [s_whatToUpdate] [q_updateLibList]  ) => t/nil

"Copies source data to another location."


ccpCopyConfig( G_src G_dest g_overWrite s_expFlag [l_copySkipLibList] [l_copyViewTypeList] [l_copyViewNameList] [t_vNameRegExp] [t_vNameSpace] [s_whatToUpdate] [q_updateLibList]  ) => t/nil

"Copies a design configuration. Expansion is based on configuration rules specified in the expand.cfg file in the source configuration view."


ccpCopyDesign( G_src G_dest g_overWrite s_expFlag [l_copySkipLibList] [l_copyViewTypeList] [l_copyViewNameList] [t_vNameRegExp] [t_vNameSpace] [s_whatToUpdate] [q_updateLibList]  ) => t/nil

"Copies a design, after expanding it, to the destination library you specify."


ccpExpand( q_src s_expFlag [l_expandViewTypeList] [l_expandViewNameList] [t_vNameRegExp] [t_vNameSpace]  ) => q_expSpecList/nil

"Does an expansion, given a list of source objects."


ccpExpandConfig( G_src s_expFlag [l_expandSkipLibList] [l_expandViewTypeList] [l_expandViewNameList] [t_vNameRegExp] [t_vNameSpace]  ) => q_expSpecList/nil

"Expands a configuration, based on configuration rules specified in the expand.cfg file in the source configuration view."


ccpExpandDesign( G_src s_expFlag [l_expandSkipLibList] [l_expandViewTypeList] [l_expandViewNameList] [t_vNameRegExp] [t_vNameSpace]  ) => q_expSpecList/nil

"Expands a design, given a source lib/cell or lib/cell/view gdmSpec object."


ccpRename( G_src G_dest g_overWrite s_expFlag [s_whatToUpdate] [q_updateLibList]  ) => t/nil

"Renames a lib, cell, or view. The source lib, cell, or view is copied, and then the original one is deleted. This implies that if you select CCP_EXPAND_COMANAGED as the s_expFlag, then derived files will not be renamed but will be deleted."


ccpRenameReferenceLib(  ) => N/A

"Renames, in a library or a subset of a library, references to an external library. The external library is not changed."


cdr( l_list  ) => l_result

"Returns the tail of the list, that is, the list without its first element."


cdsGetInstPath( [ t_name ]  ) => t_string

"Returns the absolute path of the Cadence installation directory as a string. cdsGetInstPath is for the cds root hierarchy and is meant to be used by all DFII and non-DFII applications."


ceiling( n_number ) => x_integer

"Returns the smallest integer not smaller than the given argument."


changeEnterFun( s_enterFun  [?prompts l_promptList]  [?points l_pointList]  [?wantPoints x_pointLimit] [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?pathStyle t_pathStyle] [?pathWidth f_pathWidth] [?beginExtent f_beginExtent] [?endExtent f_endExtent]  [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix] [?cmdName t_cmdName]  ) => t / nil

"Since this function uses the current window to determine which enterfunction to change, make sure to properly set the current window before using this function. See hiSetCurrentWindow() for information about setting the current window."


changeWorkingDir( [S_name]  ) => t

"Changes the working directory to S_name."


charToInt( s_char  ) => x_ascii

"Returns the ASCII code of the first character of the given symbol. In SKILL, a single character symbol can be used as a character value."


className( us_class  ) => s_className

"Returns the class symbol denoting a class object."


classOf( g_object ) => u_classObject

"Returns the class object of which the given object is an instance."


classp( g_object su_class ) => t/nil

"Checks if the given object is an instance of the given class or is an instance of one of its subclasses."


clear(  ) => t

"Clears all tracing and breakpoints."


clearAll(  ) => t/nil

"Erases the contents of the current Waveform window and deletes the waveforms, title, date stamp, and labels stored in internal memory."


clearExitProcs(  ) => t

"Removes all registered exit functions (takes no arguments)."


clearSubwindow(  ) => t/nil

"Erases the contents of the current subwindow."


clip( o_waveform n_from n_to  ) => o_waveform/nil

"Restricts the waveform to the range defined by n_from and n_to."


close( p_port  ) => t

"Drains, closes, and frees a port."


closeMIFin(  ) => t / nil

"Closes the MIF input file opened by openMIFin."


closeMIFout(  ) => t / nil

"Closes the MIF output file opened by openMIFout."


commentMIF(  ) => N/A




compareTime( t_time1 t_time2  ) => x_difference

"Compares two string arguments, representing a clock-calendar time."


compress( t_sourceFile t_destFile  ) => t

"Reduces the size of a SKILL file, which must be SKILL source code, and places the output into another file."


compression( o_waveform  [ ?x f_x ]  [ ?y f_y ]  [ ?compression f_compression ]  [ ?io s_measure ]  ) => f_compPoint/nil

"Performs an nth compression point measurement on a power waveform."


compressionVRI( o_vport x_harm [?iport o_iport] [?rport f_rport] [?epoint f_epoint] [?gcomp f_gcomp] [?measure s_measure]  ) => o_waveform/n_number/nil

"Performs an nth compression point measurement on a power waveform."


compressionVRICurves( o_vport x_harm [?iport o_iport] [?rport f_rport] [?epoint f_epoint] [?gcomp f_gcomp]  ) => o_waveform/nil

"Constructs the waveforms associated with an nth compression measurement."


concat( Sx_arg1 [Sx_arg2 ...]  ) => s_result

"Concatenates strings, symbols, or integers into a single symbol."


cond( l_clause1 ...  ) => g_result

"Examines conditional clauses from left to right until either a clause is satisfied or there are no more clauses remaining. This is a syntax function."


conjugate( {o_waveform | n_x}  ) => o_waveform/n_y/nil

"Returns the conjugate of a waveform or number."


cons( g_element l_list  ) => l_result

"Adds an element to the beginning of a list."


cont, continue(  ) => N/A

"Continues execution from a breakpoint. cont and continue are identical."


convolve( o_waveform1 o_waveform2 n_from n_to t_type n_by  ) => o_waveform/n_number/nil

"Computes the convolution of two waveforms."


copy( l_arg  ) => l_result

"Returns a copy of a list, that is, a list with all the top-level cells duplicated."


copyDefstructDeep( r_object ) => r_defstruct

"Performs a deep or recursive copy on defstructs with other defstructs as sub-elements, making copies of all the defstructs encountered."


copy_name(  ) => N/A

"Creates and returns a copy of a structure. This function is created by the defstruct function where <name> is the name of the defstruct."


cornerDesVar( t_cornerName t_desVarName t_value ) => t/nil

"Sets the design variable value for the specified corner."


cornerMeas(  ) => t/nil

"Displays all the predefined enabled measurements from a Design Customization file, either graphically (plot) or textually (print), according to your choices."


cornerRun( [t_cornerName1 t_cornerName2 -] [?jobName t_jobName] [?host t_hostName] [?queue t_queueName] [?startTime t_startTime][?termTime t_termTime] [?dependentOn t_dependentOn] [?mail t_mailingList] [?block s_block] [?notify s_notifyFlag]  ) => t/s_jobName/nil

"Runs the corner analysis that has been predefined in the .pcf and .dcf files and selected via the selectProcess command. If specific corners are specified, only those corners run; otherwise all the corners run."


cornerRunTemp( t_cornerName t_value ) => t/nil

"Sets the analysis temperature (in degrees Celsius) to be used for a corner."


correlationTable( ?suppress x_suppress ) => t/nil

"Prints the correlation between all pairs of declared monteExpr expressions."


cos( n_number  ) => f_result

"Returns the cosine of a floating-point number or integer."


count( [s_function ... | t] ) => g_result/t

"Counts the number of times a function has been called. This is an nlambda function. Returns the functions marked for counting."


createDir( S_name  ) => t/nil

"Creates a directory."


createFinalNetlist(  ) => t/nil

"Creates the final netlist for viewing purposes. The netlist also can be saved but is not required to run the simulator."


createNetlist( [?recreateAll b_recreateAll]  ) => t_filename/nil

"Creates the simulator input file."


cross( o_waveform n_crossVal x_n s_crossType  ) => o_waveform/g_value/nil

"Computes the X-axis value at which a particular crossing of the specified edge type of the threshold value occurs."


csh( [t_command]  ) => t/nil

"Starts the UNIX C-shell as a child process to execute a command string."


currentSubwindow( x_subwindow  ) => t/nil

"Specifies x_subwindow as the current subwindow."


currentWindow( w_windowId  ) => w_windowId/nil

"Specifies w_windowId as the current Waveform window."


db10( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Returns 10 times the log10 of the specified waveform object or number."


db20( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Returns 20 times the log10 of the specified waveform object or number."


dbm( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Returns 10 times the log10 of the specified waveform object plus 30."


dc( t_compName [ t_compParam ] g_fromValue g_toValue g_byValue  ) => undefined/nil

"Specifies a DC sweep analysis with limited options. If other analysis options are needed, use the analysis command."


declare( s_arrayName[x_sizeOfArray]  ) => a_newArray

"Creates an array with a specified number of elements. This is a syntax form. All elements of the array are initialized to unbound."


declareLambda( s_name1 ... s_nameN  ) => s_nameN

"Tells the evaluator that certain (forward referenced) functions are of lambda type (as opposed to nlambda or macro)."


declareNLambda( s_name1 ... s_nameN  ) => s_nameN

"Tells the evaluator that certain (forward referenced) functions are of nlambda type (as opposed to lambdas or macros)."


declareSQNLambda( s_functionName ... ) => nil

"Declares the given nlambda functions to be solely-quoting nlambdas."


defclass( s_className ([s_superClassName]) 	([( s_slotName 	 [@initarg s_argName] 	 [@reader s_readerFun] 	 [@writer s_writerFun] 	 [@initform g_exp])  	 ...] )   ) => t

"Creates a class object with class name and optional super class name and slot specifications. This is a macro form."


defgeneric( s_functionName  	( s_arg1 [s_arg2 ...] )  	[g_exp ...]  ) => t

"Defines a generic function with an optional default method. This is a macro form. Be sure to leave a space after the function name. See the SKILL Language User Guide for a discussion of generic functions."


define - SKILL++ mode( s_var g_expression ) => s_var define( ( s_var [s_formalVar1 ...] ) g_body ... ) => s_var

"define, used in SKILL++ mode only, is a syntax form used to provide a definition for a global or local variable. The define syntax form has two variations."


definitionFile( t_fileName [t_fileName2 .. t_fileNameN ] ) => l_fileNames

"Specifies definition files to be included in the simulator input file."


defmacro( s_macroName ( l_formalArglist ) g_expr1 ... ) => s_macroName

"Defines a macro which can take a list of formal arguments including @optional, @key, and @rest (instead of the more restrictive format as required by using mprocedure)."


defmethod( s_name  	(( s_arg1 s_class ) s_arg2 ... ) 	g_exp1 ... ) => t

"Defines a method for a given generic function. This is a macro form. Be sure to leave a space after s_name."


defprop( s_id g_value s_name  ) => g_value

"Adds properties to symbols but none of its arguments are evaluated. This is a syntax form."


defstruct( s_name s_slot1 [s_slot2..] ) => t

"Creates a defstruct, a named structure that is a collection of one or more variables."


defstructp( g_object [S_name]  ) => t/nil

"Checks if an object is an instance of a particular defstruct."


defun( s_funcName ( l_formalArglist ) g_expr1 ... ) => s_funcName

"Defines a function with the name and formal argument list you specify. This is a syntax form."


defvar - SKILL mode( s_varName [g_value] ) => g_value/nil

"Defines a global variable and assigns it a value. Use in SKILL mode only. Use the define syntax form to define global variables in SKILL++ mode."


delay( ?wf1 o_wf1 ?value1 n_value1 ?edge1 s_edge1 ?nth1 x_nth1 ?td1 n_td1 ?wf2 o_wf2 ?value2 n_value2 ?edge2 s_edge2 ?nth2 x_nth2 {[?td2 n_td2] | [?td2r0 n_td2r0]} ?stop n_stop  ) => o_waveform/n_value/nil

"Calculates the delay between a trigger event and a target event."


delete( s_command [g_commandArg1] [g_commandArg2] -  ) => t/nil

"Deletes all the information specified."


deleteDir( S_name  ) => t/nil

"Deletes a directory."


deleteFile( S_name  ) => t/nil

"Deletes a file."


deleteJob( t_jobName [t_jobName2 t_jobName3 - t_jobNameN]  ) => t/nil

"Removes a job or series of jobs from the text-based job monitor."


deletePoint(  ) => t / nil

"Deletes a point from the enterfunction in the current window. "


deleteSubwindow(  ) => t/nil

"Deletes the current subwindow from the current Waveform window."


deleteWaveform( {x_index | all_string }  ) => t/nil

"Deletes the specified waveform curve or all the waveform curves from the current subwindow of a Waveform window."


deriv( o_waveform  ) => o_waveform/nil

"Computes the derivative of a waveform with respect to the X axis."


design( t_cktFile ) => t_cktFile/nil design( t_lib t_cell t_view  ) => (t_lib t_cell t_view)/nil

"Specifies the name of the design to be simulated."


dft( o_waveform n_from n_to x_num [t_windowName [n_param1]]  ) => o_waveform/nil

"Computes the discrete Fourier transform and fast Fourier transform of the input waveform."


digitalHostMode(  ) => N/A

local


digitalHostName( t_name  ) => t/nil

"For mixed-signal simulation, specifies the name of the remote host for the digital simulator."


display( g_obj [p_port]  ) => t/nil

"Writes a representation of an object to the given port."


displayMode( t_mode  ) => t/nil

"Sets the display mode of the current subwindow."


do - SKILL++ mode( (  ( s_var1 g_initExp1 [g_stepExp1] ) ( s_var2 g_initExp2 [g_stepExp2] ) ...) ( g_terminationExp g_terminationExp1 ...) 	g_loopExp1 g_loopExp2 ... ) => g_value

"Iteratively executes one or more expressions. Used in SKILL++ mode only."


drain( [p_outputPort]  ) => t/nil

"Writes out all characters that are in the output buffer of a port."


dtpr( g_value  ) => t/nil

"Checks if an object is a non-empty list."


dump( [x_variables]  ) => nil

"Prints the current value of all the local variables on the stack. Note that SKILL++ variables are not displayed by this function. For SKILL++ use where to see the lexical bindings on the stack."


ed( [t_fileName]  ) => t/nil

"Edits the named file."


edi( [t_fileName]  ) => t/nil

"Edits the named file, then includes the file into SKILL."


edit( S_object [g_loadFlag]  ) => x_childId

"Edits a file, function, or variable. This function only works if you are in graphical mode. This is an nlambda function."


edl( [t_fileName]  ) => t/nil

"Edits the named file, then loads the file into SKILL."


encrypt( t_sourceFile t_destFile [t_password]  ) => t

"Encrypts a SKILL file and places the output into another file."


envobj( x_id  ) => e_environment

"Returns the environment object whose print representation has the ID x_id. You can consider x_id to be the address of the environment object."


eq( g_arg1 g_arg2  ) => t/nil

"Checks addresses when testing for equality."


equal( g_arg1 g_arg2  ) => t/nil

"Checks contents of strings and lists when testing for equality."


eqv( g_obj1 g_obj2  ) => t/nil

"Tests for object identity or equality between two numbers of the same type (for example, both numbers are integers). Except for numbers, eqv is like eq."


err( [g_value]  ) => none

"Causes an error."


error( [S_message1 [S_message2] ...]  ) => none

"Prints error messages and calls err."


errset( g_expr [g_errprint]  ) => l_result/nil

"Encapsulates the execution of an expression in an environment safe from the error mechanism. This is a syntax form."


errsetstring( t_string [g_errprint] [s_langMode] ) => l_value/nil

"Reads and evaluates an expression stored in a string. Same as evalstring except that it calls errset to catch any errors that might occur during the parsing and evaluation."


eval( g_expression [e_environment]	 ) => g_result

"Evaluates an argument and returns its value. If an environment argument is given, g_expression is treated as SKILL++ code, and the expression is evaluated in the given (lexical) environment. Otherwise g_expression is treated as SKILL code."


evalstring( t_string [s_langMode] ) => g_value

"Reads and evaluates an expression stored in a string."


evenp( x_num  ) => t/nil

"Checks if a number is an even integer."


exists( s_formalVar l_valueList g_predicateExpr ) => g_result exists( s_key o_table g_predicateExpr  ) => t/nil

"Returns the first tail of l_valueList whose car satisfies a predicate expression. Also verifies whether an entry in an association table satisfies a predicate expression. This is a syntax form."


exit(  ) => N/A

"Exits SKILL, and therefore the CIW and the Cadence software, whether in interactive or batch mode."


exp( n_number  ) => f_result

"Raises e to a given power."


expandMacro( g_form  ) => g_expandedForm

"Expands one level of macro call for a form."


fboundp( s_functionName  ) => t/nil

"Returns true (that is, some non-nil value) if the given name has a function binding."


fileLength( S_name  ) => x_size

"Determines the number of bytes in a file."


fileSeek( p_port x_offset x_whence  ) => t/nil

"Sets the position for the next operation to be performed on the file opened on a port. The position is specified in bytes."


fileTell( p_port  ) => x_offset

"Returns the current offset in bytes for the file opened on a port."


fileTimeModified( t_filename  ) => x_time/nil

"Gets the time a given file was last modified."


findClass( s_className  ) => u_classObject

"Returns the class object associated with a symbol. The symbol is the symbolic name of the class object."


finishEnterFun( [g_form]  ) => t / nil

"Completes an enterfunction if possible. "


fix( n_arg  ) => x_result

"Returns the largest integer not larger than the given argument."


fixp( g_value  ) => t/nil

"Checks if an object is an integer, that is, a fixed number."


flip( o_waveform  ) => o_waveform/nil

"Returns a waveform with the X vector values negated."


float( n_arg  ) => f_result

"Converts a number into its equivalent floating-point number."


floatp( g_value  ) => t/nil

"Checks if an object is a floating-point number. Same as realp."


floor( n_number ) => x_integer

"Returns the largest integer not larger than the given argument."


for( s_loopVar x_initialValue x_finalValue g_expr1  [g_expr2 ...]  ) => t

"Evaluates the sequence g_expr1, g_expr2 ... for each loop variable value, beginning with x_initialValue and ending with x_finalValue. This is a syntax form."


forall( s_formalVar l_valueList g_predicateExpr ) => t/nil forall( s_key o_table g_predicateExpr  ) => t/nil

"Checks if g_predicateExpr evaluates to non-nil for every element in l_valueList. This is a syntax form."


forcenode( t_netName1 f_value1 - [t_netNameN f_valueN]  ) => undefined/nil

"Holds a node at a specified value."


foreach( s_formalVar g_exprList g_expr1 [g_expr2 ...] ) => l_valueList foreach( (s_formalVar1...s_formalVarN) g_exprList1... g_exprListN g_expr1 [g_expr2 ...] ) => l_valueList foreach( s_formalVar g_exprTable g_expr1 [g_expr2 ...] ) => o_valueTable

"Evaluates one or more expressions for each element of a list of values. This is a syntax form."


fourEval( o_waveform n_from n_to n_by  ) => o_waveform/nil

"Evaluates the Fourier series represented by an expression. "


fprintf( p_port t_formatString [ g_arg1 ...]  ) => t

"Writes formatted output to a port."


frequency( o_waveform  ) => o_waveform/n_value/nil

"Computes the reciprocal of the average time between two successive midpoint crossings of the rising waveform."


fscanf( p_inputPort t_formatString [s_var1 ...]   ) => x_items/nil

"Reads input from a port according to format specifications and returns the number of items read in."


fscanf, scanf, sscanf(  ) => N/A

"The only difference between these functions is the source of input. fscanf reads input from a port according to format specifications and returns the number of items read in. scanf takes its input from piport implicitly. scanf only works in standalone SKILL when the piport is not the CIW. sscanf reads its input from a string instead of a port."


funcall( slu_func [arg ...]  ) => g_result

"Applies the given function to the given arguments."


funobj( x_id  ) => U_functionObject

"Returns the function object designated by the given object ID."


ga( o_s11 o_s12 o_s21 o_s22 [ ?gs n_gs]  ) => o_waveform/nil

"Returns the available gain in terms of the supplied parameters and the optional source reflection coefficient (Gs)."


gac( o_s11 o_s12 o_s21 o_s22 g_level g_frequency  ) => o_waveform/nil

"Computes the available gain circles."


gainBwProd( o_waveform  ) => o_waveform/n_value/nil

"Calculates the gain-bandwidth product of a waveform representing the frequency response of interest over a sufficiently large frequency range."


gainMargin( o_waveform  ) => o_waveform/n_value/nil

"Computes the gain margin of the loop gain of an amplifier."


gc( [t_string]  ) => nil

"Forces a garbage collection. This function is also called by the system."


gcsummary(  ) => t

"Prints a summary of memory allocation and garbage collection statistics in the current SKILL run."


gensym( [S_arg]  ) => s_result

"Returns a new symbol based on the input argument."


get( sl_id S_name  ) => g_result/nil

"Returns the value of a property in a property list."


get_pname( s_arg  ) => t_result

"Returns the print name of a symbol as a string."


get_string( S_arg  ) => t_result

"Converts the argument to a string if it is a symbol. Otherwise it returns the string itself."


getc( [ p_inputPort ]  ) => s_char

"Reads and returns a single character from an input port. Unlike the C library, the getc and getchar SKILL functions are totally unrelated."


getchar( S_arg x_index  ) => s_char/nil

"Returns an indexed character of a string or the print name if the string is a symbol. Unlike the C library, the getc and getchar SKILL functions are totally unrelated."


getd( s_functionName  ) => g_definition/nil

"Returns the function binding for a function name."


getq( sl_id S_name  ) => g_result/nil sl_id->s_name => g_result/nil

"Returns the value of a property in a property list. Same as get except that the second argument is not evaluated. This is a syntax form."


getqq( s_id S_name  ) => g_result/nil sl_id.s_name => g_result/nil

"Returns the value of a property in a symbol"


gets( s_variableName [p_inputPort]  ) => t_string/nil

"Reads a line from the input port and stores the line as a string in the variable. This is a macro."


gmax( o_s11 o_s12 o_s21 o_s22  ) => o_waveform/nil

"Returns the maximum power gain in terms of the supplied parameters."


gmin( o_Gopt o_Bopt f_zref  ) => o_gminWave/nil

"Returns the optimum noise reflection coefficient in terms of o_Gopt, o_Bopt, and f_zref."


gmsg( o_s11 o_s12 o_s21 o_s22  ) => o_waveform/nil

"Returns the maximum stable power gain in terms of the supplied parameters."


gmux( o_s11 o_s12 o_s21 o_s22  ) => o_waveform/nil

"Returns the maximum unilateral power gain in terms of the supplied parameters."


go( s_label  ) => N/A

"Transfers control to the statement following the label argument. This is a syntax form."


gp( o_s11 o_s12 o_s21 o_s22 [?gl n_gl]  ) => o_waveform/nil

"Computes the power gain in terms of the S-parameters."


gpc( o_s11 o_s12 o_s21 o_s22 g_level g_frequency  ) => o_waveform/nil

"Computes the power gain circles."


graphicsOff(  ) => t/nil

"Disables the redrawing of the current Waveform window."


graphicsOn(  ) => t/nil

"Enables the redrawing of the current Waveform window."


gt( o_s11 o_s12 o_s21 o_s22 [ ?gs n_gs] [ ?gl n_gl]  ) => o_waveform/nil

"Returns the transducer gain in terms of the supplied parameters and the optional source reflection coefficient (Gs) and the input reflection coefficient (Gl)."


hardCopy(  ) => t/nil

"Sends a Waveform window plot to a printer."


hardCopyOptions( [?hcNumCopy x_hcNumCopy] [?hcDisplay t_hcDisplay] [?hcOrientation s_hcOrientation] [?hcOutputFile g_hcOutputFile] [?hcPaperSize t_hcPaperSize] [?hcPlotterName t_hcPlotterName] [?hcTmpDir t_hcTmpDir]  ) => g_value/nil

"Sets Waveform window hardcopy plotting options."


harmonic( o_waveform h_index  ) => o_waveform/g_value/nil

"Returns the waveform for a given harmonic index."


harmonicFreqList( [?resultsDir t_resultsDir] [?result S_resultName] ) => n_list/nil

"Returns a list of lists, with each sublist containing a harmonic index and the minimum and maximum frequency values that the particular harmonic ranges between."


harmonicList( [?resultsDir t_resultsDir] [?result S_resultName]  ) => n_list

"Returns the list of harmonic indices available in the resultName or current result data."


help( [S_name]  ) => t/nil

"Retrieves and prints the cdsFinder documentation strings for the given function name (a symbol). If the given name is a string, it is interpreted as a regular expression, and the entire cdsFinder database is searched for functions whose name or documentation string contains or matches the given string. Help is an nlambda function."


hihelpInit(  ) => N/A

"Sets global SKILL variables for the help directory and backup help directory."


histogram( t_monteExprName ?type s_type ?numBins x_numBins ?density b_density  ) => t/nil

"Plots a histogram of Monte Carlo data."


hostMode(  ) => N/A

local


hostName( t_name  ) => t/nil

"Specifies the name of the remote host."


i( t_component [?resultsDir t_resultsDir][?result s_resultName] ) => o_waveform/nil

"Returns the current through the specified component."


ic( t_netName1 f_value1 - [t_netNameN f_valueN]  ) => undefined/nil

"Sets initial conditions on nets in a transient analysis."


if( g_condition g_thenExpression [g_elseExpression] )  => g_result if( g_condition then g_thenExpr1 ... [else g_elseExpr1 ...]  ) => g_result

"Selectively evaluates two groups of one or more expressions. This is a syntax form."


iim( t_component [?resultsDir t_resultsDir][?result s_resultName] ) => o_waveform/nil

"Aliased to imag(i()). Gets the imaginary part of a complex number representing the AC current through a component."


iinteg( o_waveform  ) => o_waveform/nil

"Computes the indefinite integral of a waveform with respect to the X-axis variable."


ilToolBox(  ) => t

"Brings up the SKILL Development toolbox."


im( t_component [?resultsDir t_resultsDir][?result s_resultName] ) => o_waveform/nil

"Aliased to mag(i()). Gets the magnitude of the AC current through a component."


imag( {o_waveform | n_input}  ) => o_waveformImag/n_numberImag/nil

"Returns the imaginary part of a waveform representing a complex number or returns the imaginary part of a complex number."


importSkillVar - SKILL++ mode( s_variable ... ) => nil

"Tells the compiler that the given variable names should be treated as SKILL global variables in SKILL++ code."


inScheme( g_form  ) => g_result

"Evaluates a form as top-level SKILL++ code, disregarding the surrounding evaluation context."


inSkill( g_form  ) => g_result

"Evaluates a form as top-level SKILL code, disregarding the surrounding evaluation context."


includeFile( t_fileName  ) => t_fileName

"Includes the specified file in the final netlist of the simulator for the current session."


index( t_string1 S_string2  ) => t_result/nil

"Returns a string consisting of the remainder of string1 beginning with the first occurrence of string2."


infile( S_fileName  ) => p_inport/nil

"Opens an input port ready to read a file. Always remember to close the port when you are done."


inportp( g_obj  ) => t/nil

"Checks if an object is an input port."


installDebugger(  ) => t/nil

"Installs the SKILL debugger as the error handler so that the debugger is entered automatically upon error. Turns on debug mode."


instring( t_string  ) => p_port

"Opens a string for reading, just as infile would open a file."


intToChar( x_ascii  ) => s_char

"Returns the single-character symbol whose ASCII code is the given integer value."


integ( o_waveform  ) => o_waveform/n_value/nil

"Computes the definite integral of the waveform with respect to the X axis."


integerp( g_obj  ) => t/nil

"Checks if an object is an integer. This function is the same as fixp."


ip( t_component [?resultsDir t_resultsDir][?result s_resultName] ) => o_waveform/nil

"Aliased to phase(i()). Gets the phase of the AC current through a component."


ip3Plot( o_wave x_sigHarmonic x_refHarmonic x_extrapolationPoint  ) => t/nil

"Plots the IP3 curves."


ipn( o_spurious o_reference [ f_ordspur f_ordref f_epspur f_epref b_psweep s_measure ]  ) => o_waveform/f_number/nil

"Performs an intermodulation nth-order intercept measurement."


ipnVRI( o_vport x_harmspur x_harmref [?iport o_iport] [?rport f_rport] [?ordspur f_ordspur] [?epoint f_epoint] [?psweep b_psweep] [?epref f_epref] [?ordref f_ordref] [?measure s_measure]  ) => o_waveform/f_number/nil

"Performs an intermodulation nth-order intercept point measurement."


ipnVRICurves( o_vport x_harmspur x_harmref [?iport o_iport] [?rport f_rport] [?ordspur f_ordspur] [?epoint f_epoint] [?psweep b_psweep] [?epref f_epref] [?ordref f_ordref]  ) => o_waveform/nil

"Constructs the waveforms associated with an ipn measurement."


ir( t_component [?resultsDir t_resultsDir][?result s_resultName] ) => o_waveform/nil

"Aliased to real(i()). Gets the real part of a complex number representing the AC current through a component."


isCallable( s_function  ) => t/nil

"Checks if a function is defined or is autoloadable from a context."


isContextLoaded( t_cxt  ) => t/nil

"Returns t if a context file with the given base name has been loaded into the current session."


isDir( S_name [ tl_path ] ) => t/nil

"Checks if a path exists and if it is a directory name."


isExecutable( S_name [ tl_path ] ) => t/nil

"Checks if you have permission to execute a file or search a directory."


isFile( S_name [ tl_path ] ) => t/nil

"Checks if a file exists and that it is not a directory."


isFileEncrypted( S_name  ) => t/nil

"Checks if a file exists and is encrypted."


isFileName( S_name [ tl_path ] ) => t/nil

"Checks if a file or directory exists."


isLink( S_name [ tl_path ] ) => t/nil

"Checks if a path exists and if it is a symbolic link."


isMacro( s_symbolName  ) => t/nil

"Checks if the given symbol denotes a macro."


isReadable( S_name [ tl_path ] ) => t/nil

"Checks if you have permission to read a file or list a directory. Uses the current SKILL path for relative paths."


isWritable( S_name [ tl_path ] ) => t/nil

"Checks if you have permission to write to a file or update a directory. Uses the current SKILL path for relative paths."


iterVsValue( t_monteExprName ?outputFormat s_outputFormat ) => t/nil

"Prints the value of every scalar measurement for each Monte Carlo iteration."


kf( o_s11 o_s12 o_s21 o_s22  ) => o_waveform/nil

"Returns the stability factor in terms of the supplied parameters."


killJob( t_jobName [t_jobName2 t_jobName3 - t_jobNameN]  ) => t/nil

"Stops processing of a job or series of jobs."


lambda( ( s_formalArgument ) g_expr1 ... ) => U_result

"Defines a function without a name. This is a syntax form."


last( l_arg  ) => l_result

"Returns the last list cell in a list."


lconc( l_tconc l_list  ) => l_result

"Uses a tconc structure to efficiently splice a list to the end of another list."


length( lao_arg  ) => x_result

"Determines the length of a list, array, or association table."


let - SKILL mode( l_bindings g_expr1 ...  ) => g_result

"Provides a faster alternative to prog for binding local variables only. This is a syntax form."


let - SKILL++ mode( [s_var] ( ( s_var1 s_initExp1 )  	( s_var2 s_initExp2 ) ... ) body  ) => g_result

"Declares a lexical scope in SKILL++ mode. This includes a collection of local variables, as well as body expressions to be evaluated. This becomes a named let if the optional s_var is given."


letrec - SKILL++ mode( ( ( s_var1 s_initExp1 ) ( s_var2 s_initExp2 ) ... ) body ) => g_result

"A letrec expression can be used in SKILL++ mode only. All the bindings are in effect while their initial values are being computed, thus allowing mutually recursive definitions. Use letrec to declare recursive local functions."


letseq - SKILL++ mode( ( ( s_var1 initExp1 ) ( s_var2 initExp2 ) ... ) body ) => g_result

"A letseq expression can be used in SKILL++ mode only. The bindings and evaluations are performed sequentially."


linRg( n_from n_to n_by  ) => l_range/nil

"Returns a list of numbers in the linear range from n_from to n_to incremented by n_by."


lineread( [ p_inputPort ]  ) => t/nil/l_results

"Parses the next line in the input port into a list that you can further manipulate.It is used by the interpreter"


linereadstring( t_string  ) => g_value/nil

"Executes lineread on a string and returns the first form read in. Anything after the first form is ignored."


list( [ g_arg1 g_arg2 ...]  ) => l_result/nil

"Creates a list with the given elements."


listFunctions( t_pattern  ) => l_functions/nil

"Returns all public function names that contain the given substring or match the given regular expression."


listToVector( l_list  ) => a_vectorArray

"Returns a vector (array) filled with the elements from the given list."


listVariables( t_pattern  ) => l_variables

"Returns all variable names that match the given substring or regular expression as part or all of their print name."


listp( g_value  ) => t/nil

"Checks if an object is a list."


ln( {o_waveform | n_number}  ) => o_waveform/f_number/nil

"Gets the base-e (natural) logarithm of a waveform or number."


load( t_fileName [t_password] ) => t

"Opens a file, repeatedly calls lineread to read in the file, immediately evaluating each form after it is read in. Uses the file extension to determine the language mode (.il for SKILL and .ils for SKILL++) for processing the language expressions contained in the file. For a SKILL++ file, the loaded code is always evaluated in the top level environment."


loadContext( t_contextFileName  ) => t/nil/error

"Loads a context file into the current session."


loadi( t_fileName [t_password] ) => t

"Identical to load, except that loadi ignores errors encountered during the load, prints an error message, and then continues loading."


loadstring( t_string [s_langMode] ) => t

"Opens a string for reading, then parses and executes expressions stored in the string, just as load does in loading a file."


log( n_number  ) => f_result

"Returns the natural logarithm of a floating-point number or integer."


log10( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Gets the base-10 logarithm of a waveform or a number."


logRg( n_from n_to n_by  ) => l_range/nil

"Returns a list of numbers in the log10 range from n_from to n_to advanced by n_by."


lowerCase( S_string  ) => t_result

"Returns a string that is a copy of the given argument with uppercase alphabetic characters replaced by their lowercase equivalents."


lsb( o_s11 o_s12 o_s21 o_s22 g_level g_frequency  ) => o_waveform/nil

"Computes the load stability circles."


lshift( o_waveform n_delta  ) => o_waveform/nil

"Shifts the waveform to the left by the delta value."


mag( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Gets the magnitude of a waveform or number."


makeInstance( us_class  	[ ?initArg1 value1 ] 	[ ?initArg2 value2 ] ...  ) => g_instance

"Creates an instance of a class, which can be given as a symbol or a class object."


makeTable( S_name [g_default_value] ) => o_table

"Creates an empty association table."


makeTempFileName( S_nameTemplate  ) => t_name

"Appends a string suffix to the last component of a path template so that the resulting composite string does not duplicate any existing file name."


makeVector( x_size [ g_init_val ]  ) => a_vectorArray

"Creates an array (vector) with the specified number of elements, and optionally initializes each entry."


make_<name>( ...  ) => r_defstruct

"Creates an instance of a defstruct specified by <name>."


map( u_func l_arg1 [l_arg2 ...]  ) => l_arg1

"Applies the given function to successive sublists of the argument lists and returns the first argument list. All of the lists should have the same length. This function is not the same as the standard Scheme map function. To get the behavior of the standard Scheme map function, use mapcar instead."


mapc( u_func l_arg1 [l_arg2 ...]  ) => l_arg1

"Applies a function to successive elements of the argument lists and returns the first argument list. All of the lists should have the same length. mapc returns l_arg1."


mapcan( u_func l_arg1 [l_arg2 ...]  ) => l_result

"Applies a function to successive elements of the argument lists and returns the result of appending these intermediate results. All of the lists should have the same length."


mapcar( u_func l_arg1 [l_arg2 ...]  ) => l_result

"Applies a function to successive elements of the argument lists and returns the list of the corresponding results. All of the lists should have the same length."


maplist( u_func l_arg1 [l_arg2 ...]  ) => l_result

"Applies a function to successive sublists of the argument lists and returns a list of the corresponding results. All of the lists should have the same length."


max( n_num1 n_num2 [n_num3 ...]  ) => n_result

"Returns the maximum of the values passed in. Requires a minimum of two arguments."


measureTime( g_expression ... ) => l_result

"Measures the time needed to evaluate an expression and returns a list of four numbers. This is a syntax form."


member, memq, memv(  ) => N/A

"Returns the largest sublist of l_list whose first element is g_obj. For comparison, member uses the equal function, memq uses the eq function and memv uses eqv."


min( n_num1 n_num2 [n_num3 ...]  ) => n_result

"Returns the minimum of the value passed in. Requires a minimum of two arguments"


minusp( n_num  ) => t/nil

"Checks if a value is a negative number. Same as negativep."


modelFile( [g_modelFile1 [g_modelFile2 -]]  ) => l_modelFile

"Specifies model files to be included in the simulator input file."



monitor( [?taskMode s_taskMode]  ) => t/nil

"Monitors the jobs submitted to the distributed system."


monteCarlo( [?numIters x_numIters] [?startIter x_startIter] [?analysisVariation s_analysisVariation] [?sweptParam t_sweptParam] [?sweptParamVals l_sweptParamVals] [?saveData saveData] [?append b_append]  ) => t/nil

"Sets up a Monte Carlo analysis."


monteCorrelate( f_correlationValue {t_param1 - t_paramN | t_deviceName1 - t_deviceNameN}  ) => t/nil

"Specifies a correlation coefficient for a list of process parameters or a list of devices specified in individual subcircuits."


monteDisplay(  ) => undefined/nil

"Displays the currently defined Monte Carlo analysis, including all expressions that are defined."


monteExpr( t_monteExprName s_expression  ) => t/nil

"Sets up the Monte Carlo scalar expressions that are used to create the histogram file."


monteOutputs(  ) => t/nil

"Returns the names of the monteExpr expressions, concatenating the monteExprName set in the monteExpr command with the value of the swept variable."


monteResults( ?dataFileName t_scalarDataFile ?paramFileName t_parameterFile ) => t/nil

"Initializes the Monte Carlo data analysis tools."


monteRun( [?jobName t_jobName] [?host t_hostName] [?tasks x_tasks] [?queue t_queueName] [?startTime t_startTime] [?termTime t_termTime] [?dependentOn t_dependentOn] [?mail t_mailingList] [?block s_block] [?notify s_notifyFlag]  ) => s_jobName/nil/t

"Runs a Monte Carlo analysis previously set up with the monteCarlo and monteExpr commands."


monteSelectResults( ?mcdataFileName t_mcdataFileName ?paramFileName  t_paramFileName  ) => t/nil

"Selects the specified mcdata file, which is the file that contains the scalar data."


mprocedure( s_macroName( s_formalArgument ) g_expr1 ... ) => s_funcName

"Defines a macro with the given name that takes a single formal argument. This is a syntax form."


nc( o_NFmin o_Gmin o_RN g_level g_frequency  ) => o_waveform/nil

"Computes the noise circles."


nconc( l_arg1 l_arg2 [l_arg3 ...]  ) => l_result

"Equivalent to a destructive append where the first argument is actually modified."


ncons( g_element  ) => l_result

"Builds a list containing an element. Equivalent to cons( g_element nil )."


needNCells(  ) => N/A

"Ensures that there is enough memory available for the specified number of SKILL objects (cells)."


newWindow(  ) => w_windowID/nil

"Creates a new Waveform window and returns the window ID."


newline( [p_outputPort]  ) => nil

"Prints a newline (backslash n) character and then flushes the output port."


next( [x_steps]  ) => none

"Allows execution to proceed until the next expression. This function only works if executed from within a break handler and if the code you want to step through was loaded under debugMode. See installDebugger."


nextMethodp(  ) => t/nil

"Checks if there is a next applicable method for the current method"


nlDisplayOption( o_netlister  ) => t

"Prints the option names available on this object along with their values."


nlError( o_netlister t_error  ) => nil

"Issues a user error. The error is printed immediately and it is collected on the object. In this way, if netlisting is interrupted, the user is aware of any errors that occurred during netlisting. All errors are printed to the netlist log file."


nlGetDesign( o_netlister  ) => o_design

"Returns the design object."


nlGetFormatter( o_instance  ) => o_formatter

"Returns the formatter."


nlGetGlobalNets( o_netlister  ) => l_globalNets

"Returns the list of global nets. This method should only be used in the nlPrintHeader method of the formatter."


nlGetId( o_cellView  ) => o_id

"Returns the cdba database ID of the cellview."


nlGetModelName( o_instance  ) => t_modelName

"This method must be used to obtain the model name of an instance. Use of this method assures consistency in netlisting across interfaces. For instances that represent subcircuits, this method returns a name chosen by the netlister, using the modulePrefix netlist option."


nlGetNetlistDir( o_netlister  ) => t_netlistDir

"Returns the netlist directory."


nlGetNetlister( o_instance  ) => o_netlister

"Returns the netlister."


nlGetNumberOfBits( o_instance t_terminal  ) => x_bits

"Returns the number of bits on the instance and terminal specified."


nlGetOption( o_netlister s_name  ) => g_value

"Returns the value of the option."


nlGetOptionNameList( o_netlister  ) => l_names

"Returns the list of option names available on this object."


nlGetParamList( o_cellView  ) => l_parameters

"Returns the list of parameters for this cellview."


nlGetParamStringValue( o_inst s_parameter  ) => t_value / nil

"Returns a string representing the parameter value for the instance and parameter name."


nlGetSignalList( o_instance  ) => l_signals

"Returns the list of mapped signal names for the instance according to the terminal order specified for the cellview. Use this method for printing instances to the netlist by the nlPrintInst method of the formatter. The terminal order for schematic subcircuits is determined by the pin order property on the schematic, or by the termOrder property on the CDF, or by the system, in that order."


nlGetSimName( o_cellView  ) => t_simName

"Returns the simulator name of the subcircuit."


nlGetSwitchViewList( o_cellView  ) => l_switchViews

"Returns the switch view list for the cellView."


nlGetTerminalList( o_instance  ) => l_terminals

"Returns the list of terminal names in the order specified on the pin order property on the schematic, or on the termOrder property on the CDF, or on the cellview of the instance, in that order. This method should not be used by the formatter. In contrast to nlGetSignalList, buses are not handled individually: a terminal such as out<0:3> is represented in its original form."


nlGetTerminalNets( o_cellView  ) => l_signals

"Returns the schematic names of the signals connected to the terminals. Many of the signals may come from inherited connections."


nlGetTerminalSignalName( o_instance t_terminal [x_bit]  ) => t_signal

"Returns the name of the signal connected to the terminal."


nlGetToolName( o_formatter  ) => s_toolName

"Returns a symbol representing the simulator. It returns the value of the tool name. This name is used for the selection of the simulator information on the library component."


nlGetTopCellName( o_design  ) => t_topCellName

"Returns the cell name of the design."


nlGetTopLibName( o_design  ) => t_topLibName

"Returns the library name of the design."


nlGetTopViewName( o_design  ) => t_topViewName

"Returns the view name of the design."


nlInfo( o_netlister t_info [ g_arg ... ] ) => t

"Sends an informational message to the calling application."


nlInitialize( o_formatter  ) => o_formatter/nil

"For the nlFormatter class, this method initializes the netlister. This method can be redefined for the simulator-specific netlister and is called by nlCreateFormatter. This method initializes all simulator-specific aspects of netlisting such as name mapping. For the nlAnalogFormatter class, this method sets a number of netlist options. These options and their values are shown in the table below. To inspect the value of an option, use nlGetOption. For a description of all netlist options see "


nlMapGlobalNet( o_netlister t_net  ) => t_map

"Maps a global net (signal) to the simulator name. This should only be used in the nlPrintHeader method of the formatter. Use at any other time is an error."


nlObjError( o_netlister o_object t_error  ) => nil

"Similar to nlError, but prints a description of the object along with the error message. The description includes the library name, the cell name, the view name, and the instance name in case the object is an instance."


nlPrintComment( o_netlister [t_arg1 t_arg2 ...]  ) => t/nil

"Prints a comment. Use this method to print all comments. This method uses the comment character and line wrapping. A subsequent nlPrintf call inserts the end comment string."


nlPrintComments( o_instance  ) => t

"Prints the comments for the instance being netlisted."


nlPrintFooter( o_formatter  ) => t/nil

"This method is called at the end of netlisting."


nlPrintHeader( o_formatter  ) => t/nil

"This method:"


nlPrintHeaderComments( o_formatter  ) => t/nil

"Prints the comments for the netlist file, including the library, cell, and view names of the top-level cellview of the design netlisted. This method only has effect when the printFileComments netlist option is set."


nlPrintIndentString( o_netlister  ) => t/nil

"Prints the indent string for the instance statement. When inside the top-level circuit, the empty string is printed. When inside subcircuit definitions, the value of the subcktIndentString netlist option is printed."


nlPrintInst( o_formatter o_instance  ) => t/nil

"Prints the netlist statement for the instance. This is the default netlist procedure for the component. It does the following:"


nlPrintInstComments( o_formatter o_instance  ) => t

"Prints the comments for an instance."


nlPrintInstEnd( o_formatter o_instance  ) => t/nil

"Prints the end of the instance statement, which is a return (\n). This method is called by the netlister after the netlist procedure or by nlPrintInst."


nlPrintInstName( o_formatter o_instance  ) => t/nil

"Prints the simulator name of the instance, taking the instance name prefix specified on the component into account when the simulator so requires. This is determined with the useInstPrefix netlist option."


nlPrintInstParameters( o_formatter o_instance  ) => t/nil

"Prints the instance parameters in name=value pairs."


nlPrintInstSignals( o_formatter o_instance  ) => t/nil

"Prints the simulator names of the signals according to the terminal order specified on the component, using the nlGetSignalList method of the instance."


nlPrintModelName( o_formatter o_instance  ) => t/nil

"Prints the model name. The nlGetModelName for the instance is used for the model name."


nlPrintSubcktBegin( o_formatter o_cellView  ) => t/nil

"Prints the .subckt keyword for the nlAnalogFormatter class. This method is called by nlSubcktHeader."


nlPrintSubcktEnd( o_formatter o_cellView  ) => t/nil

"For the nlAnalogFormatter class, prints the .ends keyword, followed by a space and the simulator name of the subcircuit, to mark the end of the subcircuit definition. It is called by nlPrintSubcktFooter."


nlPrintSubcktFooter( o_formatter o_cellView  ) => t/nil

"Writes the footer for the subcircuit. For the nlAnalogFormatter class, it prints .ends."


nlPrintSubcktFooterComments( o_formatter o_cellView  ) => t

"Prints the comments for the subcircuit footer by printing the string "


nlPrintSubcktHeader(  ) => N/A

"Writes the header of a subcircuit following these steps:"


nlPrintSubcktHeaderComments( o_formatter o_cellView  ) => t

"Prints the comments for the subcircuit header and the mapping information when the printSubcktComments option is set."


nlPrintSubcktName( o_formatter o_cellView  ) => t/nil

"Prints a space and the simulator name of the subcircuit. This method is used by nlSubcktHeader."


nlPrintSubcktParameters( o_formatter o_cellView  ) => t/nil

"Prints the passed parameters for the subcircuit definition."


nlPrintSubcktTerminalList( o_formatter o_cellView  ) => t/nil

"Prints the simulator names of the signals connected to the terminals for a subcircuit definition and handles the signals resulting from inherited connections at a lower level ."


nlPrintTopCellFooter( o_formatter o_cellView  ) => t/nil

"Writes the top cellview footer. This function prints an empty line and calls nlPrintTopCellFooterComments."


nlPrintTopCellFooterComments( o_formatter o_cellView  ) => t

"Returns t at the analogFormatter level."


nlPrintTopCellHeader( o_formatter o_cellView  ) => t/nil

"Prints the header of the top-level circuit by calling nlPrintTopCellHeaderComments."


nlPrintTopCellHeaderComments( o_formatter o_cellView  ) => t

"Calls nlPrintSubcktHeaderComments for the nlAnalogFormatter class."


nlSetOption( o_netlister s_option g_value  ) => t/nil

"Sets an option value. For information about options, see "


nlWarning( o_netlister t_warning [ g_arg ... ]  ) => t

"Issue a warning to the user."


nodeset( t_netName1 f_value1 - [t_netNameN f_valueN] ) => undefined/nil

"Sets the initial estimate for nets in a DC analysis, or sets the initial condition calculation for a transient analysis."


noise( t_output t_source  ) => undefined/nil

"Specifies a noise analysis."


noiseSummary( s_type [?resultsDir t_resultsDir][?result S_resultName] [?frequency f_frequency] [?weight f_weight] [?output t_fileName | p_port] [?noiseUnit t_noiseUnit] [?truncateData x_truncateData][?truncateType s_truncateType] [?digits x_digits] [?percentDecimals x_percentDecimals] [?from f_from] [?to f_to] [?deviceType ls_deviceType] ) => t_fileName/p_port/nil

"Prints a report showing the noise contribution of each component in a circuit."


ocnDisplay( [?output t_filename | p_port] s_command [g_commandArg1] [g_commandArg2] -  ) => t/nil

"Displays all the information specified."


ocnHelp( [?output t_filename | p_port][s_command]  ) => t/nil

"Provides online help for the specified command."


ocnPrint( [?output t_filename | p_port] [?precision x_precision] [?numberNotation s_numberNotation] [?numSpaces x_numSpaces] [?width x_width] o_waveform1 [o_waveform2 ...]  ) => t/nil

"Prints the text data of the waveforms specified in the list of waveforms."


off( s_command [g_commandArg1] [g_commandArg2] -  ) => t/nil

"Turns off the specified information."


openMIFin( t_fileName  ) => t / nil

"Opens a MIF file for input."


openMIFout( t_fileName  ) => t / nil

"Opens a MIF file for output."


openResults( s_jobName | t_dirName  ) => t_dirName/nil

"Opens simulation results stored in PSF files or opens the results from a specified job, depending on which parameter is called."


optimizeAlgoControl( ?relDelta x_relDelta ?relFunTol  x_relFunTol ?relVarTol x_relVarTol  ) => undefined/nil

"Changes the internal algorithm controls."


optimizeGoal( t_name t_expr s_direction x_target x_acceptable [?percent b_percent]  ) => undefined/nil

"Sets up the goals for optimization."


optimizePlotOption( ?auto b_auto ?varHist b_varHist ?scalHist b_scalHist ?funcObjHist b_funcObjHist ?numIter x_numIter ?fontSize x_fontSize ?width x_width ?height x_height ?xloc xloc ?yloc yloc  ) => undefined/nil

"Sets the plot options used to view the optimization iterations."


optimizeRun( ?goals l_goalNames ?vars l_varNames ?numIter  x_numIter  ?algo s_algoName ?continue b_continue ) => t/nil

"Runs the optimizer using the goals specified with the optimizeGoal command."


optimizeVar( t_name x_initVal x_minVal x_maxVal  ) => undefined/nil

"Specifies the design variables to be used with optimization."


option( [?categ s_categ] s_option1 g_value1 [s_option2 g_value2]  -  ) => undefined/nil

"Specifies the values for built-in simulator options. You can specify values for as many options as you want."


outfile( S_fileName [t_mode]  ) => p_outport/nil

"Opens an output port ready to write to a file."


outputParams( t_compType  ) => l_outputParams/nil

"Returns the list of output parameters for the specified component."


outputs( [?result S_resultName]  ) => l_outputs/nil

"Returns the names of the outputs whose results are stored for an analysis previously specified with selectResult. You can plot these outputs or use them in calculations."


overshoot( o_waveform n_initVal g_initType n_finalVal g_finalType  ) => o_waveform/n_value/nil

"Computes the percentage by which an expression overshoots a step going from the initial value to the final value you enter."


paramAnalysis( t_desVar [?start n_start] [?stop n_stop] [?center n_center] [?span n_span] [?step f_step] [?lin n_lin] [?log n_log]  [?dec n_dec] [?oct n_oct] [?times n_times] [?spanPercent n_spanPercent] [?values l_values] [o_paramAnalysis] ) => undefined/nil

"Sets up a parametric analysis."


paramRun( [s_paramAnalysis]  ) => t/nil

"Runs the specified parametric analysis."


path( t_dirName1 - [t_dirNameN] ) => l_pathList/nil

"Sets the search path for included files."


peakToPeak( o_waveform  ) => o_waveform/n_value/nil

"Returns the difference between the maximum and minimum values of a waveform."


phase( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Gets the phase of the waveform or number."


phaseDeg( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Calculates the wrapped phase in degrees of a waveform and returns a waveform."


phaseDegUnwrapped( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Calculates the unwrapped phase in degrees of a waveform and returns a waveform."


phaseMargin( o_waveform  ) => o_waveform/n_value/nil

"Computes the phase margin of the loop gain of an amplifier."


phaseNoise( g_harmonic S_signalResultName [?result S_noiseResultName] [?resultsDir t_resultsDir]  ) => o_waveform/nil

"Returns the phase noise waveform from the selected result data."


phaseRad( {o_waveform | n_number}  ) => o_waveform/n_number/nil

"Calculates the wrapped (discontinuous) phase in radians of a waveform."


phaseRadUnwrapped( o_waveform  ) => o_waveform/nil

"Calculates the unwrapped (continuous) phase in radians of a waveform and returns a waveform."


plot( o_waveform1 [o_waveform2 ...] [?yNumber l_yNumberList] [?expr l_exprList]  ) => t/nil

"Plots waveforms in the current subwindow. If there is no Waveform window, this command opens one."


plotStyle( S_style  ) => t/nil

"Sets the plotting style for all the waveforms in the current subwindow."


pow( {o_waveformBase | n_numberBas} {o_waveformExpn | n_numberExpn}  ) => o_waveform/n_result/nil

"Takes the exponent of a given waveform or number."


pp( s_functionName [p_outputPort]  ) => nil

"Pretty prints the definition of a function. The function must not be read-protected. This is an nlambda function."


prependPath( t_dirName1 - [t_dirNameN] ) => undefined/nil

"Adds a new path to the beginning of the search path list. You can add as many paths as you want with this command."


printf( t_formatString [g_arg1 ...]  ) => t

"Writes formatted output to poport, which is the standard output port."


println( g_value [p_outputPort]  ) => nil

"Prints a SKILL object using the default format for the data type of the value, and then prints a newline character."


printstruct( g_object  ) => t

"Prints the contents of an association table or defstruct in a tabular format."


profile( s_profileField  ) => t

"Turns on global SKILL profiling for measuring time or memory."


profileReset(  ) => t

"Resets all SKILL profiler data."


profileSummary( [?file t_filename]  [?sort s_sortKey]  [?filters g_filterSpec]  [?maxFns x_maxDisplayed] [?minSecs f_minSecs]  [?minBytes x_minBytes] [?children g_showChildren] ) => t

"Prints a summary of profiling results, showing either the execution time or memory allocated to SKILL functions that were executed."


psd( o_waveform f_timeStart f_timeEnd x_num ?windowName t_windowName ?smooth x_smooth ?cohGain f_cohGain ?windowsize x_windowsize ?detrending t_detrending ) => o_waveformReal/nil

"Returns an estimate for the power spectral density of o_waveform. If x_windowsize is not a power of 2, it is forced to the next higher power of 2. If x_num is less than x_windowsize, x_num is forced to x_windowsize."


psdbb( o_waveform1 o_waveform2 f_timeStart f_timeEnd x_num ?windowName t_windowName ?smooth x_smooth ?cohGain f_cohGain ?windowsize x_windowsize ?detrending t_detrending ) => o_waveformReal/nil

"Returns an estimate for the power spectral density of o_waveform1+j*o_waveform2. If x_windowsize is not a power of 2, it is forced to the next higher power of 2. If x_num is less than x_windowsize, x_num is forced to x_windowsize."


putMIFFile( l_groupOfStatements  t_fileName  ) => x_numStatements

"Opens a file for output and writes out MIF statements whose SMIFT equivalents are in a given list. "


pv( t_name t_param [?resultsDir t_resultsDir][?result S_resultName] ) => g_value/nil

"Returns the value for the specified component parameter. You can use the outputParams command to get the list of parameters for a particular component."


random( [x_number]  ) => x_result

"Returns a random integer between 0 and x_number minus 1."


readMIF(  ) => l_statement / nil

"Reads the next MIF statement from an open MIF file. "


real( {o_waveform | n_input}  ) => o_waveformReal/n_numberReal/nil

"Returns the real part of a waveform representing a complex number, or returns the real part of a complex number."


remoteDir( t_path  ) => t/nil

"Specifies the project directory on the remote host to be used for remote simulation."


removeLabel( l_id  ) => t/nil

"Removes the label, or all the labels identified in a list, from the current subwindow."


report( [?output t_filename | p_port] [?type t_type] [?name t_name] [?param t_param] [?format s_reportStyle]  ) => t/nil

"Prints a report of the information contained in an analysis previously specified with selectResult."


residual( x_scalarExpression ?upper x_upperValue ?target x_targetValue ?lower x_lowerValue ) => t/nil

"Creates a residual plot of the given scalar expression given the upper and lower performance bounds and target."


restore( s_analysisType t_filename  ) => undefined/nil

"Tells the simulator to restore the state previously saved to a file with a store command."


resultParam( S_propertyName [ ?result S_resultName ] [ ?resultsDir t_resultsDir ]  ) => L_value/nil

"Returns the value of a header property from the selected result data."


results(  ) => l_results/nil

"Returns a list of the type of results that can be selected."


resultsDir( t_dirName  ) => undefined/nil

"Specifies the directory where the PSF files (results) are stored."


resume( [g_result]  ) => N/A

"Exits the interactive top-level loop started with the most recently invoked toplevel function and returns its argument to the caller of toplevel. Do not use this function programmatically; use it only as an interactive command."


resumeJob( t_jobName [t_jobName2 t_jobName3 - t_jobNameN]  ) => t/nil

"Resumes the processing of a previously suspended job or series of jobs. The resumeJob command applies only to jobs that are suspended."


riseTime( o_waveform n_initVal g_initType n_finalVal g_finalType n_theta1 n_theta2  ) => o_waveform/n_value/nil

"Returns the rise time measured between theta1 (percent low) to theta2 (percent high) of the difference between the initial value and the final value."


rms( o_waveform  ) => o_waveform/n_value/nil

"Returns the root-mean-square value of a waveform."


rmsNoise( n_from n_to  ) => o_waveform/n_value/nil

"Computes the integrated root-mean-square noise over the specified bandwidth."


root( o_waveform n_rootVal x_n  ) => o_waveform/n_value/l_value/nil

"Returns the nth X value at which the Y value equals the specified Y value (rootVal)."


round( n_arg  ) => x_result

"Rounds a floating-point number to its closest integer value."


rshift( o_waveform n_delta  ) => o_waveform/nil

"Shifts the waveform to the right by the n_delta value."


run( [analysisList] [?jobName t_jobName] [?host t_hostName] [?queue t_queueName] [?startTime t_startTime] [?termTime t_termTime] [?dependentOn t_dependentOn] [?mail t_mailingList] [?block s_block] [?notify s_notifyFlag] ) => s_jobName/nil run( )=>t_dirName/nil run(s_analysisType1 - s_analysisTypeN ) => t_dirName/nil

"Starts the simulation or specifies a time after which an analysis should start."


sample( o_waveform n_from n_to t_type n_by  ) => o_waveform/n_number/nil

"Samples a waveform at the specified interval."


save( [?categ s_categ] s_saveType [t_saveName1] - [t_saveNameN]  ) => undefined/nil

"Specifies the outputs to be saved and printed during simulation."


saveContext( t_contextFileName  ) => t/nil

"Saves the current state of the SKILL language interpreter as a binary file. This function must be used in conjunction with setContext."


saveOption( [s_option1 g_optionValue1]-[s_optionN g_optionValueN] ) => undefined/nil

"Specifies save options to be used by the simulator."


scatterPlot( t_monteExprName_X t_monteExprName_Y ?bestFit b_bestFit  ) => t/nil

"Plots different statistical measurements against each other so you can determine whether there is a relationship between two parameters."


selectProcess( t_processName ) => t/nil

"Selects one of the processes already loaded with a loadPcf or loadDcf command."


selectResult( S_resultsName [n_sweepValue] ) => o_results/nil

"Selects the results from a particular analysis whose data you want to examine."


setContext( t_contextName  ) => t

"Allows contexts to be saved incrementally, creating micro contexts from a session"


setPrompts( s_prompt1 s_prompt2  ) => t / nil

"Sets the prompt text string for the CIW. The first prompt is used to indicate the topmost top-level. The second prompt is used whenever a nested top-level is entered."


setSlotValue( g_standardObject s_slotName g_value  ) => g_value

"Sets the s_slotName slot of g_standardObject to g_value."


settlingTime( o_waveform n_initVal g_initType n_finalVal g_finalType n_theta  ) => o_waveform/n_value/nil

"Computes the time required for a waveform to settle within the specified percent of step (theta) of the difference between the initial value and final value."


setup( [?numberNotation s_numberNotation] [?precision x_precision] [?reportStyle s_reportStyle] [?charsPerLine x_charsPerLine] [?messageOn g_messageOn]  ) => t/nil

"Specifies default values for parameters."


simulator( s_simulator  ) => s_simulator/nil

"Starts an OCEAN session and sets the simulator name for that session. The previous session (if any) is closed and all session information is cleared."


sin( n_number  ) => f_result

"Returns the sine of a floating-point number or integer."


sklint( [?file 	t_inputFileName] [?context 	t_contextName] [?prefixes 	l_prefixList] [?outputFile 	t_outputFileName] [?noPrintLog 	g_noPrintLog] [?ignores 	l_ignoresMessageList] [?checkNlambda 	g_checkNlambda]  ) => t/nil

"Checks a SKILL file or context and reports potential errors and ways to clean up your code."


slewRate( o_waveform n_initVal g_initType n_finalVal g_finalType n_theta1 n_theta2  ) => o_waveform/n_value/nil

"Computes the average rate at which an expression changes from theta1 (percent low) to theta2 (percent high) of the difference between the initial value and final value."


slotValue( g_standardObject s_slotName  ) => g_value

"Returns the value contained in the slot slotName of the given standardObject."


sp( x_iIndex x_jIndex [ ?result S_resultName ] [ ?resultsDir t_resultsDir ]  ) => o_waveform/nil

"Returns S-parameters for N port networks."


specLimits( t_monteExprName ( {?sigma x_sigma  | ?upper x_upper ?lower x_lower} )  ) => t/nil

"Sets specification limits for yield analysis and histograms."


spectralPower( o_current o_voltage  ) => o_power/nil

"Returns the spectral power given the spectral current and voltage."


sqrt( n_number  ) => f_result

"Returns the square root of a floating-point number or integer."


srandom( x_number  ) => t

"Sets the seed of the random number generator to a given number."


ssb( o_s11 o_s12 o_s21 o_s22 g_level g_frequency  ) => o_waveform/nil

"Computes the source stability circles."


stacktrace( [g_unevaluated] [x_depth] [x_skip] [p_port]  ) => x_result

"Prints the functions on the stack and their arguments to the depth specified, or to the bottom of the stack."


step( [x_steps]  ) => N/A

"Steps into functions and executes a given number of SKILL functions. This function only works if executed from within a break handler and if the code you want to step through was loaded under debugMode. See installDebugger."


stepend( [x_stepN]  ) => N/A

"Allows execution to proceed to the end of the nth enclosing form and displays its result. stepend cannot proceed past the end of the current function. This function only works if executed from within a break handler and if the code you want to step through was loaded under debugMode. See installDebugger."


stepout( [x_steps]  ) => N/A

"Allows execution to proceed until the evaluator returns from the current function."


stimulusFile( t_fileName [t_fileName2 - t_fileNameN ] [?xlate b_xlate]  ) => l_fileNames/nil

"Specifies stimulus files to be used by the simulator."


store( s_analysisType t_filename  ) => t_filename/nil

"Requests that the simulator store its node voltages to a file."


sub1( n_number  ) => n_result

"Subtracts 1 from a floating-point number or integer."


subclassp( u_classObject1 u_classObject2  ) => t/nil

"Predicate function that checks if classObject1 is a subclass of classObject2."


superclassesOf( u_classObject  ) => l_superClasses

"Returns the ordered list of all super classes of u_classObject. Each element in the list is a class object."


suspendJob( t_jobName [t_jobName2 t_jobName3 - t_jobNameN]  ) => t/nil

"Suspends the processing of a job or series of jobs. The suspendJob command applies only to jobs that are pending or running."


sweepNames( [o_waveForm]  ) => l_sweepName/nil

"Returns the names of all the sweep variables in the PSF file previously specified with selectResult. This command is particularly useful for parametric analyses."


sweepValues( [o_waveForm]  ) => l_sweepValues/nil

"Returns the list of sweep values of the outermost sweep variable of either the selected results or the supplied waveform. This command is particularly useful for parametric analyses."


tan( n_number  ) => f_result

"Returns the tangent of a floating-point number or integer."


tangent( o_waveform [ ?x n_x ] [ ?y n_y ] [ ?slope n_slope ]  ) => o_waveform/nil

"Returns the tangent to a waveform through the point (n_x, n_y) with the given slope."


temp( f_tempValue  ) => f_tempValue/nil

"Specifies the circuit temperature."


thd( o_waveform n_from n_to x_num  ) => o_waveform/n_thdValue/nil

"Computes the absolute value of the total harmonic distortion of the input waveform."


toplevel( [s_langMode] [e_envobj] ) => g_result

"Starts an interactive top-level loop in either SKILL or SKILL++ mode. Valid values for s_langMode: ils, or il. Defaults to il, SKILL mode."


tracef( [ s_function | t_fileName ... | t ] ) => g_result

"Turns on tracing of specified functions. Shows the functions called with their evaluated arguments and return values. This is an nlambda function."


tracep( [s_property...|t]  ) => g_result

"Turns on tracing of assignments to specified properties. This is an nlambda function."


tracev( [s_variable ... | t]  ) => g_result

"Turns on tracing of assignments to specified variables. This is an nlambda function."


tran( g_fromValue g_toValue g_byValue ) => g_byValue/nil tran( g_toValue ) => undefined/nil

"Specifies a transient analysis with limited options. If other analysis options are needed, use the analysis command."


unbreakpt( [s_function... | t]  ) => g_result

"Clears breakpoints. This is an nlambda function."


uncount( [s_function ... | t]  ) => g_result

"Turns off counting and returns the current count results. This is an nlambda function."


undrawEnterFun(  ) => t / nil

"Undraws any rubberbanding shapes. Called when an enterfunction is active. If you enter data in the window, rubberbanding resumes."


uninstallDebugger(  ) => t/nil

"Uninstalls the SKILL debugger as the error handler. Turns off debug mode."


unless( g_condition g_expr1 -  ) => g_result/nil

"Evaluates a condition. If the result is true (non-nil), it returns nil; otherwise it evaluates the body expressions in sequence and returns the value of the last expression."


unprofile(  ) => t

"Turns off SKILL profiling."


untrace( [s_function | t_fileName ... | t]  ) => g_result

"Turns tracing off for all functions specified that were traced using the tracef function. This is an nlambda function."


untracep( [S_property...|t]  ) => g_result

"Turns off tracing of the specified properties. This is an nlambda function."


untracev( [s_variable ... | t]  ) => g_result

"Turns off tracing for assignments to specified variables. This is an nlambda function."


v( t_net [?resultsDir t_resultsDir][?result S_resultName] ) => o_waveform/nil

"Returns the voltage of the specified net."


value( o_waveform [s_name] g_value  ) => o_waveform/g_value/nil

"Returns the Y value of a waveform for a given X value."


vdb( t_net [?resultsDir t_resultsDir][?result s_resultname] ) => o_waveform/nil

"Aliased to db20(v()). Gets the power gain in decibels from net in to net out."


vhdlImport( t_libName l_srcFiles t_logName l_params @optional y_runInBackground y_displayResults ) => N/A

"Runs vhdlin to import a list of VHDL source files into the specified library with the given parameters. The parameters are the names of the vhdlin parameters, passed in as a disembodied property list. Optionally, can run vhdlin as a background process and/or display the results interactively."


vhdlPinListToVHDL( t_libName t_cellName t_viewName l_pinList ) => N/A

"Allows the generation of VHDL views from an intermediate pin list format."


vhdlRegisterSimulator( ParserCallBack AnalyzerCallBack AnalyzerFileExt ElaboratorCallBack SimulatorCallBack DataDirCallBack DataFileCallBack WorkLibCallBack ) => N/A

"To use non-Cadence VHDL tools, you need to define your own SKILL procedures and register this information with the toolbox using this SKILL routine. For more details, please refer Appendix C of Virtuoso Schematic Composer VHDL Interface User Guide in OpenBook"


vhdlToPinList( t_libName t_cellName t_viewName ) => N/A

"Translates a VHDL cellView into an intermediate pin list format."


view( t_file [g_boxSpec] [g_title] [g_autoUpdate] [l_iconPosition]  ) => w_windowId / nil

"Creates a viewfile window, inserts the banner menu, sets the window and icon names, and displays the specified file in the window. View is a wrapper function."


vim( t_net [?resultsDir t_resultsDir][?result s_resultname] ) => o_waveform/nil

"Aliased to imag(v()). Gets the imaginary part of a complex number representing the voltage of a net."


vm( t_net [?resultsDir t_resultsDir][?result s_resultname] ) => o_waveform/nil

"Aliased to mag(v()). Gets the magnitude of the voltage of a net."


vp( t_net [?resultsDir t_resultsDir][?result s_resultname] ) => o_waveform/nil

"Aliased to phase(v()). Gets the phase of the voltage of a net."


vr( t_net [?resultsDir t_resultsDir][?result s_resultname] ) => o_waveform/nil

"Aliased to real(v()). Gets the real part of a complex number representing the voltage of a net."


vswr( x_index [ ?result S_resultName ] [ ?resultsDir t_resultsDir ]  ) => o_waveform/nil

"Computes the voltage standing wave ratio."


wait( jobName [jobName2 jobName3 - jobNameN]  ) => t/nil

"Postpones processing of a script until the specified jobs complete. This command is ignored if distributed processing is not available."


when( g_condition g_expr1 -  ) => g_result/nil

"Evaluates a condition."


where( [g_unevaluated] [x_depth] [x_skip] [p_port]  ) => x_result

"Prints the functions on the stack and their arguments to the depth specified, or to the bottom of the stack, including the local variables and their bindings."


whereIs( s_function ) => t/nil

"Prints the last file loaded in debug mode in which a function was defined, as well as the starting line number."


while( g_condition g_expr1 -  ) => t

"Repeatedly evaluates g_condition and the sequence of expressions  g_expr1 - if the condition is true."


window( w_windowNumber   ) => w_windowId / nil

"Retrieves the window identity of a window number. "


windowp( g_object   ) => t / nil

"Checks whether the specified object is a valid, opened window."


xLimit( l_minMax  ) => t/nil

"Sets the X axis display limits for the current subwindow. This command does not take effect if the display mode is set to smith."


xmax( o_waveform x_numberOfPeaks  ) => o_waveform/g_value/l_value/nil

"Computes the value of the independent variable (X) at which the Y value attains its maximum value."


xmin( o_waveform x_numberOfValleys  ) => o_waveform/g_value/l_value/nil

"Computes the value of the independent variable (X) at which the Y value attains its minimum value."


xval( o_waveform  ) => o_waveform/nil

"Returns a waveform whose X vector and Y vector are equal to the input waveform"


yLimit( l_minMax [?yNumber x_yNumber] [?stripNumber x_stripNumber] ) => t/nil

"Sets the Y axis display limits for the waveforms associated with a particular Y axis and strip in the current subwindow."


yield( s_type l_monteExprName ?given l_monteExprName ?suppress x_suppress  ) => t/nil

"Prints simple, conditional, or multiconditional yield statistics for the Monte Carlo data set."


ymax( o_waveform  ) => n_max/o_waveformMax/nil

"Computes the maximum value of the waveform"


ymin( o_waveform  ) => n_min/o_waveformMin/nil

"Computes the minimum value of a waveform"


zm( x_index [ ?result S_resultName ] [ ?resultsDir t_resultsDir ]  ) => o_waveform/nil

"Computes the port input impedance."


zref( x_portIndex [ ?result S_resultName ] [ ?resultsDir t_resultsDir ]  ) => f_impedance/nil

"Returns the reference impedance for an N-port network."


icCreateArraySiteInstances( d_cellview_ID d_site_master f_llx f_lly  x_x_num x_y_num f_x_space f_y_space  t_orien  ) => t/nil

"This function creates a simple mosaic instance of sites or site patterns in a cellview."


icCreateBus( d_cv t_busName l_netList  ) => d_busID/nil

"Creates a bus from the nets you specify, giving it the name you specify. You can use this function with Gate Ensemble."


icCreateSiteInst ( d_cellview_ID d_site_master f_x f_y t_orien ) => d_site_inst/nil

"The function creates an instance of a site cellview in a cellview at the location and in the orientation you specify. The point of location is the Design Framework II location, which is not always the lower left corner as in Gate Ensemble. The point of location varies with the orientation."


icGE2OpusOrien ( t_ge_orien  ) => t_orien/nil

"Given a Gate or Cell3 Ensemble orientation, returns a Preview orientation."


icGE2OpusinstLoc ( f_x f_y f_width f_height t_ge_orien  ) => l_location/nil

"Given an instance location, width, height, and orientation, returns the Preview instance location."


icGetAllSiteInstFromSpat ( d_site_pat_CV  ) => l_site_inst/nil

"Returns a list of the site instances in the site pattern cellview location. This site pattern cellview must have a prCellType property of sitePattern and site instance masters must have a prCellType property of site or the functions returns nil."


icGetArraySiteInstances ( d_cellview_ID  ) => ( d_site_master x_x_num x_y_num f_x_space f_y_space t_orien )/nil

"Given a cellview ID, returns site information in a list. Each element of the list describes site instance information."


icGetBasicSites ( d_cellview_ID  ) => l_site_CV/nil

"Given a cellview, returns a list of basic site cellviews."


icGetCVCellTypeProp ( d_cellview_ID  ) => t_prop_val/nil

"Returns prCellType property of a given cellview."


icGetSiteInstFromSpatbyLoc ( d_site_pat_CV f_x f_y  ) => d_site_inst/nil

"Returns a site instance in site pattern cellview at (f_x f_y). The site pattern cellview must have a prCellType property of sitePattern and site instance masters must have a prCellType property of site or the function returns nil."


icGetSiteInstFromSpatbySiteName ( d_site_pat_CV t_site_name  ) => l_site_inst/nil

"Returns a list of site instances of site (master) named t_site_name in a site pattern cellview. The site pattern cellview must have a prCellType property of sitePattern and site instance masters must have a prCellType property of site or the function returns nil."


icGetSiteSize ( d_cellview_ID  ) => l_size/nil

"Returns a list showing width and height of the given site, if the prCellType property is set to site; otherwise returns nil."


icGetSiteSymmetryProp ( d_cellview_ID  ) => t_symmetry/nil

"Returns the symmetry property value."


icHierSave( d_cv  ) => t/nil

"Saves the design and all modified instance masters. Modified instances have the modifiedButNotSaved property set to t."


icIsBaseArrayCV ( d_cellview_ID  ) => t/nil

"Returns t if the property prCellType exists and has the value baseArray on the given cellview; otherwise returns nil."


icOpus2GEInstLoc ( f_x f_y f_width f_height t_orien  ) => l_location/nil

"Given a Preview instance location, width, height, and orientation, returns a Gate or Cell3 Ensemble instance location."


icOpus2GEOrien ( t_orien  ) => t_ge_orien-/nil

"Given a Preview orientation, returns a Gate or Cell3 Ensemble orientation."


icSetBaseArrayCellTypeProp ( d_cellview_ID  ) => t/nil

"Adds prCellType property with a value of baseArray. You must have write or append access to the cellview."


icSetPRengine( d_cv t_engine  ) => t/nil

"Sets the place-and-route engine you want to use for specific functions. For example, when you analyze groups, regions, blocks, or the design, you must use this function so the analysis function performs correctly."


icSetSitePattCellTypeProp ( t_cell_type  ) => t/nil

"Adds prCellType property with a value of sitePattern. You must have write or append access to the cellview."


icSetSiteSize ( d_cellview_ID f_width f_height  ) => t/nil

"Draws a rectangle of given width and height on the prBoundary layer. The rectangle is drawn in the first quadrant with the lower left point at (0 0). You must have write or append access to the cellview."


icSetSiteSymmetryProp ( d_cellview_ID t_symmetry  ) => t/nil

"Sets the symmetry property for a given site. This property determines the legal orientations for the site."


iccDisplayExportForm( [d_cellview_id] ) => t|nil

"Displays the Export to IC Craftsman form."


iccDisplayImportForm( [d_cellview_id] ) => t|nil

"Displays the Import from IC Craftsman form."


iccExportCellview(  ) => N/A

layoutCellview


iccImportCellview(  ) => N/A

session


iccIsConnected( d_cellview_ID ) => t | nil

"Determines whether a cellview has an associated IC Craftsman process."


iccNewRules( [tech_library_name] ) => t|nil

"Displays the New DFII-ICC Craftsman Rules form. This command is equivalent to the New Rules command."


iccOpenCurrentCellviewRules(  ) => t|nil

"Displays the Open Rules browser for the current cellview. This command is equivalent to the Open Rules command."


iccOpenRules( [location path tech_library_name] ) => t|nil

"Displays the Open DFII-IC Craftsman file-library browser so that you can open a rules file from a file or a library. This command is equivalent to the Open Rules command."


iccSendCommand( d_cellview_ID t_command ) => t_retString

"Sends a command to the IC Craftsman command line interpreter."


iccSendSkillCommand( d_cellview_ID t_command ) => t_retString

"Sends a SKILL command to IC Craftsman."


iccStartICC( [options] ) => t|nil

"Starts IC Craftsman as separate process. This function is equivalent to the Start ICC command."


cdfCopyCDF( d_id t_dataType g_dataId  ) => g_dataId / nil

"Copies CDF data onto the specified id, creating a new dataId of the specified type."


cdfCopyParam( g_dataId g_paramId  ) => g_paramId / nil

"Copies a parameter, adding it to the dataId."


cdfCreateBaseCellCDF( d_cellId  [?doneProc t_doneProc t_formInitProc]  ) => cdfDataId / nil

"Creates a base-level CDF description for a cell."


cdfCreateBaseLibCDF( d_libId  [?doneProc t_doneProc t_formInitProc]  ) => cdfDataId / nil

"Creates a base-level CDF description for a library."


cdfCreateParam(  ) => N/A




cdfCreateUserCellCDF( d_cellId  [?doneProc t_doneProc t_formInitProc]  ) => cdfDataId / nil

"Creates a user-level CDF description for a cell."


cdfCreateUserLibCDF( d_libId  [?doneProc t_doneProc t_formInitProc]  ) => cdfDataId / nil

"Creates a user-level CDF description for a library."


cdfDeleteCDF( g_cdfDataId  ) => t / nil

"Deletes a CDF description, including all attached parameters."


cdfDeleteParam( g_cdfParamId  ) => t / nil

"Deletes a CDF parameter."


cdfDump( t_libName t_fileName  [?cellName t_cellName] [?level s_level]  [?edit b_edit]  ) => t / nil

"Dumps the CDF description for t_libName and t_cellName into t_fileName. If t_cellName is not specified, then only the library CDF description is dumped. s_level is either "


cdfDumpAll( t_libName t_fileName  [?level s_level]  [?edit b_edit]  ) => t / nil

"Dumps the CDF description for t_libName and all its cells into t_fileName. s_level is either "


cdfFindParamByName( g_cdfDataId t_name  ) => g_paramId / nil

"Returns the parameter ID for the specified parameter name on the specified CDF description, if it exists. If not, it returns nil."


cdfGetBaseCellCDF( d_cellId  ) => cdfDataId / nil

"Returns the base-level CDF description attached to a cell. If one is not defined, it returns nil."


cdfGetBaseLibCDF( d_libId  ) => cdfDataId / nil

"Returns the base-level CDF description attached to a library. If one is not defined, it returns nil."


cdfGetCellCDF( d_lcellId  ) => cdfDataId / nil

"Returns the effective CDF description attached to a cell. If neither a base- nor user-level CDF description is defined for the cell or its library, it returns nil. The resulting CDF description represents the overlay of the user-level cell CDF on the base-level cell CDF on the user-level library CDF on the base-level library CDF."


cdfGetInstCDF( d_instId  ) => cdfDataId / nil

"Returns the effective CDF description associated with an instance."


cdfGetLibCDF( d_libId  ) => cdfDataId / nil

"Returns the effective CDF description attached to a library. If neither a base- nor user-level CDF description is defined, it returns nil. The resulting CDF description represents the overlay of the user-level CDF on the base-level CDF."


cdfGetUserCellCDF( d_cellId  ) => cdfDataId / nil

"Returns the user-level CDF description attached to a cell. If one is not defined, it returns nil."


cdfGetUserLibCDF( d_libId  ) => cdfDataId / nil

"Returns the user-level CDF description attached to a library. If one is not defined, it returns nil."


cdfSaveCDF( g_cdfDataId  ) => t / nil

"Saves a CDF description to disk."


mcDoGlobalRoute(  ) => N/A




enterArc( [?prompts l_promptList]  [?points l_pointList]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Enters an arc into the current window. "


enterBox( [?prompts l_promptList]  [?points l_pointList]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_bBox / nil

"Enters a box in the current window. "


enterCircle( [?prompts l_promptList]  [?points l_pointList]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_bBox / nil

"Enters a circle in the current window."


enterDonut( [?prompts l_promptList]  [?points l_pointList]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Enter a donut in the current window."


enterEllipse( [?prompts l_promptList]  [?points l_pointList]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_bBox

"Enters an ellipse in the current window. "


enterLine( [?prompts l_promptList]  [?points l_pointList]  [?wantPoints x_pointLimit] [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Enters a multisegment line in the current window."


enterMultiRep( [?prompts l_promptList]  [?points l_pointList] [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Identical to enterSegment except that the two points can be in windows viewing different cellviews. "


enterNumber( [?prompts l_promptList] [?form s_form] [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?alwaysMap g_alwaysMap]  ) => f_number

"Prompts you to enter a number. "


enterPath( [?prompts l_promptList]  [?points l_pointList]  [?wantPoints x_pointLimit] [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?pathStyle t_pathStyle] [?pathWidth f_pathWidth] [?beginExtent f_beginExtent] [?endExtent f_endExtent]  [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Enters a path in the current window. "


enterPoint( [?prompts l_promptList]  [?points l_pointList]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_coord_pair

"Prompts you to enter a single point. "


enterPoints( [?prompts l_promptList]  [?points l_pointList] [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?wantPoints x_pointLimit]  [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_coord_pair

"Prompts you to enter a list of points. "


enterPolygon( [?prompts l_promptList]  [?points l_pointList] [?wantPoints x_pointLimit]  [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Digitizes a polygon in the current window. "


enterScreenBox(  ) => l_bBox

"Lets you enter a box in screen coordinates. "


enterSegment( [?prompts l_promptList]  [?points l_pointList] [?form s_form]  [?addPointProc t_addProcName]  [?delPointProc t_delProcName]  [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?dontDraw g_dontDraw] [?alwaysMap g_alwaysMap] [?acceptString g_acceptString] [?acceptNumber g_acceptNumber] [?noInfix g_noInfix]  ) => l_point_list / nil

"Lets you enter a segment into the current window. "


enterString( [?prompts l_promptList] [?form s_form] [?initProc t_initProcName]  [?doneProc t_doneProcName] [?formProc t_formProcName] [?alwaysMap g_alwaysMap]  ) => t_string

"Prompts you to enter a string. "


adpBlockAnalysis( l_blockInstances  ) => t

"Physically analyzes the cell master of each block instance."


adpBlockAnalysisReport( l_blockInstances t_fileName  ) => t

"Creates a file that you can display containing the results of physical analysis of the cell master of each block instance, done by adpBlockAnalysis."


adpCheckRgnOverlap( d_cv  [l_regions]  ) => t

"Checks for overlapping regions, based on the parameters you specify."


adpChipAnalysis( d_cv   ) => t

"Physically analyzes the design and saves the results in the cellview."


adpChipAnalysisReport( d_cv  t_fileName  ) => t

"Physically analyzes the design and saves the results in the cellview."


adpGroupAnalysis( l_groups  ) => t

"Physically analyzes the groups you specify in the cellview."


adpGroupAnalysisReport( l_groups t_fileName  ) => t

"Creates a file that you can display containing the results of physical analysis of groups done by adpGroupAnalysis."


adpGroupAreaEst( d_groupId  ) => f_area

"Estimates the area of a group. Although partitioning automatically estimates areas of groups during partitioning, you might want to know the estimated area of a specific group when you create groups by partitioning the design using one of the following methods: regular structure, ratio-cut, or manual."


adpHierGen( t_libName t_cellName t_viewName t_versionName  ) => t/nil

"Flattens the design hierarchy to create an autoLayout cellview from either a schematic or netlist view."


adpIORandomPlaceGE( d_cv  ) => t/nil

"Randomly places IO cells into sites in a gate array design. You can use adpIORandomPlaceGE during the initial placement phase to get a rough placement of IOs. This function places and correctly orients IO cells about the soft blocks before you use praGEBlockPlace to complete placement. For flat designs that are not partitioned into blocks, you can use the Gate Ensemble placer to place IOs and cells."


adpInitFloorplan( d_cv  t_engine [?all g_all 	t  ?design g_design	 t ?rgn g_region 	t  ?grp g_group 	t ?grid g_grid 	t ?status g_status	t ?sRoute g_specialRoute 	t ?froute g_finalRoute 	t ?prsvIO g_preserveIOcell 	nil  ?prsvMacro g_preserveStdCell 	nil  ?prsvMacro g_preserveMacro 	nil ?array t_array	 ?sdFile t_sdfFileName	 ?fpFile t_floorplanFileName	 ?origin t_origin	 center ?aspr f_aspectRatio 	1.0 ?X f_Xdimension 	0.0 ?Y f_Ydimension 	0.0 ?coreUtil f_coreUtil 	0.8 ?rowUtil f_rowUtil 	0.9  ?iotc f_iotc 	0.0  ?createRow g_createRow 	nil  ?flipRow g_flipRow	nil ]  ) => t/nil

"Initializes the floorplan of a design based on the options you specify. Because most of the arguments are keywords, you can specify only those parameters you want to control. Parameters you do not specify use the default values shown."


adpPartition( d_libId  d_cv  x_num  x_r1  x_r2  x_ppnIgnore  l_criticality  l_path l_weights  t_create  t_prefix  t_pinType  l_subjects  x_dump  ) => l_groupId/instId/nil

"Creates partition groups or blocks by using a ratio-cut 2-way partition algorithm. A ratio-cut algorithm is a variation of a min-cut algorithm. Similar to a min-cut algorithm, a ratio-cut algorithm considers connections between partitions, but also tries to keep the partitions as equal in size as possible."


adpRegionAnalysis( l_regions  ) => t

"Physically analyzes a list of regions."


adpRegionAnalysisReport( l_regions t_fileName  ) => t

"Creates a file that you can display containing the results of physical analysis done by adpRegionAnalysis in a file you specify."


adpSimpleAreaEst( d_cv  [f_coreU]  [f_AR] [f_rowU] [f_iotc]  ) => (t_functionName chipW chipH coreW coreH numRow)

"Estimates the initial chip size and core area, using one of two methods, based on the parameters you supply."


adpfpCheckInstOverlap( d_cv  [l_InstId] [g_full]  ) => t

"Checks for partially or fully overlapping instances, based on the parameters you specify."


adphmGrpToBlock( d_cv grpShapes auViewName abViewName area minAR maxAR areaUtil devName  ) => t/nil

"Creates a soft block from a list of selected groups. Note that you cannot specify the cell name for the new block; it is derived from the group names."


adphmRgnToBlock( d_cv selRgns auViewName abViewName blkBd devName  ) => t/nil

"Creates a soft block from a list of selected regions, using the region boundaries for the block bounderies. Note that you cannot specify the cell name for the new block; it is derived from the placement class of the regions."


adppaEstNetDelay( d_cv  t_tblName  l_hLayer  l_vLayer  d_nets  x_estMode  t_hier t_allHierNet t_rcOnly  ) => t/nil

"Computes net delays."


adppaEstPathDelay( d_cv  t_tblName  l_hLayer  l_vLayer  d_paths  X_estMode  t_hier  ) => t/nil

"Computes path delays."


adppaGenRCReport( d_cv  t_fileName  l_nets  ) => t/nil

"Writes a Resistance Capacitance (RC) report."


adppaGenRSPF( d_cv  t_fileName  l_nets  t_map t_allHierNet  ) => t/nil

"Writes a Reduced Standard Parasitic Format (RSPF) file."


adppaGenSDF( d_cv  t_fileName  l_nets  t_map t_allHierNet  ) => t/nil

"Writes a Standard Delay Format (SDF) file."


adppaLoadSDF( d_cv  t_fileName  g_overWrite x_weight  ) => t/nil

"Reads a Standard Delay Format (SDF) file and places the path timing constraints specified by the file (t_fileName) into the cellview (d_cv). For more information on reading an SDF file, refer to the Preview Fundamentals Reference Manual."


scAddCell( x_column:x_row  t_icon  t_direction  [t_orientation]  ) => x_column:x_row/nil

"Adds a new cell to the array at a specified location."


scAddColumn( x_column  t_direction  n_width  ) => x_column:x_row/nil

"Adds a column of empty cells in a column-biased array. When you add a new column to the left or right of an existing column (not permitted in row-biased arrays), the new column has the same number of cells as the column specified in the first argument. All cells in the new column are initially empty cells with the same height as the corresponding cells in the adjacent column. You can specify the width of the new cells in the width argument. The existing columns in the array move to the right when you add a new column."


scAddMaster( t_master-name  t_icon  ) => t_master-name/nil

"Enlarges the set of masters and/or icons of an array and updates the masterList. This function makes a change only within the database. It does not make any visible change to the array."


scAddRow(  ) => N/A

"Adds a row of empty cells in a row-biased array. If you add a new row above or below an existing row (not permitted in column-biased arrays), the new row has the same number of cells as the adjacent row specified in the first argument. The cells in the new row are initially empty cells with the same width as the corresponding cells in the adjacent row; however, you can specify their height. You can then fill the new row using scChangeCell. The existing rows in the array move up when you add a new row."


scBias(  ) => t_bias/nil

"Call this function only within the scPlane function or in the procedure field of a template plane."


scCellHeight( t_icon | x_column:x_row  ) => f_height/nil

"Takes an icon or a cell location as argument and returns the height of its corresponding master in user units."


scCellWidth( t_icon | x_column:x_row  ) => f_width/nil

"Takes an icon or a cell location as argument and returns the width of its corresponding master in user units."


scCellsPerColumn( x_column  ) => x_cells-in-the-column/nil

"Finds the number of cells in a specified column of an array."


scCellsPerRow( x_row  ) => x_cells-in-the-row/nil

"Finds the number of cells in a specified row of an array."


scChangeBias( t_bias  ) => t/nil

"Alters the bias of an array. Call this function only within the scPlane function or in the procedure field of a template plane. scChangeBias fails if the array does not meet the criteria for the intended bias. This function makes a change only within the database. It does not make any visible change to the array."


scChangeCell( x_column:x_row  t_icon  [t_orientation]  ) => x_column:x_row/nil

"Changes the master represented in an individual cell."


scChangeIcon( t_fromIcon  t_toIcon  ) => t_icon/nil

"Changes the icon that represents a specified master cell. scChangeIcon changes all the cells in the array with the specified old icon to the new icon."


scChangeMaster( t_icon t_master-name  ) => t_master-name/nil

"Changes an existing icon to a new master. The cells with the specified icon in the array block change to the new master. The icon itself does not change."


scChangeOrient( x_column:x_row  t_orientation  ) => x_column:x_row/nil

"Changes the orientation of an individual cell. The dimensions of the transformed cell must be such that it fits correctly into the grid of the array."


scCompileArray(  ) => N/A

"Compiles an array."


mifComment( g_comment1  g_comment2 ...  g_commentN  ) => l_statement

"Generates the SMIFT representation of a MIF Comment statement."


mifPgfCatalog(  ) => N/A

"Generates the SMIFT representation of the MIF PgfCatalog statement."


mifUnits( s_defaultUnits  ) => l_statement

"Generates the SMIFT representation of the MIF Units statement. "


mifVerbose( s_ Yes | No  ) => l_statement

"Generates the SMIFT representation of the MIF Verbose statement. "


gdmAddSpecToSpecList( G_gdmSpec q_gdmSpecList  ) => t/nil

"Adds a gdmSpec object to a gdmSpecList object. If required, it automatically increases the size of the gdmSpecList object so that more gdmSpec objects can be added."


gdmCreateSpec( t_libName | emptyString | nil t_cellName | emptyString | nil t_viewName | emptyString | nil t_fileName | emptyString | nil t_namespace [x_gdmOptions]  ) => G_gdmSpecId/nil

"Creates a gdmSpec object, a user-defined type of SKILL object, according to the options you specify. You must specify at least one of the first four arguments-a library name, cell name, view name, or file name. If you specify a cell name, you must also specify a library name. If you specify a view name, you must also specify a cell name and a library name."


gdmCreateSpecFromDDID( b_ddId  ) => G_gdmSpecId/nil

"Creates a gdmSpec, a user-defined type of SKILL object, from a ddId object."


gdmCreateSpecList(  ) => q_gdmSpecList/nil

"Creates a gdmSpecList object, to which you can add gdmSpec objects later with the gdmAddSpecToSpecList function."


gdmInspectSpec( G_gdmSpecId t_namespace  ) => l_comps

"From a gdmSpec object, extracts and returns the library name, cell name, view name, and file name, if they exist in the gdmSpec object. The information returned will be in the name space you specify in the t_namespace argument."


gdmNextFromSpecList( q_gdmSpecList  ) => G_gdmSpecId/nil

"Takes a gdmSpecList object and returns a gdmSpec object from it. The first time you call this function, it returns the first gdmSpec object in the gdmSpecList. Each successive call gets the next gdmSpec object."


gdmResetSpecList( q_gdmSpecList  ) => t/nil

"Resets the gdmSpecList so that you can obtain gdmSpec objects from it with successive calls of the gdmNextFromSpecList function."


grAutoBias( d_cv d_net  ) => l_biases	/nil

"Calculates the default routing biases used by the tree router for net (d_net) and returns them in a two-element list, l_biases."


grAvoidRouting( d_channel g_avoidStatus  ) => t/nil

"Marks the channel (d_channel) to be avoided during global routing. The global router assigns no nets to the channel as long as it is avoided. If you use this function to control routing, you must not avoid channels containing pins having no other access."


grClose( d_cv  ) => t/nil

"Closes the global routing session and transfers the routing information from the global router"


grExpand( d_cv d_net t_congestionCost t_expansionMode  ) => t/nil

"Global routes the specified net with the expansion router."


grInit( d_cv t_statFile t_tempPinFile [g_stubRoute]  ) => t/nil

"Initializes the global routing environment, creating data structures and performing other setup tasks for the global routing functions."


grPrintNetPairs( d_cv  ) => l_netpairs

"Returns a list of net pairs registered by the global router."


grRegisterNetPair( d_cv d_net1 d_net2 g_register   ) => l_netpairs

"Registers or unregisters net pairs (d_net1 and d_net2) in the global routing environment. The global router attempts to keep these nets mutually planar, minimizing the number of crossings."


grRouteAll( d_cv t_expansionMode t_congestionCost  ) => t/nil

"Global routes one or more nets. After running this function, run grClose before running grInit if you want to reinitialize the global router."


grSetEqInputPinLimitLayer(  ) => N/A

"halfLayerName"


grTree( d_cv d_net l_(t_horizBias t_vertBias) t_congestionCost t_expansionMode  ) => t/nil

"Global routes the specified nets in the cellview using the tree router."


grUndoAll( d_cv  ) => t/nil

"Removes all global routing, including channel pins and connections."


grUndoNet( d_cv d_net  ) => t/nil

"Removes global routing for the specified net (d_net)."


groupDelay( o_waveform  ) => o_waveform/nil

"Computes the group delay of a waveform."


pwrPinPairRoute( d_cv nil  ) => t/nil

"Creates and routes pin pairs for supply and ground. Global routing must be complete (after you run grClose)."


ipcActivateBatch( o_childId ) => t/nil

"Switches a child process to batch mode."


ipcActivateMessages( o_childId ) => t/nil

"Switches a child process into interactive mode. In interactive mode, output from the child is written to a log file and is passed on to the parent process."


ipcBatchProcess( t_command t_hostName t_logFile  ) => o_childId

"Invokes a UNIX process to execute batch commands. The child process in this case is a batch process that does not communicate with the parent process."


ipcBeginProcess( t_command [t_hostName] [tsu_dataHandler]  [tsu_errHandler] [tsu_postFunc] [t_logFile]  ) => o_childId

"Invokes a UNIX process to execute a command or sequence of commands specified."


ipcCloseProcess( o_childId	 ) => t/nil

"Closes the input channel of the child process."


ipcContProcess( o_childId ) => t/nil

"Causes a suspended child process to resume executing. Equivalent to sending a UNIX CONT signal."


ipcGetExitStatus( o_childId ) => x_status

"Returns the exit value of the child process."


ipcGetPid(  ) => x_pid

"Returns the runtime process identification number of the process executing this function."


ipcGetPriority(  ) => x_priority

"Gets the current default priority."


ipcIsActiveProcess( o_childId ) => t/nil

"Determines if a child process is alive, that is, not stopped."


ipcIsAliveProcess( o_childId ) => t/nil

"Checks if a child process is still alive."


ipcKillAllProcesses(  ) => t

"Kills every process initiated by the parent through one of the ipcBeginProcess class of functions."


ipcKillProcess( o_childId ) => t/nil

"Kills the UNIX process identified by o_childId. This call results in a UNIX SIGKILL signal being sent to the child process."


ipcReadProcess( o_childId [x_timeOut]  ) => t_data/nil

"Reads data from the child process"


ipcSetPriority( x_NiceValue ) => t/nil

"Sets the priority value for child processes. All processes spawned after this call will run at the given priority."


ipcSkillProcess( t_command [t_hostName] [tsu_dataHandler]  [tsu_errHandler] [tsu_postFunc] [t_logFile] [x_cmdDesc] [x_resDesc] ) => o_childId

"Invokes a UNIX process capable of executing SKILL functions in the parent process. Opens two additional channels to the child process that let the child send and receive the results of SKILL commands."


ipcSleep( x_time ) => t

"Causes the parent to sleep for the given number of seconds."


ipcSoftInterrupt( o_childId ) => t/nil

"Equivalent to executing the UNIX kill -2 command. If the child process is active, it is sent a soft interrupt. The child is responsible for catching the signal."


ipcStopProcess( o_childId ) => t/nil

"Causes the child process to suspend its execution. Is equivalent to sending a STOP signal through the UNIX kill command."


ipcWait( o_childId [x_interval] [x_timeOut] ) => t

"Causes the parent process to suspend until the child terminates."


ipcWaitForProcess( o_childId [x_timeOut] ) => t

"Causes the parent process to suspend until the child process is alive and ready for communication."


ipcWriteProcess( o_childId t_data ) => t/nil

"Writes data to the child"


skDisableMessage( S_functionName S_messageName [x_occurrences] ) => t

"Disables a SKILL Lint message from being reported inside a given function definition."


skIgnoreMessage( g_ignoreList  ) => t

"Turns the reporting of specified SKILL Lint messages off. For a message to appear, both the message and its group have to be unignored."


skUnignoreMessage( g_ignoreList  ) => t

"Turns the reporting of specified SKILL Lint messages on. For a message to appear, both the message and its group have to be unignored."


skillDebugger(  ) => nil

"Activates the SKILL Debugger. Usually invoked by a break or error handler."


ivConcICe( ?cell ?resModelData ?capModelData [?ConcICeName] [?coupling] [?accuracy]  ) => t / nil

"Starts the ConcICe RC network reduction section of the layout verification program. Each of the arguments is a keyword preceded by a question mark (?). You must give each keyword a value, as indicated below. The ?cell, ?resModelData, and ?capModelData keywords are required, the other keywords are optional."


ivCreatePCells( filename  ) => t/nil

"This function creates parameterized versions of existing cells for the display of devices created by the device extraction commands."


ivDRC( ?cell [?echo] [?full] [?hier] [?optimize] [?inc] [?join] [?set] [?rsf] [?area] [?rulesFromUnix] [?rulesLibName] [?rulesFilePath  ) => t / nil

"Starts the DRC section of the layout verification program. Each of the arguments is a keyword preceded by a question mark (?). You must give each keyword a value or a symbolic name set to the value.The ?cell argument is required; the other arguments are optional."


ivERC( runDir libName cellName viewName netlist jobPriority rulesFromUnix rulesLibName rulesFilePath machine  ) => t / nil

"Starts the ERC program of the layout verification system. All arguments are required."


ivExtract( ?cell [?echo] [?macro] [?hier] [?full] [?inc] [?join] [?set] [?rsf] [?rulesFromUnix] [?rulesFilePath] [?rulesLibName] [?extractedName] [?excellName]  ) => t / nil

"Invokes the Extraction section of the layout verification program. The ?cell argument is required; the other arguments are optional."


ivLVS( runDir layoutLibName layoutCellName layoutViewName netlistLayout  schematicLibName schematicCellName  schematicViewName  netlistSchematic  deviceFixing  noRewire  termCorr  useFileCorr  corrFile  xref  jobPriority rulesFromUnix rulesLibName rulesFilePath machine  ) => t / nil

"Invokes the Layout Versus Schematic (LVS) Comparison program of the layout verification system. All arguments are required."


ivRestart( ?dir [?echo]  ) => t / nil

"Initiates a DRC or Extraction run previously saved using the checkPoint command in the verification rules."


ivVerify(  ) => N/A

"Runs DRC and extraction from the UNIX environment."


