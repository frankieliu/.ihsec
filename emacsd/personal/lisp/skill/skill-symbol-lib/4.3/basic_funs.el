(put 'basic_funs 'symbol-type "basic fun")
(setq basic_funs '(
("abs" "fx_number" "Returns the absolute value of a floating-point number or integer.")
("acos" "fx_number" "Returns the arc cosine of a floating-point number or integer.")
("add1" "fx_number" "Adds one to a floating-point number or integer.")
("alias" "s_aliasName  s_functionName" "Defines a symbol as an alias for a function. This is an nlambda function.")
("alphalessp" "st_arg1 st_arg2" "Compares two string or symbol names alphabetically.")
("alphaNumCmp" "st_arg1 st_arg2 [g_arg3]" "Compares two string or symbol names alphanumerically or numerically.")
("append" "l_list1 l_list2" "Creates a list containing the elements of list1 followed by the elements of list2 or returns an original association table including new entries.")
("append1" "l_list g_arg" "Adds new arguments to the end of a list.")
("apply" "sl_func g_args" "Evaluates the arguments given and applies the function to the argument list.")
("arglist" "s_function" "Returns the number and types of arguments expected for a function.")
("arrayp" "g_value" "Checks if an object is an array.")
("asin" "fx_number" "Returns the arc sine of a floating-point number or integer.")
("assoc" "g_searchKey l_dataList" "Searches association lists. Uses equal for comparison.")
("assq" "g_searchKey l_dataList" "Searches association lists. Uses the faster eq for comparison.")
("atan" "fx_number" "Returns the arc tangent of a floating-point number or integer.")
("atom" "g_arg" "Checks if an object is an atom.")
("bcdp" "g_value" "Checks if an object is a binary function.")
("boundp" "s_arg" "Checks if a symbol is bound, that is, has been assigned a value.")
("break" "" "Forces entry to the break handler if inserted directly into a SKILL function.")
("breakpt" "[s_function...] [entry/exit/both g_condition]" "Sets breakpoints on one or more functions. This is an nlambda function.")
("buildString" "l_strings [t_glueCharacters]" "Concatenates a list of strings with separation characters.")
("caaar" "l_list" "Takes apart a list. Equivalent to car( car( car( l_list))).")
("caadr" "l_list" "Takes apart a list. Equivalent to car( car( cdr( l_list))).")
("caar" "l_list" "Takes apart a list. Equivalent to car( car( l_list)).")
("cadr" "l_list" "Takes apart a list. Equivalent to car( cdr( l_list)).")
("callInitProc" "t_contextName" "Calls all the initialization functions associated with a context.")
("car" "l_list" "Returns the first element of a list.")
("case" "g_selectionExpr l_clause1 [l_clause2 ...]" "Evaluates an expression, matches the resulting selectors sequentially against comparators defined in clauses, and executes the expressions in the matching clause. This is an nlambda function.")
("caseq" "g_selectionExpr l_clause1 [l_clause2 ...]" "Evaluates an expression, matches the resulting selectors sequentially against comparators defined in clauses, and executes the expressions in the matching clause. This is an nlambda function.")
("cdar" "l_list" "Takes apart a list. Equivalent to cdr( car( l_list)).")
("cddr" "l_list" "Takes apart a list. Equivalent to cdr( cdr( l_list)).")
("cdr" "l_list" "Returns the tail of the list, that is, the list without its first element.")
("changeWorkingDir" "[t_name]" "Changes the working directory.")
("clear" "" "Clears all tracing and breakpoints.")
("clearExitProcs" "" "Removes all registered exit functions.")
("close" "p_port" "Drains, closes, and frees a port.")
("compareTime" "t_time1 t_time2" "Compares two string arguments, representing a clock-calendar time.")
("compress" "t_sourceFile t_destFile" "Reduces the size of a SKILL file and places the output into another file.")
("concat" "stx_arg1 [stx_arg2 ...]" "Concatenates strings, symbols, or integers into a single symbol.")
("cond" "l_clause1 ..." "Examines conditional clauses from left to right until either a clause is satisfied or there are no more clauses remaining. This is an nlambda function.")
("cons" "g_element l_list" "Adds an element to the beginning of a list.")
("cont" "" "Continues execution from a breakpoint. cont and continue are identical.")
("continue" "" "Continues execution from a breakpoint. cont and continue are identical.")
("copy" "l_arg" "Returns a copy of a list, that is, a list with all the top-level cells duplicated.")
("copy_name" "r_defstruct" "Created by the defstruct function where <name> is the name of the defstruct. Creates and returns a copy of a structure.")
("copyDefstructDeep" "r_object" "Performs a deep or recursive copy on defstructs with other defstructs as sub-elements, making copies of all the defstructs encountered.")
("cos" "fx_number" "Returns the cosine of a floating-point number or integer.")
("count" "[s_function ... | t]" "Counts the number of times a function has been called. This is an nlambda function.")
("createDir" "st_name" "Creates a directory.")
("csh" "[t_command]" "Starts the UNIX C-shell as a child process to execute a command string.")
("debugQuit" "" "Exits one level of the SKILL debugger.")
("debugStatus" "" "Prints the functions and variables being traced, functions that have breakpoints set, and the functions being counted.")
("declare" "s_arrayName[x_sizeOfArray]" "Creates an array with a specified number of elements. This is an nlambda function.")
("declareLambda" "s_name1 ... s_nameN" "Tells the evaluator that certain (forward referenced) functions are of lambda type (as opposed to nlambda or macro).")
("declareNLambda" "s_name1 ... s_nameN" "Tells the evaluator that certain (forward referenced) functions are of nlambda type (as opposed to lambdas or macros).")
("defCapDepends" "s_context l_dependsList" "Specifies which contexts depend on which other contexts.")
("defCapPrefixes" "s_context l_prefixList" "Specifies which prefixes are acceptable for a context's global variables.")
("defInitProc" "t_contextName s_procName" "Registers a function that the system calls immediately after loading a context.")
("defmacro" "s_macroName ( l_formalArglist" "Registers a function that the system calls immediately after loading a context.")
("defprop" "sl_id g_value s_name" "Adds properties to symbols or disembodied property lists but none of its arguments are evaluated. This is an nlambda function.")
("defstruct" "s_name s_slot1 [s_slot2..]" "Creates a defstruct, a named structure that is a collection of one or more variables.")
("defstructp" "g_object [st_name]" "Checks if an object is a defstruct.")
("defun" "s_funcName ( l_formalArglist" "Defines a function with the name and formal argument list you specify. This is an nlambda function.")
("defUserInitProc" "t_contextName s_procName" "Registers a user-defined function that the system calls immediately after loading a context.")
("defvar" "s_varName [g_value]" "Defines a variable (symbol) and assigns a value.")
("deleteDir" "st_name" "Deletes a directory.")
("deleteFile" "st_name" "Deletes a file.")
("drain" "[p_outputPort]" "Writes out all characters that are in the output buffer of a port.")
("dtpr" "g_value" "Checks if an object is a non-empty list.")
("dump" "[x_variables]" "Prints the current value of all the local variables on the stack.")
("ed" "t_fileName" "Edits a file.")
("edi" "t_fileName" "Edits a file, then includes the file into SKILL.")
("edit" "st_object [g_loadFlag]" "Edits a file, function, or variable. This is an nlambda function.")
("edl" "t_fileName" "Edits a file, then loads the file into SKILL.")
("encrypt" "t_sourceFile t_destFile [t_password]" "Encrypts a SKILL file and places the output into another file.")
("eq" "g_arg1 g_arg2" "Checks addresses when testing for equality.")
("equal" "g_arg1 g_arg2" "Checks contents of strings and lists when testing for equality.")
("err" "[g_value]" "Causes an error.")
("error" "[st_message1 [st_message2] ...]" "Prints error messages and calls err.")
("errset" "g_expr [g_errprint]" "Encapsulates the execution of an expression in an environment safe from the error mechanism. This is an nlambda function.")
("errsetstring" "t_string [errprint]" "Reads and evaluates an expression stored in a string. Same as evalstring except that it calls errset to catch any errors that might occur during the parsing and evaluation.")
("eval" "g_expression" "Evaluates an argument and returns its value.")
("evalstring" "t_string" "Reads and evaluates an expression stored in a string.")
("evenp" "x_num" "Checks if a number is an even integer.")
("exists" "s_formalVar l_valueList g_predicateExpr" "Returns the first tail of l_valueList whose car satisfies a predicate expression. Also verifies whether an entry in an association table satisfies a predicate expression. This is an nlambda function.")
("exit" "[x_status]" "Causes SKILL to exit with a given process status (defaults to 0), whether in interactive or batch mode.")
("exp" "fx_number" "Raises e to a given power.")
("expandMacro" "g_form" "Expands one level of macro call for a form.")
("fileLength" "st_name" "Determines the number of bytes in a file.")
("fileSeek" "p_port x_offset x_whence" "Sets the position for the next operation to be performed on the file opened on a port.")
("fileTell" "p_port" "Returns the current offset in bytes for the file opened on a port.")
("fix" "n_arg" "Converts a floating-point number to an integer.")
("fixp" "g_value" "Checks if an object is a fixed number.")
("float" "n_arg" "Converts an integer into a floating-point number.")
("floatp" "g_value" "Checks if an object is a floating-point number.")
("for" "s_loopVar x_initialValue x_finalValue g_expr1 [g_expr2 ...]" "Evaluates the sequence g_expr1, g_expr2 ... for each loop variable named in s_loopVar, beginning with x_initialValue and ending with x_finalValue. This is an nlambda function.")
("forall" "s_formalVar l_valueList g_predicateExpr" "Checks if g_predicateExpr evaluates to non-nil for every element in l_valueList. This is an nlambda function.")
("foreach" "s_formalVar  g_exprList  g_expr1 [g_expr2 ...]" "Evaluates one or more expressions for each element of a list of values. This is an nlambda function.")
("fprintf" "p_port t_formatString  [ g_arg1 ...]" "Writes formatted output to a port.")
("fscanf" "p_inputPort t_formatString [s_var1 ...] " "Reads input from a port according to format specifications and returns the number of items read in.")
("gc" "[t_string]" "Forces a garbage collection. This function is also called by the system.")
("gcsummary" "" "Prints a summary of memory allocation and garbage collection statistics in the current SKILL run.")
("gensym" "[st_arg]" "Returns a new symbol based on the input argument.")
("get" "sl_id s_name" "Returns the value of a property in a property list.")
("get_pname" "s_arg" "Returns the print name of a symbol as a string.")
("get_string" "st_arg" "Converts symbols to strings.")
("getAllLoadedFiles" "" "Returns a list of all files loaded since debug mode was turned on.")
("getc" "[p_inputPort]" "Reads and returns a single character from an input port.")
("getchar" "st_arg x_index" "Returns an indexed character of a string or the print name if the string is a symbol.")
("getCurrentTime" "" "Returns the current time.")
("getd" "s_functionName" "Returns the function binding for a function.")
("getDirFiles" "st_name" "Lists the names of all files and directories (including . and ..) in a directory.")
("getFnWriteProtect" "s_name" "Returns the value of the write-protect bit for a function.")
("getFunctions" "t_fileName" "Returns the functions defined in a file loaded after debug mode is turned on.")
("getInstallPath" "" "Returns the installation path (the directory where the Cadence products are installed in your system.")
("getq" "sl_id s_name" "Returns the value of a property in a property list. Same as get except that the second argument is not evaluated.")
("getqq" "sl_id s_name" "Returns the value of a property in a property list. Same as get except that neither argument is evaluated.")
("gets" "s_variableName [p_inputPort]" "Reads a line from the input port and stores the line as a string in the variable. This is an nlambda function.")
("getShellEnvVar" "t_UnixShellVariableName" "Returns the value of a UNIX environment variable.")
("getSkillPath" "" "Returns the current SKILL path.")
("getVarWriteProtect" "s_name" "Returns the value of the write-protect bit on a variable.")
("getVersion" "" "Returns the version number of the software you are currently using.")
("getWarn" "" "Returns any warning that has not already been printed.")
("getWorkingDir" "" "Returns the working directory as a string.")
("go" "s_label" "Transfers control to the statement following the label argument. This is an nlambda function.")
("if" "g_condition g_thenExpression [g_elseExpression]" "Selectively evaluates two groups of one or more expressions. This is an nlambda function.")
("ilToolBox" "" "Brings up the SKILL Development toolbox.")
("index" "t_string1 st_string2" "Returns the remainder of string1 beginning with the first occurrence of string2.")
("infile" "st_fileName" "Opens an input port ready to read a file.")
("installDebugger" "" "Installs the SKILL debugger as the error handler.")
("instring" "t_string" "Opens a string for reading, just as infile would open a file.")
("isCallable" "s_function" "Checks if a function is defined or is autoloadable from a context.")
("isDir" "st_name [ tl_path ]" "Checks if a path exists and if it is a directory name.")
("isExecutable" "st_name [ tl_path ]" "Checks if you have permission to execute a file or search a directory.")
("isFile" "st_name [ tl_path ]" "Checks if a file exists. Identical to isFileName, except that directories are not viewed as (regular) files.")
("isFileEncrypted" "st_name" "Checks if a file exists and is encrypted.")
("isFileName" "st_name [ tl_path ]" "Checks if a file exists.")
("isLink" "st_name [ t_path ]" "Checks if a path exists and if it is a symbolic link. t_path overrides the SKILL path.")
("isReadable" "st_name [ tl_path ]" "Checks if you have permission to read a file or list a directory.")
("isWritable" "st_name [ tl_path ]" "Checks if you have permission to write to a file or update a directory.")
("lambda" "s_formalArgument" "Defines a function without a name.")
("last" "l_arg" "Returns the last list cell in a list.")
("lconc" "l_ptr l_x" "Uses a tconc structure to efficiently splice a list to the end of another list.")
("length" "la_arg" "Determines the length of a list, array, or association table.")
("let" "l_bindings g_expr1 ..." "Provides a faster alternative to prog for binding local variables only. This is a syntax function.")
("lineread" "p_inputPort" "Parses the next line in the input port into a list.")
("linereadstring" "t_string" "Executes lineread on a string and returns the first form read in.")
("list" "[g_arg1 g_arg2 ...]" "Creates a list with the given elements.")
("listFunctions" "t_pattern" "Returns all functions that contain the given substring or regular expression as part or all of their print name.")
("listp" "g_value" "Checks if an object is a list.")
("listVariables" "t_pattern" "Returns all variables that contain the given substring or regular expression as part or all of their print name.")
("load" "t_fileName [t_password]" "Opens a file, repeatedly calls lineread to read in the file, and immediately evaluates each form after it is read in.")
("loadContext" "t_contextFileName" "Loads a context file into the current session.")
("loadi" "t_fileName [t_password]" "Identical to load, except that loadi ignores errors encountered during the load, prints an error message, and then continues loading.")
("loadstring" "t_string" "Opens a string for reading, then parses and executes expressions stored in the string.")
("log" "fx_number" "Returns the natural logarithm of a floating-point number or integer.")
("lowerCase" "st_string" "Replaces uppercase alphabetic characters with their lowercase equivalents.")
("makeTable" "S_name [g_default_value]" "Creates and defines an association table.")
("makeTempFileName" "st_nameTemplate" "Appends a string suffix to the last component of a path template so that the resulting composite string does not duplicate any existing file name.")
("map" "u_func l_arg1 [l_arg2 ...]" "Iterates over all the list cells of the list passed as the argument. When used with foreach, the current list  cell is bound to the loop variable and the foreach body is evaluated. The foreach function returns the original list.")
("mapc" "u_func l_arg1 [l_arg2 ...]" "Iterates over all the elements of a list passed as the argument. When used with foreach, the current element is bound to the loop variable and the foreach body is evaluated. The foreach function returns the original list.")
("mapcan" "u_func l_arg1 [l_arg2 ...]" "Iterates over all the elements of the list passed as the argument. When used with foreach, the current element is bound to the loop variable and the foreach body is evaluated. The result, which must be a list, is stored in a list. The foreach function returns the result of appending these intermediate results.")
("mapcar" "u_func l_arg1 [l_arg2 ...]" "Iterates over all the elements of the list passed as the argument. When used with foreach, the current element is bound to the loop variable and the foreach body is evaluated with the result saved in a list. The foreach function returns the list of the intermediate results.")
("maplist" "u_func l_arg1 [l_arg2 ...]" "Iterates over all the list cells of the list passed as the argument. When used with foreach, the current list  cell is bound to the loop variable and the foreach body is evaluated with the result saved in a list. The foreach function returns the list of the intermediate results.")
("max" "fx_num1 fx_num2 [fx_num3 ...]" "Returns the maximum of the values passed in.")
("measureTime" "g_expression" "Measures the time needed to evaluate an expression. This is an nlambda function.")
("member" "g_arg1 l_arg2" "Returns the largest sublist of arg2 whose first element is equal to arg1. Uses the equal function for comparison.")
("memq" "g_arg1 l_arg2" "Returns the largest sublist of arg2 whose first element is equal to arg1. Uses the eq function for com parison.")
("min" "fx_num1 fx_num2 [fx_num3 ...]" "Returns the minimum of the floating-point numbers or integers.")
("minusp" "fx_num" "Checks if a value is a negative number.")
("mod" "x_num1 x_num2" "Returns the integer remainder of dividing the first integer by the second integer.")
("mprocedure" "s_funcName( s_formalArgument" "Defines a macro function with a given function name and a single formal argument. This is a syntax function.")
("nconc" "l_arg1 l_arg2 [l_arg3 ...]" "Equivalent to a destructive append where the first argument is actually modified.")
("ncons" "g_element" "Builds a list containing an element. Equivalent to cons( g_element nil ).")
("needNCells" "s_cellType|st_userType x_cellCount" "Allocates the appropriate number of pages to accommodate a cell count.")
("neq" "g_arg1 g_arg2" "Checks if two arguments are not equal, and returns t if they are not.")
("nequal" "g_arg1 g_arg2" "Checks if two arguments are not logically equivalent and returns t if they are not.")
("newline" "[p_outputPort]" "Prints a newline (\n) character and then flushes the output port.")
("next" "[x_steps]" "Allows execution to proceed until the next expression.")
("nindex" "t_string1 st_string2" "Finds the symbol or string, string2, in string1 and returns the character index, starting from one, of the first point at which the string2 matches part of string1.")
("nlambda" "( s_formalArgument" "Allows functions to be defined without having names. In all other respects, nlambda is identical to nprocedure.")
("nprocedure" "s_funcName( s_formalArgument" "Defines an nlambda function with a function name and a single formal argument. This is an nlambda function.")
("nth" "x_index0 l_list" "Returns an index-selected element of a list, assuming a zero-based index.")
("nthcdr" "x_count l_list" "Applies cdr to a list a given number of times.")
("nthelem" "x_index1 l_list" "Returns the indexed element of the list, assuming a one-based index.")
("null" "g_value" "Checks if an object is equal to nil.")
("numberp" "g_value" "Checks if a data object is a number, either an integer or floating-point number.")
("numOpenFiles" "" "Returns the number of files now open and the maximum number of files that a process can open.")
("oddp" "x_num" "Checks if a value is an odd integer.")
("onep" "fx_num" "Checks if a value is equal to one.")
("otherp" "g_value" "Checks if an object is a foreign data pointer.")
("outfile" "st_fileName [t_mode]" "Opens an output port ready to write to a file.")
("parseString" "t_string [t_breakCharacters]" "Breaks a string into a list of substrings with break characters.")
("plist" "s_symbolName" "Returns the property list associated with a symbol.")
("plusp" "fx_num" "Checks if a value is a positive number.")
("portp" "g_value" "Checks if an object is an input-output port.")
("pp" "s_functionName [p_outputPort]" "Pretty prints the definition of a function. This is an nlambda function.")
("pprint" "g_value [ p_outputPort]" "Identical to print except that it pretty prints the value whenever possible.")
("prependInstallPath" "st_name" "Prepends the Cadence installation path to a file or directory and returns the resulting path as a string.")
("print" "g_value [p_outputPort]" "Prints the value of an expression using the default format for the data type of the value.")
("printf" "t_formatString [g_arg1 ...]" "Writes formatted output to poport.")
("printFunctions" "t_pattern [ p_outport ]" "Prints all functions that contain a substring or regular expression as part or all of the print name.")
("printlev" "g_value x_level x_length [p_outputPort]" "Prints a list with a limited number of elements and levels of nesting.")
("println" "g_value [p_outputPort]" "Prints the value of an expression using the default format for the data type of the value.")
("printstruct" "g_object" "Prints the contents of an association table or defstruct in a tabular format.")
("printVariables" "t_pattern [ p_outport ]" "Prints all variables and their values that contain a substring or regular expression as part or all of the print name.")
("procedure" "s_funcName l_formalArglist" "Defines a function using a formal argument list. The body of the procedure is a list of expressions to evaluate.")
("profile" "s_profileField" "Turns on global SKILL profiling for measuring time or memory.")
("profileReset" "" "Resets all SKILL profiler data.")
("profileSummary" "[?file t_filename] [?sort s_sortKey] [?filters g_filterSpec] [?maxFns x_maxDisplayed] [?minSecs f_minSecs] [?minBytes x_minBytes] [?children g_showChildren]" "Prints a summary of profiling results, showing either the execution time or memory allocated to SKILL functions that were executed.")
("prog" "l_localVariables [ s_label ] g_expr1 ..." "Allows for local variable bindings and permits abrupt exits on control jumps.")
("prog1" "g_expr1 [ g_expr2 ...]" "Evaluates expressions from left to right and returns the value of the first expression.")
("prog2" "g_expr1 g_expr2 ..." "Evaluates expressions from left to right and returns the value of the second expression.")
("progn" "g_expr1 ..." "Evaluates expressions from left to right and returns the value of the last expression.")
("putd" "s_functionName yl_functionDef" "Assigns a new function binding, which must be a binary function, a lambda expression, or nil, to a function.")
("putprop" "sl_id g_value s_name" "Adds properties to symbols or disembodied property lists.")
("putpropq" "sl_id g_value s_name" "Adds properties to symbols or disembodied property lists. Identical to putprop except that s_name is not evaluated.")
("putpropqq" "sl_id g_value s_name" "Adds properties to symbols or disembodied property lists. Identical to putprop except that sl_id and s_name are not evaluated.")
("random" "[x_number]" "Returns a random integer between zero and a given number minus one.")
("readTable" "S_fileName o_table" "Reads and appends the contents of a file to an existing association table.")
("regExitAfter" "s_name" "Registers the action to be taken after the exit function has performed its bookkeeping tasks but before it returns control to the operating system.")
("regExitBefore" "s_name" "Registers the action to be taken before the exit function is executed.")
("remd" "g_x l_arg" "Removes all top-level elements equal to a SKILL object from a list. This is a destructive removal.")
("remdq" "g_x l_arg" "Removes all top-level elements equal to a SKILL object from a list. This is a destructive removal.")
("remExitProc" "s_name" "Removes a registered exit procedure.")
("remove" "g_x l_arg" "Returns a copy of an argument with all top-level elements equal to a SKILL object removed. Can also be used with an association table.")
("remprop" "sl_id s_name" "Physically removes a property from a property list and returns its former value.")
("remq" "g_x l_arg" "Returns a copy of a list with all top-level elements equal to a SKILL object removed.")
("return" "[g_expression]" "Forces the enclosing prog to exit and return an expression as a value.")
("reverse" "l_arg" "Returns the elements of a list in reverse order.")
("rexCompile" "t_pattern" "Compiles a regular expression string pattern into an internal representation to be used by succeeding calls to rexExecute.")
("rexExecute" "st_target" "Matches a string or symbol against the previously compiled pattern set up by the last rexCompile call.")
("rexMagic" "[g_state]" "Turns on or off the special interpretation associated with the meta-characters in regular expressions.")
("rexMatchAssocList" "t_pattern l_targets" "Returns a new association list created out of those elements of an association list whose key matches a regular expression string pattern.")
("rexMatchList" "t_pattern l_targets" "Matches a list of strings or symbols against a regular expression string pattern.")
("rexMatchp" "t_pattern st_target" "Finds a pattern within a string or symbol.")
("rexReplace" "t_source t_replacement x_index" "Replaces the substring(s) in the source string that matched the last regular expression compiled by the replacement string.")
("rexSubstitute" "t_string" "Substitutes the pattern tags in the argument string with previously matched (sub)strings.")
("rindex" "t_string1 st_string2" "Returns the remainder of string1 beginning with the last occurrence of string2.")
("round" "n_arg" "Rounds a floating-point number to its closest integer value.")
("rplaca" "l_arg1 g_arg2" "Replaces the first element of a list with an object.")
("rplacd" "l_arg1 l_arg2" "Replaces the tail of a list with the elements of a second list.")
("saveContext" "t_contextFileName" "Saves the current state of the SKILL language interpreter as a binary file.")
("set" "s_variableName g_newValue" "Sets a variable to a new value. Similar to setq but the first argument for set is evaluated.")
("setContext" "t_contextName" "Allows contexts to be saved incrementally, creating micro contexts from a session's SKILL context.")
("setFnWriteProtect" "s_name" "Sets the write protect bit on a function.")
("setof" "s_formalVar l_valueList g_predicateExpression" "Returns a new list containing only those elements in a list or the keys in an association table that satisfy an expression.")
("setplist" "s_atom l_plist" "Sets the property list of an object to a new property list; the old property list attached to the object is lost.")
("setq" "s_variableName g_newValue" "Sets a variable to a new value. setq is the same as the equals (=) operator.")
("setShellEnvVar" "t_UnixShellVariableExpr" "Sets the value of a UNIX environment variable to a new value.")
("setSkillPath" "tl_paths/nil" "Sets the internal SKILL path.")
("setVarWriteProtect" "s_name" "Sets the write-protect on a variable.")
("sh" "[t_command]" "Starts the UNIX shell sh as a child process to execute a command string.")
("shell" "[t_command]" "Starts the UNIX shell sh as a child process to execute a command string.")
("simplifyFilename" "t_name" "Expands the name of a file to its full path.")
("sin" "fx_number" "Returns the sine of a floating-point number or integer.")
("skDisableMessage" "S_functionName S_messageName [x_occurrences]" "Disables a SKILL Lint message from being reported inside a given function definition.")
("skIgnoreMessage" "g_ignoreList" "Turns the reporting of specified SKILL Lint error messages off.")
("skillDebugger" "" "Activates the SKILL Debugger.")
("sklint" "?file 	t_inputFileName] [?context  t_contextName] [?prefixes  l_prefixList] [?outputFile  t_outputFileName] [?noPrintLog  g_noPrintLog] [?ignores  l_ignoresMessageList] [?checkNlambda  g_checkNlambda]" "Checks a SKILL file or context and reports potential errors and ways to clean up your code.")
("skUnignoreMessage" "g_ignoreList" "Turns the reporting of specified SKILL Lint error messages on.")
("sort" "l_data u_comparefn" "Sorts a list according to a sort function; defaults to an alphabetical sort.")
("sortcar" "l_data u_comparefn" "Similar to sort except that only the car of each element in a list is used for comparison by the sort function.")
("sprintf" "s_Var/nil t_formatString [g_arg1 ...]" "Formats the output and puts the resultant string into the variable given as the first argument.")
("sqrt" "fx_number" "Returns the square root of a floating-point number or integer.")
("srandom" "x_number" "Sets the initial state of the random number generator to a given number.")
("sstatus" "s_name g_switchValue" "Sets the internal system variable named to a given value. This is an nlambda function.")
("stacktrace" "[g_unevaluated] [x_depth] [x_skip] [p_port]" "Prints the functions on the stack and their arguments to the depth specified, or to the bottom of the stack.")
("status" "s_name" "Returns the value of the internal system variable named. This is an nlambda function.")
("step" "[x_steps]" "Steps into functions and executes a given number of SKILL functions.")
("stepout" "[x_steps]" "Allows execution to proceed until the evaluator returns from the current function.")
("strcat" "t_string1 [t_string2 t_string3 ...]" "Takes input strings and concatenates them.")
("strcmp" "t_string1 t_string2" "Compares two argument strings alphabetically.")
("stringp" "g_value" "Checks if an object is a string.")
("stringToFunction" "t_string" "Wraps and converts a string of SKILL code into a parameterless SKILL function.")
("strlen" "t_string" "Gives the length of a string in characters.")
("strncat" "t_string1 t_string2 x_max" "Creates a new string by appending a maximum number of characters from string2 to string1.")
("strncmp" "t_string1 t_string2 x_max" "Compares two argument strings alphabetically only up to a maximum number of characters.")
("sub1" "fx_number" "Subtracts one from a floating-point number or integer.")
("subst" "g_x g_y l_arg" "Substitutes one object for another object in a list.")
("substring" "st_string x_index [x_length]" "Creates a new substring from an input string, starting at an index point and continuing for a given length.")
("sxtd" "x_number x_bits" "Sign-extends the rightmost bits of a number by a specified number of bits.")
("symbolp" "g_value" "Checks if an object is a symbol.")
("symeval" "s_symbol" "Returns the value of a symbol.")
("symstrp" "g_value" "Checks if an object is either a symbol or a string.")
("system" "t_unix-command" "Executes a unix command synchronously.")
("tablep" "g_object" "Checks if an object is an association table.")
("tableToList" "o_table" "Converts the contents of an association table to an association list.")
("tailp" "l_arg1 l_arg2" "Returns arg1 if a list cell eq to arg1 is found by cdr'ing down arg2 zero or more times, nil otherwise.")
("tan" "fx_number" "Returns the tangent of a floating-point number or integer.")
("tconc" "l_ptr g_x" "Creates a list cell whose car points to a list of the elements being constructed.")
("tracef" "[ s_function | t_fileName ... | t ]" "Turns on tracing. Shows the functions called with their evaluated parameters and return values. This is an nlambda function.")
("tracep" "[S_property...|t]" "Turns on tracing of property assignments. This is an nlambda function.")
("tracev" "[s_variable ... | t]" "Turns on tracing for assignments to variables. This is an nlambda function.")
("type" "g_value" "Returns a symbol whose name describes the type of a data object.")
("typep" "g_value" "Returns a symbol whose name describes the type of a data object.")
("unalias" "s_aliasName1 ..." "Undefines the aliases specified in an argument list and returns a list containing the aliases undefined by the call. This is an nlambda function.")
("unbreakpt" "[s_function... | t]" "Clears breakpoints. This is an nlambda function.")
("uncount" "[s_function ... | t]" "Turns off counting. This is an nlambda function.")
("uninstallDebugger" "" "Uninstalls the SKILL debugger as the error handler.")
("unless" "g_condition g_expr1 ..." "Evaluates a condition. If the result is true (non-nil), it returns nil; otherwise evaluates the body expressions in sequence and returns the value of the last expression.")
("unprofile" "" "Turns off SKILL profiling.")
("untrace" "[s_function | t_fileName ... | t]" "Turns tracing off for all functions specified that were traced using the tracef function. This is an nlambda function.")
("untracep" "[S_property...|t]" "Turns off tracing of properties. This is an nlambda function.")
("untracev" "[s_variable ... | t]" "Turns off tracing for assignments to variables. This is an nlambda function.")
("upperCase" "st_string" "Replaces lowercase alphabetic characters with their uppercase equivalents.")
("warn" "t_formatString [g_arg1 ...]" "Prints a warning message with given arguments inserted using the same format specification as sprintf, printf, and fprintf.")
("when" "g_condition g_expr1 ..." "Evaluates a condition. If the result is non-nil, evaluates the sequence of expressions and returns the value of the last expression.")
("where" "[g_unevaluated] [x_depth] [x_skip] [p_port]" "Prints the functions on the stack and their arguments to the depth specified, or to the bottom of the stack, including the local variables and their bindings.")
("whereIs" "s_function" "Prints the last file loaded in debug mode in which a function was defined, as well as the starting line number.")
("while" "g_condition g_expr1 ..." "Evaluates a condition and sequence of expressions until the condition evaluates to false.")
("writeTable" "S_fileName o_table" "Writes the contents of an association table to a print file with one key/value pair per line.")
("xcons" "l_list g_element" "Adds an element to the beginning of a list. Equivalent to cons but the order of the arguments is reversed.")
("zerop" "fx_num" "Checks if a value is equal to zero.")
("zxtd" "x_number x_bits" "Zero-extends the rightmost bits of a number by the specified number of bits.")
))
