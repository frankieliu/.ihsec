(put 'db_funs 'symbol-type "database access fun")
(setq db_funs '(
("dbAddFigToNet" "" "The dbSetq equivalent of figure~>net = d_net")
("dbAddObjectToGroup" "d_group d_object" "Adds a database object to a group.")
("dbAllCellViews" "d_lib t_cellName [d_contextCellView]" "Lists all the view names of a cell.")
("dbCheck" "[d_cellView/nil]" "Checks for corruption of data.")
("dbClose" "d_cellView" "Closes a cellview.")
("dbCompactCellView" "d_cellView [t_libName t_cellName t_viewName [t_version [d_contextCellView]]]" "Saves a cellview in compacted format.")
("dbCompressPointArray" "l_pointArray x_isClosed [f_DBUPerUU]" "Compresses colinear points in a list of points.")
("dbConcatTransform" "_list1 l_list2" "Merges two transformations into a new transformation.")
("dbConvertArcToLine" "d_arc x_nSides" "Converts an arc to a line. A line is defined as a number of connecting segments.")
("dbConvertDonutToPolygon" "d_donut x_nSides" "Converts a donut to a polygon.")
("dbConvertEllipseToPolygon" "d_ellipse x_nSides" "Converts an ellipse to a polygon.")
("dbConvertLineToPath" "d_line x_width [t_pathStyle]" "Converts a line to a path.")
("dbConvertPathToPolygon" "d_path" "Converts a path to a polygon with the same number of points as the path.")
("dbCopyCellView" "d_srcCVId t_libName t_cellName t_viewName t_version g_contextId b_overwrite" "Copies a cellview to a destination cellview.")
("dbCopyCellViewHier" "t_sourceLibName t_sourceCellName t_sourceViewName t_destLibName t_destCellName g_hierCopy g_sourceLibOnly g_overwrite s_listOfViews" "Hierarchically copies a cellview from a source library to a destination library.")
("dbCopyFig" "d_fig d_cellView/nil [l_transform]" "Copies and transforms a figure and places it in a cellview.")
("dbCopyProp" "d_object1 d_object2" "Copies all the properties of one database object to another database object.")
("dbCopySingleProp" "d_srcPropId d_dstObjId" "Copies a single property to a destination object.")
("dbCreateArc" "d_cellView (tx_layer [t_purpose]" "Creates an arc.")
("dbCreateConn" "d_net d_inst d_term" "Identical to dbCreateInstTerm except that the net d_net defines a valid net that is to be connected to the instance terminal of a master terminal d_term.")
("dbCreateConnByName" "d_net d_inst t_name" "Similar to dbCreateConn except that the master terminal is defined by t_name instead of being specified by the master terminal's dbObject.")
("dbCreateConnByNewName" "d_net d_inst t_name" "Similar to dbCreateConnByName except that t_name can be a reference to a master terminal yet to be created in the master cellview of instance d_inst.")
("dbCreateDonut" "d_cellView (tx_layer [t_purpose]" "Creates a donut (two concentric circles).")
("dbCreateDot" "d_cellView (tx_layer [t_purpose]" "Creates a dot.")
("dbCreateEllipse" "d_cellView (tx_layer [t_purpose]" "Creates an ellipse.")
("dbCreateEnumProp" "d_object t_name t_value l_string" "Creates an enumerated property for an object.")
("dbCreateGroup" "d_cellView t_name l_groupType" "Creates a group in a cellview.")
("dbCreateHierProp" "d_object t_name" "Creates a hierarchical property for an object.")
("dbCreateInst" "d_cellView d_master t_name/nil l_point t_orient [x_numInst]" "Creates an instance (of cellview d_master) in the cellview d_cellView with an origin and orientation specified by l_point and t_orient.")
("dbCreateInstPin" "d_net/nil d_instTerm d_pin" "Creates an instance pin for the instance terminal d_instTerm and the master pin d_pin.")
("dbCreateInstPinByName" "d_net/nil d_instTerm t_name" "Similar to dbCreateInstPin but the master pin is defined by its name instead of the dbObject of the pin.")
("dbCreateInstTerm" "d_net/nil d_inst d_term" "Creates an instance terminal on the instance d_inst for the master terminal d_term.")
("dbCreateLabel" "d_cellview (tx_layer [t_purpose]" "Creates a graphic text-string label.")
("dbCreateLine" "d_cellView (tx_layer [t_purpose]" "Creates a line.")
("dbCreateNet" "d_cellView t_name/nil d_parentNet" "Creates a new net in a cellview. If the net already exists, returns nil.")
("dbCreateParamInst" "d_cellView d_master t_name/nil l_point t_orient [x_numInst [l_paramList]]" "Creates a parameterized cell instance (of cellview d_master) in the cellview d_cellView with an origin and orientation specified by l_point and t_orient.")
("dbCreatePath" "d_cellView (tx_layer [t_purpose]" "Creates a path.")
("dbCreatePin" "d_net d_fig [t_name/nil]" "Creates a pin for the net d_net with a figure d_fig.")
("dbCreatePolygon" "d_cellView (tx_layer [t_purpose]" "Creates a polygon.")
("dbCreateProp" "d_object t_name t_propType g_value" "Creates a scalar property for an object d_object.")
("dbCreateRangeProp" "d_object t_name t_propType g_value g_lBound g_uBound" "Creates a range property for an object d_object.")
("dbCreateRect" "d_cellView (tx_layer [t_purpose]" "Creates a rectangle.")
("dbCreateSimpleMosaic" "d_cellView d_masterCellView t_name/nil l_point t_orient x_rows x_cols x_rowSpacing x_colSpacing" "Creates a simple mosaic in the cellview d_cellView from the master d_masterCellView.")
("dbCreateTerm" "d_net t_name/nil t_direction" "Creates a terminal for a net.")
("dbCreateTextDisplay" "d_associateId d_ownerId (tx_layer [t_purpose]" "Creates a text display object.")
("dbCreateUniqueNamedNet" "d_cellview t_prefix x_numBits" "Creates a net in a cellview.")
("dbDeleteAllNet" "d_cellView" "Deletes all nets from a cellview.")
("dbDeleteGroupByName" "d_cellView t_name" "Deletes a group and its members from a cellview.")
("dbDeleteObject" "d_object" "Deletes an object.")
("dbDeleteObjectFromGroup" "d_group d_object" "Deletes an object from a group.")
("dbDeletePropByName" "d_object t_name" "Deletes a property from an object.")
("dbExpandToMemNameExpr" "t_bundleName" "Expands a bundle name to a list of member-name-expression strings.")
("dbFindAnyInstByName" "d_cellView t_name" "Retrieves an instance or mosaic.")
("dbFindMemInstByName" "d_cellView t_name" "Retrieves an instance or mosaic and returns its member index.")
("dbFindNetByName" "d_cellView t_name" "Retrieves a net in a cellview.")
("dbFindOpenCellView" "d_libId t_cellName t_viewName t_versionName" "Finds the requested version of a cellview if it is open.")
("dbFindSigByAlias" "d_cellView t_name" "Finds a signal in a cellview by an alias.")
("dbFindSigByName" "d_cellView t_name" "Finds a signal in a cellview.")
("dbFindTermByName" "d_cellView t_name" "Finds a terminal in a cellview.")
("dbFullPath" "d_cellView" "Returns the full path of a cellview.")
("dbGetAnyInstSwitchMaster" "d_anyInst t_viewList" "Switches into a different view of a master cell instance and opens the corresponding cellview.")
("dbGetAssociateTextDisplay" "d_associateId d_ownerId" "Checks if a text display object exists for a given associate and owner.")
("dbGetCellViewVersionId" "dt_lib t_cellName t_viewList [t_version]" "Gets and displays the requested version of a cellview.")
("dbGetInstNameNumInst" "t_name" "Retrieves the number of instances of an instance or mosaic.")
("dbGetMemName" "t_name x_index" "Retrieves the name of the x_index member from t_name.")
("dbGetMemNetSig" "d_net x_index" "Retrieves the signal carried by bit number x_index of net d_net.")
("dbGetMemNetSigName" "d_net x_index" "Similar to dbGetMemNetSig except that it returns the name of the signal instead of the signal object.")
("dbGetNameNumBit" "t_name" "Parses a string and returns the number of bits in the net, terminal, or instance named.")
("dbGetNeighbor" "d_cvId l_bBox t_direction [t_layer [t_purpose]] [x_depth]" "Returns the closest neighboring object in the specified direction of the given layer/purpose.")
("dbGetNeighborList" "d_cellView l_area t_direction [t_layer] [lx_depth]" "Lists neighboring objects in the specified direction of the given layer-purpose pair.")
("dbGetOverlaps" "d_cellView l_bBox [xt_layer [xt_purpose]] [lx_level]" "Returns a list of all objects in a cellview that have bounding boxes overlapping the area specified by l_bBox.")
("dbGetPath" "" "Returns the current setting of the library search path as a string. Identical to dmGetLibPath.")
("dbGetSigNameMemNets" "d_cellView t_sigName" "Lists the member nets within the cellview d_cellView that contain the signal t_sigName.")
("dbGetTrueOverlaps" "d_cellView l_bBox [tx_layer [tx_purpose [lx_level]]]" "Returns a list of all objects in a cellview that overlap the area specified by l_bBox.")
("dbGetTwoLayerPropOrder" "d_lib l_lpps1 l_lpps2 t_propName" "Determines if a two-layer property is ordered.")
("dbGetVersionTimeStamp" "d_version" "Returns the time that a version of a cellview was last saved.")
("dbGetq" "d_object St_AttrOrPropName" "Retrieves the value of an attribute or a property associated with a database object.")
("dbIsSameMaster" "d_anyInst1 d_anyInst2" "Determines if two instances or mosaics are instantiated from the same cellview master.")
("dbIsSigNameGlobal" "d_cellView t_name" "Tests if the signal t_name is a global signal.")
("dbMakeNet" "d_cellView t_name/nil d_parentNet" "Creates a new net in a cellview. If the net already exists, returns the dbObject of the net.")
("dbMergeSingleProp" "d_srcPropId d_dstObjId" "Merges a property with a destination object without overwriting the property if it already exists.")
("dbMoveFig" "d_fig d_cellView/nil [l_transform]" "Moves and transforms a figure and places it in a cellview.")
("dbMoveGroupMember" "d_groupMem1 [d_groupMem2/nil]" "Moves group member d_groupMem1 immediately after group member d_groupMem2.")
("dbMoveLayer" "d_dstLayerId d_srcLayerId x_before" "Changes the sequence of layers in the layer table.")
("dbMoveShape" "dbCopyShape" "Replaced by dbCopyFig.")
("dbOpen" "t_CellandView [d_contextCellView [t_mode] ]" "Identical to dbOpenCellView with both the library and version specified as nil. This function is maintained for compatibility with earlier versions of the software.")
("dbOpenAutoSaveCellView" "t_libName t_cellName lt_viewName [t_version]" "Reads an auto-saved file.")
("dbOpenCellView" "dt_lib/nil t_cellName lt_viewName [t_version [t_mode [d_contextCellView]]]" "Opens a cellview.")
("dbOpenHier" "d_cellView x_numLevels" "Opens and binds masters of instances that constitute a design hierarchy.")
("dbOpenPanicCellView" "dt_lib/nil t_cellName lt_viewName [t_version [t_mode [d_contextCellView]]]" "Opens the panic file for a cellview.")
("dbProduceOverlapInst" "d_cellView l_bBox [lx_level]" "Returns a list of all the instances in a cellview that overlap the area specified by l_bBox.")
("dbPurge" "d_cellView" "Forces a cellview to close and removes it from virtual memory.")
("dbReopen" "d_cellview t_mode" "Changes the mode on an open cellview from read to append.")
("dbReplaceEnumProp" "d_object t_name t_value l_string" "Creates an enumerated property for an object.")
("dbReplaceHierProp" "d_object t_name" "Creates a hierarchical property for an object.")
("dbReplaceProp" "d_object t_name t_propType g_value" "Creates a scalar property for an object.")
("dbReplaceRangeProp" "d_object t_name t_propType g_value g_lBound g_uBound" "Creates a range property for an object.")
("dbSave" "d_cellView [t_libName t_cellName t_viewName [t_version [d_contextCellView]]]" "Saves the results of a modified cellview that has been opened for write or append mode.")
("dbSetAutoSave" "g_isAutoSaveSet [x_saveInterval]" "Enables or disables the automatic save feature.")
("dbSetPath" "t_pathList" "Sets the library search path.")
("dbSetq" "d_object g_value St_AttrOrPropName" "Modifies the value of an attribute or a property associated with a database object.")
("dbSubFigFromNet" "" "The dbSetq equivalent of figure~>net = nil.") 
("dbTransformBBox" "l_point l_list" "Transforms a bounding box.")
("dbTransformPoint" "l_point l_list" "Transforms a coordinate pair.")
("dbeAddObjectToCluster" "d_figure d_cluster")
("dbeDefineCluster" "l_objectList g_name g_comment")
("dbeDefineComment" "d_fig t_comment")
("dbeDefineGlobalWidth" "d_cellView t_layer s_symbol n_pathWidth t_widthExpr")
("dbeDefineLocalSep" "l_figEdge1 l_figEdge2 t_sepExpr")
("dbeDefineObjectName" "d_fig t_name")
("dbeDefineOrder" "l_figlist")
("dbeDeleteCluster" "d_cluster")
("dbeDeleteClusterByName" "d_cellview t_clusterName")
("dbeDeleteComment" "d_figure")
("dbeDeleteGlobalWidth" "d_widthConstraint")
("dbeDeleteLocalSep" "d_localSep")
("dbeDeleteObjectFromCluster" "d_figure d_cluster")
("dbeDeleteObjectName" "d_figure")
("dbeDeleteOrder" "d_order")
("dbeGenCodeToDevice" "d_cellView t_file t_deviceClassName l_classParams l_formalParams")
("dbeGenCodeToProc" "d_cellView t_file")
("dbeGetClusterComment" "d_clusterId")
("dbeGetClusterInfo" "d_cluster")
("dbeGetClusterName" "d_clusterId")
("dbeGetClusters" "d_cellView")
("dbeGetComment" "d_Object")
("dbeGetCommentedObjects" "d_cellView")
("dbeGetGlobalWidthInfo" "d_widthId")
("dbeGetGlobalWidths" "d_cellView")
("dbeGetLocalSepInfo" "d_localSep")
("dbeGetLocalSeps" "d_cellView")
("dbeGetNamedObjects" "d_cellView")
("dbeGetObjectCluster" "d_object")
("dbeGetObjectName" "d_object")
("dbeGetObjectsLocalSep" "d_obj1 d_obj2 t_dir")
("dbeGetObjectsRelPlace" "d_obj1 d_obj2")
("dbeGetOrders" "d_cellView")
))
